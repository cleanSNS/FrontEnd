{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luckh\\\\OneDrive\\\\Desktop\\\\gradp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Home from \"./routes/Home/root/HomeMain\";\nimport Login from \"./routes/Login/root/LoginMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst kakaotokenUrl = 'http://52.78.49.137:8080/social/login/kakao?code=';\nconst navertokenUrl = 'http://52.78.49.137:8080/social/login/naver';\n\nfunction App() {\n  _s();\n\n  const [loginState, setLoginState] = useState(\"notSet\"); //로그인 시 페이지 전환하는 함수\n\n  const loginFunc = () => {\n    setLoginState(\"set\");\n  }; //로그아웃 시 페이지 전환하는 함수\n\n\n  const logoutFunc = () => {\n    setLoginState(\"notSet\");\n  };\n\n  {\n    if (!loginState) {\n      let code = new URL(window.location.href);\n\n      if (code === undefined) {\n        /*#__PURE__*/\n        _jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this);\n      } else {\n        axios.get(kakaotokenUrl + code).then(res => console.log(res)).catch(res => console.log(res));\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/main\",\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          logout: logoutFunc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Login, {\n          login: loginFunc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n} //로그인 화면에서는 로그인만 해주면 되고, Home에서는 현재의 login상태를 확인하고, login안되어있으면 login화면으로 보내줘야한다.\n\n\n_s(App, \"OxgxGeaPeA9ts4IX4TzA4DIUvk0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","useState","BrowserRouter","Router","Route","Switch","Redirect","Home","Login","kakaotokenUrl","navertokenUrl","App","loginState","setLoginState","loginFunc","logoutFunc","code","URL","window","location","href","undefined","get","then","res","console","log","catch"],"sources":["C:/Users/luckh/OneDrive/Desktop/gradp/src/App.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\nimport Home from \"./routes/Home/root/HomeMain\";\r\nimport Login from \"./routes/Login/root/LoginMain\";\r\n\r\nconst kakaotokenUrl = 'http://52.78.49.137:8080/social/login/kakao?code=';\r\nconst navertokenUrl = 'http://52.78.49.137:8080/social/login/naver';\r\n\r\nfunction App() {\r\n  const [loginState, setLoginState] = useState(\"notSet\");\r\n\r\n  //로그인 시 페이지 전환하는 함수\r\n  const loginFunc = () => {\r\n    setLoginState(\"set\");\r\n  };\r\n  //로그아웃 시 페이지 전환하는 함수\r\n  const logoutFunc = () => {\r\n    setLoginState(\"notSet\");\r\n  };\r\n\r\n  {\r\n    if(!loginState){\r\n      let code = new URL(window.location.href);\r\n      if(code === undefined){\r\n        <Redirect to=\"/\" />\r\n      }\r\n      else{\r\n        axios.get(kakaotokenUrl + code)\r\n        .then((res) => console.log(res))\r\n        .catch((res) => console.log(res));\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/main\">\r\n          <Home logout={logoutFunc} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Login login={loginFunc} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n//로그인 화면에서는 로그인만 해주면 되고, Home에서는 현재의 login상태를 확인하고, login안되어있으면 login화면으로 보내줘야한다.\r\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,KAFF,EAGEC,MAHF,EAIEC,QAJF,QAKO,kBALP;AAOA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;;AAEA,MAAMC,aAAa,GAAG,mDAAtB;AACA,MAAMC,aAAa,GAAG,6CAAtB;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,QAAD,CAA5C,CADa,CAGb;;EACA,MAAMa,SAAS,GAAG,MAAM;IACtBD,aAAa,CAAC,KAAD,CAAb;EACD,CAFD,CAJa,CAOb;;;EACA,MAAME,UAAU,GAAG,MAAM;IACvBF,aAAa,CAAC,QAAD,CAAb;EACD,CAFD;;EAIA;IACE,IAAG,CAACD,UAAJ,EAAe;MACb,IAAII,IAAI,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAAX;;MACA,IAAGJ,IAAI,KAAKK,SAAZ,EAAsB;QACpB;QAAA,QAAC,QAAD;UAAU,EAAE,EAAC;QAAb;UAAA;UAAA;UAAA;QAAA;MACD,CAFD,MAGI;QACFrB,KAAK,CAACsB,GAAN,CAAUb,aAAa,GAAGO,IAA1B,EACCO,IADD,CACOC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CADf,EAECG,KAFD,CAEQH,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFhB;MAGD;IACF;EACF;EAED,oBACE,QAAC,MAAD;IAAA,uBACE,QAAC,MAAD;MAAA,wBACE,QAAC,KAAD;QAAO,IAAI,EAAC,OAAZ;QAAA,uBACE,QAAC,IAAD;UAAM,MAAM,EAAET;QAAd;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAIE,QAAC,KAAD;QAAO,IAAI,EAAC,GAAZ;QAAA,uBACE,QAAC,KAAD;UAAO,KAAK,EAAED;QAAd;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,C,CACD;;;GAvCSH,G;;KAAAA,G;AAwCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}