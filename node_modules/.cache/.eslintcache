[{"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\index.js":"1","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\App.js":"2","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\socialLoginStatePage.js":"3","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\apiCall.js":"4","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\apiUrl.js":"5","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Email\\email.js":"6","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\HomeMain.js":"7","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\root\\LoginMain.js":"8","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\numberNotice\\numberNotice.js":"9","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\logo\\Logo.js":"10","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\searchBar\\searchBar.js":"11","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\detailPage.js":"12","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\page.js":"13","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\hashtagPage\\hashtagPage.js":"14","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js":"15","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js":"16","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js":"17","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js":"18","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js":"19","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newChat\\newChat.js":"20","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js":"21","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js":"22","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js":"23","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerMain.js":"24","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js":"25","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerFindPW.js":"26","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerSignUp.js":"27","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\timeCalculation.js":"28","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\makeStringIntoArray.js":"29","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\searchBar\\singleSearchList.js":"30","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\renderComment.js":"31","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\contentArea\\contentArea.js":"32","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\singlePage.js":"33","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\singlePage.js":"34","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\singleUser.js":"35","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\chat\\singleChat.js":"36","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\ImageValidCheck.js":"37","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js":"38","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js":"39","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\withdrawalSetting.js":"40","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js":"41","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js":"42","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js":"43","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js":"44","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newChat\\singleFriend.js":"45","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\notice\\singleNotice.js":"46","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\chat\\singleChattingRoom.js":"47","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\friend\\renderRightFriend.js":"48","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\profile\\profile.js":"49","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\renderCommentOfComment.js":"50","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\imageArea.js":"51","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\singleCommentOfComment.js":"52"},{"size":197,"mtime":1665017350499,"results":"53","hashOfConfig":"54"},{"size":6511,"mtime":1668862767899,"results":"55","hashOfConfig":"54"},{"size":526,"mtime":1668862950840,"results":"56","hashOfConfig":"54"},{"size":1191,"mtime":1667463112069,"results":"57","hashOfConfig":"54"},{"size":7324,"mtime":1667780387006,"results":"58","hashOfConfig":"54"},{"size":930,"mtime":1666570404770,"results":"59","hashOfConfig":"54"},{"size":22122,"mtime":1668867837775,"results":"60","hashOfConfig":"54"},{"size":1987,"mtime":1666743744404,"results":"61","hashOfConfig":"54"},{"size":310,"mtime":1666141908256,"results":"62","hashOfConfig":"54"},{"size":407,"mtime":1665535800081,"results":"63","hashOfConfig":"54"},{"size":4522,"mtime":1667441569976,"results":"64","hashOfConfig":"54"},{"size":20744,"mtime":1668867267391,"results":"65","hashOfConfig":"54"},{"size":3632,"mtime":1667780387021,"results":"66","hashOfConfig":"54"},{"size":2972,"mtime":1667780387006,"results":"67","hashOfConfig":"54"},{"size":14953,"mtime":1667780387021,"results":"68","hashOfConfig":"54"},{"size":11333,"mtime":1668861399853,"results":"69","hashOfConfig":"54"},{"size":8304,"mtime":1667780387006,"results":"70","hashOfConfig":"54"},{"size":1502,"mtime":1666848261148,"results":"71","hashOfConfig":"54"},{"size":4710,"mtime":1667441350419,"results":"72","hashOfConfig":"54"},{"size":9152,"mtime":1667780387006,"results":"73","hashOfConfig":"54"},{"size":14674,"mtime":1668867742027,"results":"74","hashOfConfig":"54"},{"size":3529,"mtime":1668866502547,"results":"75","hashOfConfig":"54"},{"size":3594,"mtime":1667441409288,"results":"76","hashOfConfig":"54"},{"size":5711,"mtime":1666745162254,"results":"77","hashOfConfig":"54"},{"size":2832,"mtime":1666765899303,"results":"78","hashOfConfig":"54"},{"size":2578,"mtime":1665535095222,"results":"79","hashOfConfig":"54"},{"size":14230,"mtime":1666570404770,"results":"80","hashOfConfig":"54"},{"size":1816,"mtime":1667451428316,"results":"81","hashOfConfig":"54"},{"size":1132,"mtime":1669078078869,"results":"82","hashOfConfig":"54"},{"size":1284,"mtime":1667440894930,"results":"83","hashOfConfig":"54"},{"size":8699,"mtime":1667453645868,"results":"84","hashOfConfig":"54"},{"size":304,"mtime":1667266564738,"results":"85","hashOfConfig":"54"},{"size":411,"mtime":1667780387021,"results":"86","hashOfConfig":"54"},{"size":3910,"mtime":1667780387021,"results":"87","hashOfConfig":"54"},{"size":613,"mtime":1667780387021,"results":"88","hashOfConfig":"54"},{"size":1482,"mtime":1667788115073,"results":"89","hashOfConfig":"54"},{"size":865,"mtime":1667780387006,"results":"90","hashOfConfig":"54"},{"size":13185,"mtime":1667457311325,"results":"91","hashOfConfig":"54"},{"size":14493,"mtime":1667780387021,"results":"92","hashOfConfig":"54"},{"size":2465,"mtime":1667780387021,"results":"93","hashOfConfig":"54"},{"size":1466,"mtime":1665017350499,"results":"94","hashOfConfig":"54"},{"size":14393,"mtime":1667460045079,"results":"95","hashOfConfig":"54"},{"size":7682,"mtime":1667780387021,"results":"96","hashOfConfig":"54"},{"size":7392,"mtime":1667457826636,"results":"97","hashOfConfig":"54"},{"size":1469,"mtime":1667780387006,"results":"98","hashOfConfig":"54"},{"size":3308,"mtime":1668863247015,"results":"99","hashOfConfig":"54"},{"size":4648,"mtime":1667441365994,"results":"100","hashOfConfig":"54"},{"size":782,"mtime":1667439271087,"results":"101","hashOfConfig":"54"},{"size":688,"mtime":1665017350516,"results":"102","hashOfConfig":"54"},{"size":4851,"mtime":1667453149991,"results":"103","hashOfConfig":"54"},{"size":2413,"mtime":1667780387006,"results":"104","hashOfConfig":"54"},{"size":5387,"mtime":1667453137756,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jy2fxk",{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\index.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\App.js",["299","300"],[],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Home from \"./routes/Home/root/HomeMain\";\r\nimport Login from \"./routes/Login/root/LoginMain\";\r\nimport Email from \"./routes/Email/email\";\r\nimport SocialLoginStatePage from './socialLoginStatePage';\r\nimport { logoutApiUrl, KakaoTokenUrl, NaverTokenUrl, refreshNewAccessTokenUrl, getNoticeNumber, getMyUserIdUrl } from './apiUrl';\r\nimport {\r\n  getAxios,\r\n} from './apiCall';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n  const [isLogin, setIsLogin] = useState(\"logout\");//처음에는 로그인 되지 않은상태이다. => \"login\" // \"logout\"가능\r\n  const [noticeEventSource, setNoticeEventSource] = useState(null);\r\n  const [userId, setUserId] = useState(-1);\r\n\r\n  //userId를 받고 SSE를 여는 함수\r\n  const getUserIdANdOpenSSEHandler = async () => {\r\n    const res = await getAxios(getMyUserIdUrl, refreshAccessToken);\r\n    setUserId(res.data.data.userId);\r\n\r\n    const eventSourcetmp = new EventSource(getNoticeNumber, { withCredentials: true });\r\n    setNoticeEventSource(eventSourcetmp);\r\n  };\r\n\r\n  //로그인시 refresh token을 local Storage에 저장하는 기능 앞에 Bearer 가 붙어있다.\r\n  const loginFunc = (res) => {\r\n    localStorage.setItem(\"rft\", res.headers.authorization);//rft설정\r\n\r\n    getUserIdANdOpenSSEHandler();\r\n\r\n    window.history.pushState(null, null, \"https://cleanbook.site/\");//소셜 로그인등은 code가 생기므로 그거 없애기\r\n    setIsLogin(\"login\");//메인화면으로 이동\r\n  };\r\n\r\n  //Access token이 만료되었을 수 있는 상황에서 refresh Token을 통해 다시 발급받는다.\r\n  const refreshAccessToken = async () => {\r\n    const rft = localStorage.getItem(\"rft\");\r\n    if(rft === null) return;//rft가 없다면 종료한다.\r\n    if(rft === \"kakao\" || rft === \"naver\") return;//소셜 로그인된 상황이므로, 해당 함수 그냥 종료.\r\n\r\n    await axios.get(refreshNewAccessTokenUrl, {\r\n      headers:{\r\n        Authorization: rft\r\n      }\r\n    })\r\n    .then((response) => {\r\n      console.log(response);\r\n      console.log(\"토큰 재발급 되었습니다.\");\r\n      if(isLogin === \"logout\"){\r\n        //새로고침했는데 마침 AT만 시간초과된 경우.\r\n        //JS에 선언된SSE, userId가 유실된 상태이므로 복구하고 login상태로 만든다.\r\n        getUserIdANdOpenSSEHandler();\r\n        setIsLogin(\"login\");\r\n        return;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      if(error.response.data.message === \"만료된 토큰입니다.\" || error.response.data.message === \"access token이 존재하지 않습니다.\"){//너무 오래된 경우 isLogin의 상태와 무관하게 만료되면 logout한다.\r\n        alert(\"장시간 로그인되어, 자동 로그아웃되었습니다. 다시 로그인해주세요.\");\r\n        logoutFunc();\r\n        return;\r\n      }\r\n      if(isLogin === \"logout\"){//만료되지 않았으나 호출. 즉, 새로고침인 경우이다. 이 경우 Accesstoken이 만료되지않았다는 오류가 발생 => 그냥 SSE를 연결하고 로그인상태로 만든다.\r\n        getUserIdANdOpenSSEHandler();\r\n        setIsLogin(\"login\");\r\n        return;\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {refreshAccessToken();}, []);//처음 화면을 켰을 때, 한번 자동으로 실행해서 실수로 껐더라도 자동 로그인이 되게 한다.\r\n\r\n  //로그아웃 함수\r\n  const logoutFunc = () => {\r\n    if(noticeEventSource !== null) {\r\n      console.log(\"SSE close\");\r\n      noticeEventSource.close();\r\n      setNoticeEventSource(null);\r\n    }\r\n    axios.get(logoutApiUrl)\r\n    .then((res) => {\r\n      console.log(res);\r\n      localStorage.removeItem(\"rft\");//refresh token 지우기\r\n      setIsLogin(\"logout\");//로그인 화면으로 이동\r\n    })\r\n    .catch(()=>{\r\n      //일반적으로 오류인 경우는 없다 그냥 rft가 만료되었을 뿐이다.\r\n      alert(\"비정상적으로 종료되었습니다.\");\r\n      localStorage.removeItem(\"rft\");//refresh token 지우기\r\n      setIsLogin(\"logout\");//로그인 화면으로 이동\r\n    });\r\n  };\r\n\r\n  //카카오 로그인 시 토큰을 프론트로 받게 되는 경우 처리하는 함수\r\n  const [socialState, setSocialState] = useState(\"\");\r\n  const socialLogin = () => {\r\n    if(localStorage.getItem(\"rft\") === \"kakao\"){//소셜 처리중인 경우\r\n      setSocialState(KakaoTokenUrl);\r\n    }\r\n    else if(localStorage.getItem(\"rft\") === \"naver\"){//소셜 처리중인 경우\r\n      setSocialState(NaverTokenUrl);\r\n    }\r\n  };\r\n  useEffect(socialLogin, []);\r\n\r\n  const socialLoginStart = (url) => {\r\n    if(socialState === \"\") return;//초기상황의 경우 종료\r\n\r\n    const params = new URL(window.location.href).searchParams;\r\n      const code = params.get(\"code\");\r\n      axios.post(url + code)\r\n      .then((res) => {//문제가 없는 경우이므로, 로그인 해준다.\r\n        loginFunc(res);\r\n        setSocialState(\"\");//소셜 로그인도 꺼준다.\r\n      })\r\n      .catch((res) => {\r\n        console.log(res);\r\n        alert(\"카카오 소셜 로그인에 문제가 발생했습니다.\");\r\n        localStorage.removeItem(\"rft\");//소셜 상태를 종료한다.\r\n        window.location.href = \"/\";//다시 원래의 로그인 url로 이동한다. => 이건 이게 맞는듯 하다 ?code=을 없애기 위해\r\n      });\r\n  }\r\n  useEffect(\r\n    () => {socialLoginStart(socialState);}\r\n  , [socialState])\r\n\r\n  //이메일 인증을 위해 페이지로 들어온 것인지 여부를 확인\r\n  const [authInfo, setAuthInfo] = useState({});\r\n  const emailCheck = () => {\r\n    const params = new URL(window.location.href).searchParams;\r\n    const email = params.get(\"email\");\r\n    const authToken = params.get(\"authToken\");\r\n    if(email !== null || authToken !== null){//이메일 인증 중이라면 넘겨줄 정보를 세팅하고, email로 바꿔준다.\r\n      setAuthInfo({\r\n        email: email,\r\n        authToken: authToken,\r\n      });\r\n      setIsLogin(\"email\");\r\n    }\r\n  };\r\n  useEffect(emailCheck, []);\r\n\r\n  return (\r\n    <div>\r\n      {isLogin === \"login\" ? <Home logout={logoutFunc} refreshAccessToken={refreshAccessToken} noticeEventSource={noticeEventSource} userId={userId}/> : null}\r\n      {isLogin === \"logout\" ? <Login login={loginFunc}/> : null}\r\n      {isLogin === \"email\" ? <Email authInfo={authInfo} /> : null}\r\n      {socialState !== \"\" ? <SocialLoginStatePage socialState={socialState}/> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\socialLoginStatePage.js",["301"],[],"import Style from \"./socialLoginStatePage.module.css\";\r\nimport {KakaoTokenUrl, NaverTokenUrl} from './apiUrl';\r\n\r\nconst SocialLoginStatePage = ({socialState}) => {\r\n    return(\r\n        <div className={Style.Cover}>\r\n            <p className={Style.ment} style={socialState === KakaoTokenUrl ? {border: \"5px solid #FEE500\"} : {border: \"5px solid #03C75A\"}}>\r\n                소셜 로그인 중입니다.<br /> 잠시 기다려 주세요...\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SocialLoginStatePage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\apiCall.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\apiUrl.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Email\\email.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\HomeMain.js",["302","303","304","305","306","307","308","309","310","311","312","313","314","315"],[],"import { useState, useEffect } from 'react';\r\nimport Style from \"./HomeMain.module.css\";\r\nimport Logo from \"../../../logo/Logo\";\r\nimport SearchBar from \"./searchBar/searchBar\";\r\nimport NumberNotice from \"./numberNotice/numberNotice\";\r\nimport DetailPage from './detailPage/detailPage';\r\n\r\nimport LeftPage from \"../leftInner/page/page\";\r\nimport LeftPageList from \"../leftInner/pageList/pageList\";\r\nimport LeftChat from \"../leftInner/chat/chat\";\r\nimport LeftNewPost from \"../leftInner/newPost/newPost\";\r\nimport LeftSetting from \"../leftInner/setting/settingMain\";\r\nimport LeftNewChat from \"../leftInner/newChat/newChat\";\r\nimport LeftHashtagPage from \"../leftInner/hashtagPage/hashtagPage\";\r\n\r\nimport RightNewPost from \"../rightInner/newPost/newPost\";\r\nimport RightChat from \"../rightInner/chat/chat\";\r\nimport RightNotice from \"../rightInner/notice/notice\";\r\nimport RightFriend from \"../rightInner/friend/friend\";\r\nimport RightSetting from \"../rightInner/setting/setting\";\r\n\r\nimport addTagImg from \"./tagImages/add.png\";\r\nimport messageTagImg from \"./tagImages/message.png\";\r\nimport notificationTagImg from \"./tagImages/notification.png\";\r\nimport settingTagImg from \"./tagImages/settings.png\";\r\nimport userTagImg from \"./tagImages/user.png\";\r\n\r\nimport {\r\n  newPostUrl,\r\n  presetNoticeNumeber,\r\n  uploadImageUrl,\r\n  getChatTriger,\r\n  presetChatNumber,\r\n} from \"../../../apiUrl\";\r\nimport { getAxios, postAxios } from '../../../apiCall';\r\n\r\nconst Home = ({ logout, refreshAccessToken, noticeEventSource, userId }) => {\r\n  /*******************************************************************new Post 관련****************************************************************************/\r\n  /* 좌, 우 페이지로 나뉘어져있는 정보를 추합해서 서버에 보내야 하기 때문에 상위 요소에서 작성 */\r\n  //아래는 좌측 페이지로 이동할 정보\r\n  const [newPostImages, setNewPostImages] = useState([]);//이미지 리스트 - 파일을 api에 보낼 수 있게 처리한 리스트이다.\r\n  const [renderedNewPostImages, setRenderedNewPostImages] = useState([]);//이미지 리스트 - 파일을 임시로 미리보기를 하기 위해 만든 리스트이다.\r\n  const [newPostHashtag, setNewPostHashtag] = useState([]);//해시태그 리스트\r\n  const [newPostContent, setNewPostContent] = useState(\"\");//글\r\n\r\n  //아래는 우측 페이지로 이동할 정보\r\n  const [newPostLikeNotice, setNewPostLikeNotice] = useState(true);//좋아요 알림\r\n  const [newPostCommentNotice, setNewPostCommentNotice] = useState(true);//댓글 알림\r\n  const [newPostReadPostAuth, setNewPostReadPostAuth] = useState(\"ALL\");//읽기 권한\r\n  const [newPostCommentAuth, setNewPostCommentAuth] = useState(true);//댓글 관련 권한\r\n  const [newPostReadLikeAuth, setNewPostReadLikeAuth] = useState(true);//좋아요 읽기 권한\r\n\r\n  //글 올리는 함수 => 좌측 페이지로 넘어가야한다. - 두가지가 순차적으로 실행\r\n  const [uploadImages, setUploadImages] = useState([]);//실제로 업로드 될 이미지의 리스트\r\n  const [newPageSumbitClicked, setNewPageSubmitClicked] = useState(false);\r\n\r\n  const submitAbleAgain = () => {//제출 버튼 재활성화 함수\r\n    setNewPageSubmitClicked(false);\r\n    const btn = document.querySelector('#newPageSubmitBtn');\r\n    btn.innerHTML = 'Submit';\r\n    btn.style.color = 'white';\r\n    btn.style.backgroundColor = '#F4DEDE';\r\n    btn.style.cursor = 'pointer';\r\n    btn.disabled = false;\r\n  };\r\n\r\n  const uploadNewPostHandler = (event) => {//제출 버튼 클릭 시 실행\r\n    event.preventDefault();\r\n    if(newPageSumbitClicked) return;//이미 실행중인 경우 종료\r\n    if(newPostImages.length === 0){\r\n      alert(\"이미지를 하나 이상 업로드 해주세요.\");\r\n      return;\r\n    }\r\n    if(newPostContent.length === 0){\r\n      alert(\"글을 입력해 주세요/.\");\r\n      return;\r\n    }\r\n\r\n    setNewPageSubmitClicked(true);\r\n    const btn = document.querySelector('#newPageSubmitBtn');\r\n    btn.innerHTML = \"제출중\";\r\n    btn.style.color = 'black';\r\n    btn.style.backgroundColor = 'gray';\r\n    btn.style.cursor = 'wait';\r\n    btn.disabled = true;\r\n  };\r\n\r\n  const uploadNewPostHandlerSecondAct = async () => {//트리거 되어, 2번째로 실행 => 이미지를 처리 한다.\r\n    if(!newPageSumbitClicked) return;\r\n    //formData에 파일들 append하기 - 파일명은 image_파일명 으로 생성\r\n    const fileData = new FormData();\r\n    for(let i = 0; i < newPostImages.length; i++){\r\n      fileData.append(`file`, newPostImages[i]);\r\n    }\r\n\r\n    const res = await postAxios(`${uploadImageUrl}page`, fileData, {\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data',\r\n      }\r\n    }, refreshAccessToken);\r\n    const tmp = [...res.data]\r\n    setUploadImages(tmp);\r\n  };\r\n  useEffect(() => {uploadNewPostHandlerSecondAct();}, [newPageSumbitClicked]);\r\n\r\n  const uploadNewPostHandlerThirdAct = async () => {//트리거 되어, 3번째로 실행 => 글을 업로드 한다.\r\n    if(uploadImages.length !== 0){//이미지 처리에 성공해서 렌더링할 파일이 있는 경우\r\n      const sendBody = {\r\n        content: newPostContent,\r\n        pageSetting : {\r\n          notificationLike: newPostLikeNotice,\r\n          notificationComment: newPostCommentNotice,\r\n          readAuth: newPostReadPostAuth,\r\n          commentAuth: newPostCommentAuth,\r\n          likeReadAuth: newPostReadLikeAuth,\r\n        },\r\n        imgUrlList: uploadImages,\r\n        pageHashtagList: newPostHashtag,\r\n      };\r\n      await postAxios(newPostUrl, sendBody, {}, refreshAccessToken);\r\n      alert(\"업로드 되었습니다.\");\r\n      setNewPostImages([]);\r\n      setNewPostHashtag([]);\r\n      setRenderedNewPostImages([]);\r\n      setNewPostContent(\"\");\r\n      setNewPostLikeNotice(true);\r\n      setNewPostCommentNotice(true);\r\n      setNewPostReadPostAuth(\"ALL\");\r\n      setNewPostCommentAuth(true);\r\n      setNewPostReadLikeAuth(true);\r\n      resetPage();\r\n      submitAbleAgain();\r\n    }\r\n  };\r\n  useEffect(() => {uploadNewPostHandlerThirdAct();}, [uploadImages]);\r\n  /*****************************************************************메인 페이지 기본 설정***********************************************************************************/\r\n  //오른쪽 책의 내용을 바꿔주는 state => newPost // chat // notice // friend // setting\r\n  const [rightBookState, setRightBookState] = useState(\"friend\");\r\n  //왼쪽 책의 내용을 바꿔주는 state => page(글) // pList // chat // newPost // setting // makeNewC // hastTagPage\r\n  const [leftBookState, setLeftBookState] = useState(\"page\");\r\n  //setting의 내용을 바꿔주는 state => initial(클릭 없음) // profile // Snotice // password // filtering // block\r\n  const [settingState, setSettingState] = useState(\"initial\");\r\n\r\n  const [pageId, setPageId] = useState(-1);//detail page를 위한 pageId state. -1인 경우, 비활성화 되고, 그 외의 값의 경우 해당 page를 불러오며, detailpage를 띄운다.\r\n\r\n  //초기에 진행하는 함수 초기값 설정은 여기서 진행한다.\r\n  useEffect(() => {\r\n    firstRender();\r\n    presetNoticeCount();\r\n  }, []);\r\n\r\n  //화면을 초기 상태로 만드는 함수\r\n  const resetPage = () => {\r\n    setRightBookState(\"friend\");\r\n    setLeftBookState(\"page\");\r\n    setSettingState(\"initial\");\r\n    setPageId(-1);\r\n  };\r\n\r\n  //채팅, 알림, 친구의 경우 이 함수를 사용해야 좌측이 달라진다.\r\n  const leftBookChangeHandler = (val) => {\r\n    setLeftBookState(val);\r\n  };\r\n\r\n  //setting 변경 함수\r\n  const SettingChangeHandler = (val) => {\r\n    setSettingState(val);\r\n  };\r\n\r\n  //친구 tag를 클릭 상태로 CSS변경 - 초기설정을 위해 필요\r\n  const firstRender = () => {\r\n    document.querySelector(\"#friend\").style.backgroundColor = \"rgb(145, 145, 145)\";\r\n  };\r\n\r\n  //우측 태그 클릭 hander\r\n  const tagClickHandler = (event) =>{\r\n    event.preventDefault();\r\n    const targetID = event.target.id;//누른 위치\r\n    if(targetID === rightBookState) return; //같은 태그를 여러번 누르는 경우 아무 변화도 주지 않는다.\r\n\r\n    if(targetID === \"setting\" || targetID === 'newPost'){\r\n      setRightBookState(targetID);\r\n      setLeftBookState(targetID);\r\n    }\r\n    else{\r\n      if(leftBookState === 'setting' || leftBookState === 'newPost') setLeftBookState(\"page\");\r\n      setRightBookState(targetID);\r\n    }\r\n\r\n    if(settingState !== 'initial'){//다른 태그 클릭 시 설정을 다시 원래대로 돌린다.\r\n      setSettingState('initial');\r\n    }\r\n  };\r\n\r\n  //태그 색상 변경\r\n  const tagColorChangeHandler = () => {\r\n    document.querySelector(\"#newPost\").style.backgroundColor = \"rgb(190, 190, 190)\";\r\n    document.querySelector(\"#chat\").style.backgroundColor = \"rgb(190, 190, 190)\";\r\n    document.querySelector(\"#notice\").style.backgroundColor = \"rgb(190, 190, 190)\";\r\n    document.querySelector(\"#friend\").style.backgroundColor = \"rgb(190, 190, 190)\";\r\n    document.querySelector(\"#setting\").style.backgroundColor = \"rgb(190, 190, 190)\";\r\n    document.querySelector(`#${rightBookState}`).style.backgroundColor = \"rgb(145, 145, 145)\";//원래 눌려있던 버튼 밝게 변경\r\n  };\r\n  useEffect(tagColorChangeHandler, [rightBookState]);\r\n\r\n  /***************************************************************뒤로가기, 앞으로 가기 등 처리함수************************************************************************/\r\n  const [goBack, setGoBack] = useState(false);//뒤로가기 이벤트로 이동한 경우, true로 세팅된다.\r\n  window.onpopstate = function(event) {//뒤로가기 이벤트를 캐치합니다.\r\n    if(event.state === null) return;\r\n    setRightBookState(event.state.rightBookState);\r\n    setLeftBookState(event.state.leftBookState);\r\n    setGoBack(true);\r\n  };\r\n\r\n  const pushStateHandler = () => {//state에 변경이 있을 때마다 state에 집어넣기\r\n    if(goBack){\r\n      setGoBack(false);\r\n      return;\r\n    }\r\n    window.history.pushState({\r\n      rightBookState: rightBookState,\r\n      leftBookState: leftBookState,\r\n    },null, '');\r\n  };\r\n  useEffect(pushStateHandler, [rightBookState, leftBookState]);\r\n\r\n  /***************************************************************************알림 관련*****************************************************************************/\r\n  const [noticeCount, setNoticeCount] = useState(-1);\r\n  const [chatCount, setChatCount] = useState(-1);\r\n\r\n  //처음 로그인 시 알림의 수를 받아오는 함수 - 초기 상태에서만 실행된다.\r\n  const presetNoticeCount = async () => {\r\n    if(noticeCount === -1){\r\n      const res = await getAxios(presetNoticeNumeber, {}, refreshAccessToken);\r\n      setNoticeCount(res.data.data.count);\r\n    }\r\n    if(chatCount === -1){\r\n      const res = await getAxios(presetChatNumber, {}, refreshAccessToken);\r\n      setChatCount(res.data.data.count);\r\n    }\r\n  };\r\n\r\n  //SSE이벤트 오픈 - notice와 chat의 초기값을 불러온 이후부터는 SSE로 그 값을 업데이트한다.\r\n  useEffect(() => {\r\n    if(noticeEventSource === null) return;\r\n    noticeEventSource.addEventListener(\"sse\", function (event) {\r\n      const data = JSON.parse(event.data);\r\n      if(data.notificationCount !== undefined){//명시되어있는 경우만 변경\r\n        setNoticeCount(data.notificationCount);\r\n      }\r\n      if(data.chatCount !== undefined){//명시되어있는 경우만 변경\r\n        setChatCount(data.chatCount);\r\n      }\r\n    });\r\n  }, [noticeCount]);\r\n\r\n  /**********************************************************************채팅 관련************************************************************************/\r\n  const [stompClient, setStompClient] = useState(null);//소켓 연결이 된 친구\r\n  const [chattingRoomId, setChattingRoomId] = useState(-1);//채팅방의 id\r\n\r\n  useEffect(() => {\r\n    if(!leftBookState.includes('chat')){//leftBookState가 변경되었는데 그 값에 chat이 없는 경우, stompClient를 disconnect하는 작업이 필요하다.\r\n      if(stompClient !== null){//이전에 할당받은 친구가 있었던 경우 disconnect하고 지금 생성한 Stomp를 넣어준다.\r\n        stompClient.unsubscribe(`/sub/${chattingRoomId}`);\r\n        stompClient.disconnect();\r\n      }\r\n    }\r\n  }, [leftBookState]);\r\n\r\n  const [chattingTrigerEventSource, setChattingTrigerEventSource] = useState(null);//채팅 관련된 SSE가 들어있는 곳\r\n  const [chattingTriger, setChattingTriger] = useState(false);//이 변수가 이제 오른쪽 채팅에 들어가서 이게 true면 \r\n  useEffect(() => {//상황을 인지해서 eventSource 이벤트 생성\r\n    if(chattingTrigerEventSource === null && rightBookState === \"chat\"){//초기 상황이거나, 내가 지금 chatting으로 들어온 경우\r\n      const eventSourcetmp = new EventSource(getChatTriger, { withCredentials: true });\r\n      eventSourcetmp.addEventListener(\"sse\", function (event) {\r\n        const data = JSON.parse(event.data);\r\n        setChattingTriger(true);\r\n      });\r\n      setChattingTrigerEventSource(eventSourcetmp);\r\n    }\r\n  }, [rightBookState]);\r\n\r\n  useEffect(() => {//다른 곳으로 이동하면 없애기\r\n    if(chattingTrigerEventSource !== null && rightBookState !== \"chat\"){//채팅방 부분을 벗어난 경우, 하지만 여전히 연결되어있는 경우\r\n      chattingTrigerEventSource.close();\r\n      setChattingTrigerEventSource(null);\r\n      return;\r\n    }\r\n  }, [rightBookState]);\r\n\r\n  /************************************************************다른 페이지들간의 트리거 변수****************************************************************************/\r\n  //좌측 채팅방에서 로드가 되지 않은 상태에서 우측에서 채팅방 클릭 시 에러발생 - 이를 막기 위한 연결 변수\r\n  //먼저, right의 chat에서 클릭 시, 이 값을 true로 만든다. 이후, leftchat에서 로드가 끝나면 이 값을 false로 만든다.\r\n  //동시에 right에서 chat을 클릭할 때, 이 값이 false인지 확인해야한다.\r\n  //채팅방에 연결되지 않은 상태에서 바뀌는 것을 막기 위함\r\n  const [chatLoading, setChatLoading] = useState(false);\r\n\r\n  //detailpage에서 좋아요 클릭 시 일반 pagelist에 반영하기 위해 trigger가 되는 값 - detailpage에서 좋아요를 누른 글의 id가 변수의 값이 된다.\r\n  //detailpage에서 변경 시 leftBookState가 page인지 확인하고 누르기\r\n  //단, page에 띄워져있는 리스트에 해당 글이 없는 경우도 존재할 수 있으니 고려해야한다.\r\n  const [detailPageLikeClick, setDetailPageLikeClick] = useState(-1);\r\n\r\n  //프로필 설정과 오른쪽의 friend와 chat의 연결\r\n  const [chatAndFriendReloadTriger, setChatAndFriendReloadTriger] = useState(false);\r\n\r\n  //개인 페이지(좌)와 friend페이지(우)의 연결\r\n  const [userPageAndFriendReloadTriger, setUserPageAndFriendReloadTriger] = useState(false);\r\n\r\n  return(\r\n    <div className={Style.pageCover}>\r\n      {/* 좌 상단 - 로고와 검색창 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.leftHeader}>\r\n          <Logo preset={resetPage}/>\r\n          <div />\r\n          <SearchBar setLeftBookState={setLeftBookState} refreshAccessToken={refreshAccessToken} />\r\n        </div>\r\n      </div>\r\n      {/* 우 상단 - 태그 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.tagArea}>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"newPost\">\r\n              <div className={Style.Cover}>\r\n                <img src={addTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"newPost\"/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"chat\">\r\n              <div className={Style.Cover}>\r\n                <img src={messageTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"chat\" />\r\n              </div>\r\n              <div className={Style.noticeArea}>\r\n                {chatCount === -1 || chatCount === 0 ? null : <NumberNotice number={chatCount} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"notice\">\r\n              <div className={Style.Cover}>\r\n                <img src={notificationTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"notice\" />\r\n              </div>\r\n              <div className={Style.noticeArea}>\r\n                {noticeCount === -1 || noticeCount === 0 ? null : <NumberNotice number={noticeCount} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"friend\">\r\n              <div className={Style.Cover}>\r\n                <img src={userTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"friend\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"setting\">\r\n              <div className={Style.Cover}>\r\n                <img src={settingTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"setting\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 좌측 페이지 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.bookCover}>\r\n          <div className={Style.leftbook}>\r\n            <div className={Style.Cover}>\r\n                {leftBookState === \"page\" ? <LeftPage refreshAccessToken={refreshAccessToken} leftBookState={leftBookState} setPageId={setPageId} detailPageLikeClick={detailPageLikeClick} setDetailPageLikeClick={setDetailPageLikeClick} setLeftBookState={setLeftBookState}/> : null}\r\n                {leftBookState.includes(\"pList\") ? <LeftPageList leftBookState={leftBookState} refreshAccessToken={refreshAccessToken} leftBookChangeHandler={leftBookChangeHandler} setPageId={setPageId} userId={userId} SettingChangeHandler={SettingChangeHandler} setUserPageAndFriendReloadTriger={setUserPageAndFriendReloadTriger}/> : null}\r\n                {leftBookState.includes(\"chat\") ? <LeftChat chattingRoomId={chattingRoomId} setChattingRoomId={setChattingRoomId} refreshAccessToken={refreshAccessToken} leftBookState={leftBookState} setLeftBookState={setLeftBookState} userId={userId} stompClient={stompClient} setStompClient={setStompClient} setChatLoading={setChatLoading} setChattingTriger={setChattingTriger}/> : null}\r\n                {leftBookState === \"makeNewC\" ? <LeftNewChat refreshAccessToken={refreshAccessToken} setLeftBookState={setLeftBookState} userId={userId} setChattingTriger={setChattingTriger} setChatLoading={setChatLoading}/> : null}\r\n                {leftBookState.includes(\"hashtagPage\") ? <LeftHashtagPage leftBookState={leftBookState} setPageId={setPageId} refreshAccessToken={refreshAccessToken}/> : null}\r\n                {leftBookState === \"newPost\" ? <LeftNewPost renderedNewPostImages={renderedNewPostImages} setRenderedNewPostImages={setRenderedNewPostImages} newPostImages={newPostImages} setNewPostImages={setNewPostImages} newPostHashtag={newPostHashtag} setNewPostHashtag={setNewPostHashtag} newPostContent={newPostContent} setNewPostContent={setNewPostContent} uploadNewPostHandler={uploadNewPostHandler} /> : null}\r\n                {leftBookState === \"setting\" ? <LeftSetting settingState={settingState} refreshAccessToken={refreshAccessToken} userId={userId} logout={logout} setChatAndFriendReloadTriger={setChatAndFriendReloadTriger} rightBookState={rightBookState}/> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 우측 페이지 */}\r\n      <div className={Style.Cover}>\r\n      <div className={Style.bookCover}>\r\n          <div className={Style.rightbook}>\r\n            <div className={Style.Cover}>\r\n              { rightBookState === \"newPost\" ? <RightNewPost newPostLikeNotice={newPostLikeNotice} setNewPostLikeNotice={setNewPostLikeNotice} newPostCommentNotice={newPostCommentNotice} setNewPostCommentNotice={setNewPostCommentNotice} newPostReadPostAuth={newPostReadPostAuth} setNewPostReadPostAuth={setNewPostReadPostAuth} newPostCommentAuth={newPostCommentAuth} setNewPostCommentAuth={setNewPostCommentAuth} newPostReadLikeAuth={newPostReadLikeAuth} setNewPostReadLikeAuth={setNewPostReadLikeAuth}/> :  null}\r\n              { rightBookState === \"chat\" ? <RightChat refreshAccessToken={refreshAccessToken} setLeftBookState={setLeftBookState} leftBookState={leftBookState} rightBookState={rightBookState} chattingTriger={chattingTriger} setChattingTriger={setChattingTriger} chatLoading={chatLoading} setChatLoading={setChatLoading} chatAndFriendReloadTriger={chatAndFriendReloadTriger} setChatAndFriendReloadTriger={setChatAndFriendReloadTriger}/> : null}\r\n              { rightBookState === \"notice\" ? <RightNotice leftBookChangeHandler={leftBookChangeHandler} refreshAccessToken={refreshAccessToken} setPageId={setPageId} noticeCount={noticeCount} setNoticeCount={setNoticeCount}/> : null}\r\n              { rightBookState === \"friend\" ? <RightFriend leftBookChangeHandler={leftBookChangeHandler} userId={userId} refreshAccessToken={refreshAccessToken} chatAndFriendReloadTriger={chatAndFriendReloadTriger} setChatAndFriendReloadTriger={setChatAndFriendReloadTriger} userPageAndFriendReloadTriger={userPageAndFriendReloadTriger} setUserPageAndFriendReloadTriger={setUserPageAndFriendReloadTriger}/> : null}\r\n              { rightBookState === \"setting\" ? <RightSetting settingState={settingState} SettingChangeHandler={SettingChangeHandler} logout={logout}/> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {pageId === -1 ? null : <DetailPage pageId={pageId} refreshAccessToken={refreshAccessToken} setPageId={setPageId} leftBookChangeHandler={leftBookChangeHandler} userId={userId} resetPage={resetPage} setDetailPageLikeClick={setDetailPageLikeClick} leftBookState={leftBookState}/>}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default Home;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\root\\LoginMain.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\numberNotice\\numberNotice.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\logo\\Logo.js",["316"],[],"import Style from \"./Logo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = ({preset}) =>{\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img src={logo} className={Style.logo} onClick={preset} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Logo;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\searchBar\\searchBar.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\detailPage.js",["317","318","319","320","321","322","323","324","325","326"],[],"//가운데에 띄우는 화면 총괄 - 계층상 1단계\r\n\r\nimport Style from './detailPage.module.css';\r\nimport heartImg from '../heart_outline.png';\r\nimport heartImgFill from '../heart_fill.png';\r\nimport leftArrow from '../caret_left.png';\r\nimport rightArrow from '../caret_right.png';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport {\r\n    LoadDetailPageUrl,\r\n    likeThisPageUrl,\r\n    checkILikedThisPageOrComment,\r\n    newCommentUrl,\r\n    ReportUrl,\r\n    deletePageUrl,\r\n    unlikeThisPageUrl,\r\n} from '../../../../apiUrl';\r\nimport { makeIntoArray } from '../../../../makeStringIntoArray';\r\nimport { getAxios, postAxios, deleteAxios } from '../../../../apiCall';\r\nimport { calculateTimeFrom } from '../../../../timeCalculation';\r\n\r\nimport ContentArea from '../contentArea/contentArea';\r\nimport RenderComment from './renderComment';\r\n\r\n//모든 페이지\r\n/* \r\n    댓글부르기 : pageId와 startId에 따른다 => groupId를 알게 된다\r\n    대댓글 부르기 : pageId와 startId와 groupId를 알게 된다.\r\n        - 각 댓글이 groupId를 가지며, 그 값은 commentList의 length와 같다.\r\n    즉, 순차적으로 처리해서 각각의 list가 생성된다.\r\n    댓글 부르기 트리거는 가장 하단의 댓글을 사용자가 확인했을 때이고,\r\n    대댓글 부르기는 댓글 부르기함수가 호출된 상황 자체이다 - 호출 시 groupId가 달라진다.\r\n*/\r\nconst DetailPage = ({pageId, refreshAccessToken, setPageId, leftBookChangeHandler, userId, resetPage, setDetailPageLikeClick, leftBookState}) => {//pageId가 -1이 되면 DetailPage가 사라진다.\r\n    const [pageUploadUserId, setPageUploadUserId] = useState(\"\");//page를 올린 사람의 id\r\n    const [postedImageList, setPostedImageList] = useState([]);//올린 이미지 list\r\n    const [postedPersonImage, setPostedPersonImage] = useState(\"\");//올린 사람의 이미지\r\n    const [postedPersonNickname, setPostedPersonNickname] = useState(\"\");//올린 사람의 닉네임\r\n    const [postedWordArray, setPostedWordArray] = useState([]);//올린 글을 실제로 보여주기 위해 처리한 문자열 배열\r\n    const [likeNumber, setLikeNumber] = useState(0); //좋아요 개수\r\n    const [postedTime, setPostedTime] = useState(\"\");//업로드 시간(n분전같은 글로 저장)\r\n    const [isLiked, setIsLiked] = useState(false);//해당 페이지를 좋아요했는지 저장\r\n    const [likeCountVisual, setLikeCountVisual] = useState(true);//글 작성자가 해당 페이지 좋아요 개수를 보여주도록 허용했는지 아닌지 알려주는 함수\r\n    const [imageIndex, setImageIndex] = useState(0);//보고있는 이미지의 index\r\n    const [commentToWhom, setCommentToWhom] = useState([\"p\", -1, \"\", pageId]);//[0]은 페이지에 댓글인지 댓글에 대댓글인지(c) 표시 // [1]은 대댓글인 경우 groupId를 의미 댓글이면 -1 // [2]는 대댓글인 경우 유저의 닉네임 댓글이면 \"\" // [3]은 대상(comment)의 Id\r\n    const [userCommentInput, setUserCommentInput] = useState(\"\");//유저가 작성하고있는 댓글\r\n    const [commentAble, setCommentAble] = useState(false);\r\n\r\n    const [commentList, setCommentList] = useState([]); //업로드된 댓글\r\n    const [commentStartId, setCommentStartId] = useState(0);//불러올 댓글의 index\r\n    const [isLastComment, setIsLastComment] = useState(false);//마지막 댓글이 불린 경우 true로 설정\r\n    const [lastComment, inView] = useInView();//마지막 댓글을 인식할 inView\r\n\r\n    const [COCAddedTriger, setCOCAddedTriger] = useState(-1);//대댓글을 쓴 경우, 이 값을 대댓글이 달린 댓글의 id로 설정한다.\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //초기 화면 로드 - 글 내용 + 초기 댓글\r\n    const presetDetailPage = async () => {\r\n        if(pageId === -1) return;\r\n        if(commentStartId !== 0) return;//초기에 댓글을 로드한 상황이 아니면 실행하지 않는다.\r\n\r\n        const res = await getAxios(`${LoadDetailPageUrl}${pageId}/detail`, {}, refreshAccessToken);\r\n        //기본적인 내용 초기 세팅 부분\r\n        setPostedImageList(res.data.data.imgUrlList);\r\n        setPageUploadUserId(res.data.data.pageDto.userDto.userId);\r\n        setPostedPersonImage(res.data.data.pageDto.userDto.imgUrl);\r\n        setPostedPersonNickname(res.data.data.pageDto.userDto.nickname);\r\n        setPostedWordArray(makeIntoArray(res.data.data.pageDto.content));\r\n        setLikeNumber(res.data.data.pageDto.likeCount);\r\n        setLikeCountVisual(res.data.data.pageDto.likeReadAuth);\r\n        setCommentAble(res.data.data.pageDto.commentAuth);\r\n        //댓글 초기 세팅 부분\r\n        const tmp = [...res.data.data.commentDtoList.data];\r\n        setCommentList(tmp);\r\n        setCommentStartId(res.data.data.commentDtoList.startId);\r\n        //시간 연산부분\r\n        setPostedTime(calculateTimeFrom(res.data.data.pageDto.createdDate));\r\n\r\n        const res2 = await getAxios(`${checkILikedThisPageOrComment}?targetId=${pageId}&type=PAGE`, {}, refreshAccessToken);\r\n        setIsLiked(res2.data.data.like);\r\n\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {presetDetailPage();}, [commentStartId]);\r\n\r\n    //댓글로드 함수 - 추가 댓글\r\n    const presetComment = async () => {\r\n        if(pageId === -1) return;\r\n        const res = await getAxios(`${LoadDetailPageUrl}${pageId}/comment?startId=${commentStartId}`, {}, refreshAccessToken);\r\n        const cur = [...commentList];//기존의 댓글 리스트\r\n        const tmp = [...res.data.data];//불러온 댓글들\r\n        if(tmp.length === 0){//불러온 리스트가 빈 배열인 경우 - 즉, 더 댓글이 없는 경우 : 이 경우 이후 과정이 필요 없으므로 그냥 return\r\n            setIsLastComment(true); //더 불러올 댓글이 없다고 세팅한다. - inView에 의해 과도하게 api호출을 막기 위함\r\n            return;\r\n        }\r\n        const next = cur.concat(tmp);//기존의 리스트에 불러온 댓글을 붙여넣는다\r\n        setCommentList(next); //댓글 리스트 업데이트\r\n        setCommentStartId(res.data.startId); // startId업데이트\r\n    };\r\n\r\n    //가장 하단의 댓글이 사용자에게 읽혔을 때, 댓글을 더 불러오기 위해 조건을 확인하는 함수\r\n    const loadMoreComment = () => {\r\n        if(!isLastComment && inView){//불러올 내용이 더 있는 경우\r\n            presetComment();\r\n        }\r\n    };\r\n    useEffect(loadMoreComment, [inView]);\r\n\r\n    /*********************외부**********************/\r\n    //외부 클릭 시 화면 닫기\r\n    const closePage = (event) => {\r\n        if(event.target.id === \"outSide\"){\r\n            setPageId(-1);\r\n        }\r\n    }\r\n\r\n    /*********************이미지 영역**********************/\r\n    const leftArrowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(imageIndex === 0) return;//넘어서지 않게 한다\r\n        else setImageIndex((cur) => cur - 1);\r\n    };\r\n\r\n    const rightArrowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(imageIndex === postedImageList.length - 1) return;//넘어서지 않게 한다\r\n        else setImageIndex((cur) => cur + 1);\r\n    };\r\n\r\n    const moveImageHandler = () => {\r\n        if(loading) return;\r\n        document.querySelector(\"#onlyImageArea\").style.transform = `translate(-${(imageIndex * 100) / postedImageList.length}%)`;\r\n    };\r\n    useEffect(moveImageHandler, [imageIndex]);\r\n\r\n    /********************글 영역 - 유저 클릭 관련*********************/\r\n    const pageUserClickHandler = () => {\r\n        setPageId(-1);//현재 페이지에서 나감\r\n        leftBookChangeHandler(`pList/${pageUploadUserId}`);//해당 유저의 페이지로 이동\r\n    };\r\n\r\n    /*********************글 영역 - 좋아요 관련**********************/\r\n    //글의 좋아요 클릭 handler\r\n    const pageLikeClickHandler = async () => {\r\n        let url = \"\"\r\n        isLiked ? url = unlikeThisPageUrl : url = likeThisPageUrl\r\n\r\n        const sendBody = {\r\n            targetId: pageId,\r\n            type: \"PAGE\"\r\n        };\r\n        await postAxios(url, sendBody, {}, refreshAccessToken);\r\n        isLiked ? setLikeNumber(cur => cur - 1) : setLikeNumber(cur => cur + 1) //임시로라도 반영\r\n        setIsLiked((cur) => !cur);\r\n\r\n        if(leftBookState.includes(\"page\")){//좌측 페이지가 page들이 있는 페이지 상태라면 좋아요를 triger줘야한다.\r\n            setDetailPageLikeClick(pageId);\r\n        }\r\n    };\r\n\r\n    /*********************글 영역 - 댓글 관련**********************/\r\n    //댓글 작성 대상 글로 변경함수\r\n    const changeCommentToPage = (event) => {\r\n        event.preventDefault();\r\n        setCommentToWhom([\"p\", -1, \"\"]);\r\n    };\r\n\r\n    //댓글 작성 대상 변경시, placeholder변경 함수\r\n    const changePlaceholder = () => {\r\n        if(loading) return;\r\n        setUserCommentInput(\"\");\r\n        if(commentToWhom[0] === 'p'){//댓글을 작성\r\n            document.querySelector(\"#userCommentArea\").placeholder = \"댓글을 입력하세요...\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#userCommentArea\").placeholder = `${commentToWhom[2]}님에게 댓글을 남깁니다...(다시 댓글을 작성하려면 글을 클릭하세요.)`\r\n        }\r\n    };\r\n    useEffect(changePlaceholder, [commentToWhom]);\r\n\r\n    //댓글 입력 시 변경 함수\r\n    const userCommentInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserCommentInput(event.target.value);\r\n    };\r\n\r\n    //댓글 제출 함수\r\n    const [commentSubmitClicked, setCommentSubmitClicked] = useState(false);\r\n\r\n    const submitAbleAgain = () => {\r\n        setCommentSubmitClicked(false);\r\n        const btn = document.querySelector('#CommentSubmitBtn');\r\n        btn.innerHTML = '게시';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const userCommentSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(commentSubmitClicked) return;//이미 제출중이면 종료\r\n\r\n        if(userCommentInput === \"\"){\r\n            alert(\"1자 이상의 댓글을 입력해 주세요.\");\r\n            return;\r\n        }\r\n\r\n        setCommentSubmitClicked(true);\r\n        const btn = document.querySelector('#CommentSubmitBtn');\r\n        btn.innerHTML = \"제출중\";\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const userCommitSubmitHandlerSecondAction = async () => {\r\n        if(!commentSubmitClicked) return;\r\n\r\n        //정보를 바탕으로 댓글 작성\r\n        const sendBody = {\r\n            pageId: Number(pageId),\r\n            content: userCommentInput,\r\n            group: commentToWhom[0] === \"p\" ? 0 : commentToWhom[1],\r\n            nested: !(commentToWhom[0] === \"p\"),\r\n            visible: true,\r\n        };\r\n        await postAxios(`${newCommentUrl}${pageId}/comment`, sendBody, {}, refreshAccessToken);\r\n        console.log(\"댓글 작성완료\");\r\n        setUserCommentInput(\"\");//댓글 부분 초기화\r\n        setCommentToWhom([\"p\", -1, \"\", pageId]);//댓글 대상 초기화\r\n        presetComment();//댓글 내가 쓴거까지 로드된내용 불러오기\r\n        setIsLastComment(false);//원활하게 다시 호출 되도록 세팅\r\n        submitAbleAgain();\r\n        if(commentToWhom[0] !== \"p\"){//즉, 대댓글 입력의 경우\r\n            setCOCAddedTriger(commentToWhom[3]);\r\n        }\r\n    }\r\n    useEffect(() => {userCommitSubmitHandlerSecondAction();}, [commentSubmitClicked]);\r\n\r\n    /*****************글 영역 - 신고*********************/\r\n    const pageReportClickHandler = async() => {\r\n        if(window.confirm(\"정말 신고하시겠습니까?\")){\r\n            const sendBody = {\r\n                targetId: pageId,\r\n                type: \"PAGE\",\r\n            };\r\n            await postAxios(ReportUrl, sendBody, {}, refreshAccessToken);\r\n            alert(\"게시글을 신고했습니다.\");\r\n        }\r\n    };\r\n\r\n    /******************글 영역- 삭제*********************/\r\n    const pageDeleteClickHandler = async () => {\r\n        if(window.confirm(\"정말 삭제하시겠습니까?\")){\r\n            await deleteAxios(`${deletePageUrl}${pageId}`, {}, refreshAccessToken);\r\n            alert(\"글을 삭제했습니다.\");\r\n            setPageId(-1);\r\n            resetPage();\r\n        }\r\n    };\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover} onClick={closePage} id=\"outSide\">\r\n            <div className={Style.ImageAndScriptCover}>\r\n                <div className={Style.imageArea}>\r\n                    {/* 이미지공간 */}\r\n                    <div style={{overflow:\"hidden\"}}>\r\n                        <div id=\"onlyImageArea\" style={{width:`${100 * postedImageList.length}%`, height: \"100%\", transition: \"transform 0.5s\"}}>\r\n                            {\r\n                                postedImageList.map((data, index) =>\r\n                                    <div style={{height: \"100%\", width: `${100 / postedImageList.length}%`, float: \"left\"}} key={index}>\r\n                                        <img src={data} style={{width: \"100%\", height: \"100%\", objectFit: \"contain\"}}/>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    {/* 버튼공간 */}\r\n                    {\r\n                        postedImageList.length === 1 ? null :\r\n                        <div className={Style.cover}>\r\n                            <img src={leftArrow} className={Style.arrowButton} onClick={leftArrowClickHandler}/>\r\n                            <img src={rightArrow} className={Style.arrowButton} onClick={rightArrowClickHandler}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className={Style.ScriptArea}>\r\n                    {/* 글 영역 */}\r\n                    <div className={Style.pageScriptArea}>\r\n                        <div className={Style.postPersonProfileArea}>\r\n                            <img src={postedPersonImage} className={Style.UserImage} onClick={pageUserClickHandler}/>\r\n                            <p className={Style.UserNickname} onClick={pageUserClickHandler}>{postedPersonNickname}</p>\r\n                        </div>\r\n                        <div className={Style.contentArea} onClick={changeCommentToPage}>\r\n                            {\r\n                                postedWordArray.map((d, index) => (\r\n                                    <ContentArea data={d} key={index} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        <div className={Style.likeTimeArea}>\r\n                            <div className={Style.cover}>\r\n                                <img src={isLiked ? heartImgFill : heartImg} className={Style.buttonImg} onClick={pageLikeClickHandler} />\r\n                                <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>{likeCountVisual ? `좋아요 ${likeNumber} 개` : `좋아요 여러 개`}</p>\r\n                                <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>|</p>\r\n                                {\r\n                                    pageUploadUserId === userId ?\r\n                                    /* 내 글인 경우 글 삭제 기능이 있음 */\r\n                                    <p className={Style.likeandCommentCount} onClick={pageDeleteClickHandler}>게시글 삭제</p>\r\n                                    :\r\n                                    /* 타인의 글인 경우 글 신고 기능이 있음 */\r\n                                    <p className={Style.likeandCommentCount} onClick={pageReportClickHandler}>글 신고</p>\r\n                                }\r\n                            </div>\r\n                            <p className={Style.time}>{postedTime}</p>\r\n                        </div>\r\n                    </div>\r\n                    {/* 댓글 영역 */}\r\n                    <div className={Style.CommentArea}>\r\n                        {\r\n                            commentList.map((data, index) => (\r\n                                index === commentList.length - 1 ?\r\n                                <RenderComment \r\n                                    data={data}\r\n                                    key={index}\r\n                                    pageId={pageId}\r\n                                    setPageId={setPageId}\r\n                                    lastComment={lastComment}\r\n                                    setCommentToWhom={setCommentToWhom}\r\n                                    refreshAccessToken={refreshAccessToken}\r\n                                    userId={userId}\r\n                                    presetDetailPage={presetDetailPage}\r\n                                    setCommentStartId={setCommentStartId}\r\n                                    setIsLastComment={setIsLastComment}\r\n                                    setCommentList={setCommentList}\r\n                                    leftBookChangeHandler={leftBookChangeHandler}\r\n                                    COCAddedTriger={COCAddedTriger}\r\n                                    setCOCAddedTriger={setCOCAddedTriger}\r\n                                />\r\n                                :\r\n                                <RenderComment \r\n                                    data={data}\r\n                                    key={index}\r\n                                    pageId={pageId}\r\n                                    setPageId={setPageId}\r\n                                    lastComment={null}\r\n                                    setCommentToWhom={setCommentToWhom}\r\n                                    refreshAccessToken={refreshAccessToken}\r\n                                    userId={userId}\r\n                                    presetDetailPage={presetDetailPage}\r\n                                    setCommentStartId={setCommentStartId}\r\n                                    setIsLastComment={setIsLastComment}\r\n                                    setCommentList={setCommentList}\r\n                                    leftBookChangeHandler={leftBookChangeHandler}\r\n                                    COCAddedTriger={COCAddedTriger}\r\n                                    setCOCAddedTriger={setCOCAddedTriger}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {/* 댓글 입력 영역 */}\r\n                    <form className={Style.userCommentArea} onSubmit={userCommentSubmitHandler}>\r\n                        <div className={Style.cover}>\r\n                            {\r\n                                commentAble ?\r\n                                <textarea \r\n                                    id=\"userCommentArea\"\r\n                                    type=\"text\"\r\n                                    className={Style.userComment}\r\n                                    maxLength={200}\r\n                                    placeholder=\"댓글을 입력하세요...\"\r\n                                    value={userCommentInput}\r\n                                    onChange={userCommentInputChangeHandler}\r\n                                />\r\n                                :\r\n                                <textarea \r\n                                    id=\"userCommentArea\"\r\n                                    type=\"text\"\r\n                                    className={Style.userComment}\r\n                                    maxLength={200}\r\n                                    placeholder=\"댓글을 입력하세요...\"\r\n                                    value={userCommentInput}\r\n                                    onChange={userCommentInputChangeHandler}\r\n                                    disabled\r\n                                />\r\n                            }\r\n                        </div>\r\n                        <div className={Style.cover}>\r\n                            <button id=\"CommentSubmitBtn\" type=\"submit\" className={Style.commentSubmitBtn}>게시</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DetailPage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\page.js",["327","328"],[],"//피드 여러개 띄우는 화면\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport Style from './page.module.css';\r\nimport {\r\n    pageloadUrl,\r\n} from \"../../../../apiUrl\";\r\nimport SinglePage from './singlePage';\r\nimport { getAxios } from \"../../../../apiCall\";\r\n\r\nconst LeftPage = ({refreshAccessToken, leftBookState, setPageId, detailPageLikeClick, setDetailPageLikeClick, setLeftBookState}) => {\r\n    const [pageStartId, setPageStartId] = useState(987654321);//글 리스트의 startId\r\n    const [pageList, setPageList] = useState([]); //글 리스트\r\n    const [lastPage, inView] = useInView(); //이게 ref된 요소가 화면에 보이면 inView가 true로 변경\r\n    const [isLoadFinish, setIsLoadFinish] = useState(false);//false면 더 이상 로드할 내용이 남은 경우, true면 로드할 내용이 더 없는 경우이다.\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //게시글 로드 함수\r\n    const loadPageListFunc = async ()=> {\r\n        const res = await getAxios(`${pageloadUrl}?startId=${pageStartId}`, {}, refreshAccessToken);\r\n        const cur = [...pageList];\r\n        const tmp = [...res.data.data];\r\n        if(tmp.length === 0){\r\n            setIsLoadFinish(true);//더 이상 글이 없는 경우이다.\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        const next = cur.concat(tmp);\r\n        setPageList(next);\r\n        setPageStartId(res.data.startId);\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {loadPageListFunc();}, [leftBookState]);//state가 바뀌면 다시 load\r\n\r\n    //화면의 마지막이 읽히면 조건을 확인해서 글을 로드하는 함수\r\n    const loadMorePageFunc = () => {\r\n        if(!isLoadFinish && inView){\r\n            loadPageListFunc();\r\n        }\r\n    };\r\n    useEffect(loadMorePageFunc, [inView]);\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.pageListArea}>\r\n                {\r\n                    pageList.length === 0 ?\r\n                    <p className={Style.noPageText}>글이 존재하지 않습니다.. 너무도 조용합니다..</p>\r\n                    :\r\n                    pageList.map((data, index) => (\r\n                        index === (pageList.length - 1) ?\r\n                        <SinglePage\r\n                            data={data}\r\n                            key={index}\r\n                            index={index} \r\n                            lastPage={lastPage}\r\n                            setPageId={setPageId}\r\n                            setLeftBookState={setLeftBookState}\r\n                            refreshAccessToken={refreshAccessToken}\r\n                            detailPageLikeClick={detailPageLikeClick}\r\n                            setDetailPageLikeClick={setDetailPageLikeClick}\r\n                        />\r\n                        :\r\n                        <SinglePage \r\n                            data={data}\r\n                            key={index}\r\n                            index={index} \r\n                            lastPage={null}\r\n                            setPageId={setPageId}\r\n                            setLeftBookState={setLeftBookState}\r\n                            refreshAccessToken={refreshAccessToken}\r\n                            detailPageLikeClick={detailPageLikeClick}\r\n                            setDetailPageLikeClick={setDetailPageLikeClick}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\hashtagPage\\hashtagPage.js",["329","330","331"],[],"import Style from './hashtagPage.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport{\r\n  pageLoadHashtagUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios } from \"../../../../apiCall\";\r\n\r\nconst LeftHashtagPage = ({leftBookState, setPageId, refreshAccessToken}) => {\r\n  const [hashTag, setHashTag] = useState(\"\");//받아온 해시태그\r\n  const [hashTagPageList, setHashTagPageList] = useState([]);//글 리스트\r\n  const [hashTagPageStartId, setHashTagPageStartId] = useState(987654321);//글 리스트의 startId\r\n  const [isFinished, setIsFinished] = useState(false);//페이지 로딩이 끝난 경우 더 이상 불리지 않게 세팅한다.\r\n  const [lastHashtagPage, InView] = useInView();//마지막 페이지에 세팅한다.\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  /***************************초기 세팅 함수********************************/\r\n  //처음에 해시태그 받는 함수\r\n  const hashTagpreset = () => {\r\n    setHashTag(leftBookState.split('/')[1]);\r\n    setHashTagPageList([]);\r\n    setHashTagPageStartId(987654321);//초기상태로 전환\r\n    setIsFinished(false);//초기 상태로 전환\r\n  };\r\n  useEffect(hashTagpreset, [leftBookState]);//state변경 시 실행\r\n\r\n  //해시태그로 검색한 게시글을 불러오는 함수\r\n  const loadHashtagPage = async () => {\r\n    if(hashTag === \"\") return; //빈 문자열인 경우 종료\r\n\r\n    const res = await getAxios(`${pageLoadHashtagUrl}${hashTag}&startId=${hashTagPageStartId}`, {}, refreshAccessToken);\r\n    const tmp = [...res.data.data];\r\n    if(tmp.length === 0){\r\n      setIsFinished(true);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    const cur = [...hashTagPageList];\r\n    const next = cur.concat(tmp);\r\n    setHashTagPageList(next);\r\n    setHashTagPageStartId(res.data.startId);\r\n    setLoading(false);\r\n  };\r\n  useEffect(() => {loadHashtagPage();}, [hashTag]);//해시태그 변경 시 실행한다.\r\n\r\n  //마지막 요소가 보이면 로드한다.\r\n  const lastPageSeen = () => {\r\n    if(InView && !isFinished){\r\n      loadHashtagPage();\r\n    }\r\n  };\r\n  useEffect(lastPageSeen, [InView]);\r\n\r\n  /******************************이후 관리 함수*********************************/\r\n  const hastTagPageClickHandler = (event) => {\r\n    setPageId(event.target.id);\r\n  };\r\n\r\n  return(\r\n    loading ? null :\r\n    <div className={Style.wholeCover}>\r\n      <p className={Style.AnswerText}>{`검색하신 \"#${hashTag}\"에 대한 게시물입니다.`}</p>\r\n      {\r\n        hashTagPageList.map((data, index) => (\r\n          <img \r\n            key={index}\r\n            src={data.imgUrl}\r\n            id={data.pageId}\r\n            onClick={hastTagPageClickHandler}\r\n            className={Style.singlePage}\r\n            ref={index === hashTagPageList.length - 1 ? lastHashtagPage : null}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftHashtagPage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js",["332","333","334","335","336","337"],[],"//유저 프로필 화면\r\nimport Style from './pageList.module.css';\r\nimport followBefImg from './user_plus.png';\r\nimport followAftImg from './user_check.png';\r\nimport moreStuff from '../../root/moreStuff.png';\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport {\r\n    getUserNicknameAndImageUrl,\r\n    ReportUrl,\r\n    BlockUserURl,\r\n    followUserUrl,\r\n    unfollowUserUrl,\r\n    getfollowerListUrl,\r\n    getFolloweeListUrl,\r\n    getUserPageListUrl\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from '../../../../apiCall';\r\n\r\nimport SinglePage from './singlePage';\r\nimport SingleUser from './singleUser';\r\n\r\nconst LeftPageList = ({leftBookState, refreshAccessToken, leftBookChangeHandler, setPageId, userId, SettingChangeHandler, setUserPageAndFriendReloadTriger}) => {//일단 leftBookState를 확인해야한다. pageList/{userId}로 되어있음 userId의 유저 게시글과 이미지, 이름을 불러와서 로딩한다.\r\n    const [userImage, setUserImage] = useState(\"\");//해당 프로필의 유저 이미지\r\n    const [userNickname, setUserNickname] = useState(\"\");//해당 프로필의 유저 닉네임\r\n    const [userIntroduce, setUserIntroduce] = useState(\"\");//해당 프로필의 유저 자기소개\r\n    const [followerCount, setFollowerCount] = useState(0);//팔로워 숫자\r\n    const [followeeCount, setFolloweeCount] = useState(0);//팔로잉 숫자\r\n    const [isFollowed, setIsFollowed] = useState(false);//해당 유저를 내가 이미 팔로우 중인지 확인\r\n    const [isMyPage, setIsMyPage] = useState(false);\r\n    const [bottomStuff, setBottomStuff] = useState(\"PAGE\");//PAGE, FOLLOWEE, FOLLOWER가 가능한 값이다. 이 값에 따라 하단 내용이 달라진다.\r\n    const [userDropBoxToggle, setUserDropBoxToggle] = useState(false);//...누르면 뜨는거 활성화 toggle\r\n    const [loadedUserId, setLoadedUserId] = useState(\"\");\r\n\r\n    const [followerList, setFollowerList] = useState([]);//팔로워 리스트\r\n    const [followeeList, setFolloweeList] = useState([]);//팔로잉 리스트\r\n\r\n    const [userPageList, setUserPageList] = useState([]);//유저의 pageList\r\n    const [pageStartId, setPageStartId] = useState(987654321);//불러온 페이지의 startId\r\n    const [lastPageInUserPage, inView] = useInView();//pageList의 마지막요소에 넣는다.\r\n    const [lastPage, setLastPage] = useState(false);//마지막 페이지가 로드되었는지 확인한다.\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    /**************************초기 설정******************************/\r\n    const loadLoadedUserId = () => {//지금 어떤 페이지로 들어왔는지 확인한다.\r\n        //먼저 나의 id와 지금 들어온 id가 동일하면, isMyPage를 true로 바꿔주고 작업한다.\r\n        setLoadedUserId(Number(leftBookState.split('/')[1]));\r\n        if(userId === Number(leftBookState.split('/')[1])){//자기 자신의 페이지를 불러온 경우\r\n            setIsMyPage(true);\r\n        }\r\n        else{\r\n            setIsMyPage(false);\r\n        }\r\n\r\n        //초기화 부분\r\n        setBottomStuff(\"PAGE\");\r\n        setFollowerList([]);\r\n        setFolloweeList([]);\r\n        setUserPageList([]);\r\n        setPageStartId(987654321);\r\n        setUserDropBoxToggle(false);\r\n    };\r\n    useEffect(loadLoadedUserId, [leftBookState]);\r\n\r\n    const presetUserPageList = async () => {\r\n        if(loadedUserId === \"\") return;//초기 상황인 경우 즉시 종료한다.\r\n\r\n        const res = await getAxios(`${getUserNicknameAndImageUrl}${loadedUserId}/profile`);//상단 프로필 불러오기\r\n        setUserImage(res.data.data.imgUrl);\r\n        setUserNickname(res.data.data.nickname);\r\n        setUserIntroduce(res.data.data.selfIntroduction);\r\n        setFollowerCount(res.data.data.followerCount);\r\n        setFolloweeCount(res.data.data.followeeCount);\r\n        setIsFollowed(res.data.data.follow);\r\n\r\n        if(isMyPage){\r\n            const res2 = await getAxios(getfollowerListUrl, {}, refreshAccessToken);//팔로워 불러오기\r\n            setFollowerList(res2.data.data);\r\n\r\n            const res3 = await getAxios(getFolloweeListUrl, {}, refreshAccessToken);//팔로워 불러오기\r\n            setFolloweeList(res3.data.data);\r\n        }\r\n\r\n        await getUserPageList();//pageList초기 설정\r\n\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {presetUserPageList();}, [loadedUserId]);\r\n\r\n    //사용자가 올린 페이지를 불러오는 함수\r\n    const getUserPageList = async () => {\r\n        const res = await getAxios(`${getUserPageListUrl}${loadedUserId}?startId=${pageStartId}`, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data];\r\n        if(tmp.length === 0){\r\n            setLastPage(true);\r\n        }\r\n        const currentList = [...userPageList];\r\n        const next = currentList.concat(tmp);\r\n        setUserPageList(next);\r\n        setPageStartId(res.data.startId);\r\n    };\r\n  \r\n    //사용자가 올린 페이지를 무한 로드하는 함수\r\n    useEffect(() => {\r\n        if(inView && !lastPage){\r\n            getUserPageList();\r\n        }\r\n    }, [inView]);\r\n\r\n    /**************************관리 부분*****************************/\r\n    //게시물 클릭 시 handler\r\n    const pageClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setBottomStuff(\"PAGE\");\r\n    };\r\n\r\n    //팔로워 클릭 시 handler\r\n    const followerClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(isMyPage){\r\n            setBottomStuff(\"FOLLOWER\");\r\n        }\r\n    };\r\n\r\n    const followeeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(isMyPage){\r\n            setBottomStuff(\"FOLLOWEE\");\r\n        }\r\n    };\r\n\r\n    //...누르는 함수\r\n    const userDropBoxToggleClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserDropBoxToggle((cur) => !cur);\r\n    };\r\n\r\n    //유저 팔로우/팔로우 취소 함수\r\n    const followClickHandler = async () => {\r\n        let url = \"\";\r\n        isFollowed ? url = unfollowUserUrl : url = followUserUrl\r\n\r\n        const sendBody = {\r\n            userId: loadedUserId\r\n        };\r\n        await postAxios(url, sendBody, {}, refreshAccessToken);\r\n        setIsFollowed((cur) => !cur);\r\n        setUserPageAndFriendReloadTriger(true);\r\n    };\r\n\r\n    //유저 신고함수\r\n    const userReportClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const sendBody = {\r\n            targetId: loadedUserId,\r\n            type: \"USER\",\r\n        };\r\n        await postAxios(ReportUrl, sendBody, {}, refreshAccessToken);\r\n        alert(\"해당 유저를 신고했습니다.\");\r\n    };\r\n\r\n    //유저 차단함수\r\n    const userBlockClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const sendBody = {\r\n            userId: loadedUserId,\r\n        };\r\n        await postAxios(BlockUserURl, sendBody, {}, refreshAccessToken);\r\n        alert(\"해당 유저를 차단했습니다.\");\r\n    };\r\n\r\n    //내 페이지에서 클릭 시 프로필 세팅 페이지로 이동\r\n    const myProfileSettingClickHandler = () => {\r\n        SettingChangeHandler(\"profile\");\r\n        leftBookChangeHandler(\"setting\");\r\n    }\r\n    \r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.profileCover}>\r\n                <div className={Style.profileElementCover}>\r\n                    <img src={userImage} className={Style.profileImg} />\r\n                </div>\r\n                <div className={Style.profileElementCover}>\r\n                    <p className={Style.profileName}>{userNickname}</p>\r\n                </div>\r\n                <div className={Style.profileElementCover}>\r\n                    { isMyPage ? /* 타인만 필요 */\r\n                        null \r\n                        : \r\n                        <img \r\n                            src={isFollowed ? followAftImg : followBefImg}\r\n                            onClick={followClickHandler}\r\n                            style={{marginRight: \"30px\", cursor: \"pointer\"}}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className={Style.profileElementCover}>\r\n                    <div className={Style.dropBoxCover}>\r\n                        <img src={moreStuff} className={Style.dropBoxBtn} onClick={userDropBoxToggleClickHandler}/>\r\n                        {\r\n                            userDropBoxToggle ?\r\n                            isMyPage ?\r\n                                <div className={Style.userDropBox} style={{width: \"202px\"}}>\r\n                                    <div \r\n                                        className={Style.settingBlock}\r\n                                        style={{\r\n                                            borderRight: \"1px solid rgb(190, 190, 190)\",\r\n                                            borderRadius: \"0.5rem 0 0 0.5rem\",\r\n                                            width: \"50%\"\r\n                                        }}\r\n                                        onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                        onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                        onClick={myProfileSettingClickHandler}>\r\n                                        프로필 설정\r\n                                    </div>\r\n                                    <div \r\n                                        className={Style.settingBlock}\r\n                                        style={{\r\n                                            borderRadius: \"0 0.5rem 0.5rem 0\",\r\n                                            width: \"50%\"\r\n                                        }}\r\n                                        onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                        onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                        onClick={() => setUserDropBoxToggle((cur) => !cur)}>\r\n                                        닫기\r\n                                    </div>\r\n                                </div>\r\n                            :\r\n                                <div className={Style.userDropBox} style={{width: \"302px\"}}>\r\n                                    <div \r\n                                        className={Style.settingBlock}\r\n                                        style={{\r\n                                            borderRight: \"1px solid rgb(190, 190, 190)\",\r\n                                            borderRadius: \"0.5rem 0 0 0.5rem\",\r\n                                            width: \"33%\"\r\n                                        }}\r\n                                        onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                        onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                        onClick={userReportClickHandler}>\r\n                                        신고\r\n                                    </div>\r\n                                    <div \r\n                                        className={Style.settingBlock}\r\n                                        style={{\r\n                                            borderRight: \"1px solid rgb(190, 190, 190)\",\r\n                                            width: \"33%\"\r\n                                        }}\r\n                                        onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                        onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                        onClick={userBlockClickHandler}>\r\n                                        차단\r\n                                    </div>\r\n                                    <div \r\n                                        className={Style.settingBlock}\r\n                                        style={{\r\n                                            borderRadius: \"0 0.5rem 0.5rem 0\",\r\n                                            width: \"33%\"\r\n                                        }}\r\n                                        onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                        onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                        onClick={() => setUserDropBoxToggle((cur) => !cur)}>\r\n                                        닫기\r\n                                    </div>\r\n                                </div>\r\n                            :\r\n                            null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 게시물, 팔로워, 팔로우 하는 사람을 볼 수 있는 곳으로, 내 페이지인 경우만 팔로워, 팔로우 하는 사람을 볼 수 있다. */}\r\n            <div className={Style.pageFollowerFolloweeCover}>\r\n                <p onClick={pageClickHandler} style={{cursor:\"pointer\"}}>게시물</p>\r\n                <p onClick={followerClickHandler} style={isMyPage ? {cursor:\"pointer\"} : null}>{`팔로워 ${followerCount}`}</p>\r\n                <p onClick={followeeClickHandler} style={isMyPage ? {cursor:\"pointer\"} : null}>{`팔로우 ${followeeCount}`}</p>\r\n            </div>\r\n            <p style={{height:\"fit-content\"}}>{userIntroduce}</p>\r\n            <div className={Style.pageArea}>\r\n                {\r\n                    bottomStuff === \"PAGE\" ? \r\n                    userPageList.map((data, index) => (\r\n                        index === userPageList.length - 1 ?\r\n                        <SinglePage data={data} setPageId={setPageId} key={index} lastPageInUserPage={lastPageInUserPage}/>\r\n                        :\r\n                        <SinglePage data={data} setPageId={setPageId} key={index} lastPageInUserPage={null}/>\r\n                    ))\r\n                    : null\r\n                }\r\n                {\r\n                    (bottomStuff === \"FOLLOWER\") ?\r\n                    followerList.map((data, index) => (\r\n                        <SingleUser data={data} leftBookChangeHandler={leftBookChangeHandler} key={index}/>\r\n                    ))\r\n                    : null\r\n                }\r\n                {\r\n                    (bottomStuff === \"FOLLOWEE\") ? \r\n                    followeeList.map((data, index) => (\r\n                        <SingleUser data={data} leftBookChangeHandler={leftBookChangeHandler} key={index}/>\r\n                    ))\r\n                    : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPageList;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js",["338","339","340","341","342","343","344","345"],[],"import Style from './chat.module.css';\r\nimport editImg from './edit.png';\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport {\r\n    getChattingListUrl,\r\n    getChattingRoomStuffUrl,\r\n    changeChattingRoomNameUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from \"../../../../apiCall\";\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stomp-websocket';\r\n\r\nimport SingleChat from './singleChat';\r\n\r\nconst LeftChat = ({chattingRoomId, setChattingRoomId, refreshAccessToken, leftBookState, setLeftBookState, userId, stompClient, setStompClient, setChatLoading, setChattingTriger}) => {\r\n    const [chattingRoomName, setChattingRoomName] = useState(\"\");//채팅방 이름\r\n    const [chattingList, setChattingList] = useState([]);//채팅방의 채팅들\r\n    const [chattingListStartId, setChattingListStartId] = useState(987654321);//채팅방의 채팅을 불러오는 startId\r\n    const [oldestChat, inView] = useInView();//가장 오래된(가장 위의) 채팅에게 값을 넣으면 inView값 변경\r\n    const [userChatInput, setUserChatInput] = useState(\"\");//사용자의 채팅 내용\r\n    const [noMoreChat, setNoMoreChat] = useState(false);//더이상 불러올 과거의 채팅이 없는 경우 true로 정한다.\r\n\r\n    const [userAndUserImg, setUserAndUserImg] = useState({});//해당 채팅방의 유저 id와 그 유저의 프로필의 value를 넣어둔다. key=id, value=imgUrl\r\n    const [userAndUserNickname, setUserAndUserNickname] = useState({});//해당 채팅방의 유저 id와 그 유저의 닉네임의 value를 넣어둔다. key=id, value=닉네임\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //사용자 채팅 입력 처리\r\n    const onUserChattingChangeHandler = (event) => {\r\n        setUserChatInput(event.target.value);\r\n    };\r\n\r\n    //채팅방 이름 변경 처리\r\n    const onChattingRoomNameChangeHandler = (event) => {\r\n        setChattingRoomName(event.target.value)\r\n    }\r\n\r\n    //엔터 입력 시 event를 없애고 submitHandler를 실행한다.\r\n    const onUserChattingEnterClickHandler = (event) => {\r\n        if(event.keyCode === 13){//엔터 입력 시\r\n            event.preventDefault();\r\n            userChattingSubmitHandler(null);\r\n        }\r\n    }\r\n\r\n    //소켓 설정해주는 함수\r\n    const socketConnect = () => {\r\n        const socket = new SockJS(\"https://api.cleanbook.site/ws\");\r\n        const tmp = Stomp.over(socket);\r\n        setStompClient(tmp);\r\n    };\r\n\r\n    //소켓에 의해 채팅이 들어오면 newChatting에 값을 세팅해준다.\r\n    const [newChatting, setNewChatting] = useState(\"\");//새로 로드된 채팅 - 소캣에서 인식된 하나의 채팅이다.\r\n    useEffect(() => {\r\n        if(stompClient === null) return; //초기 상황에는 그냥 종료\r\n        stompClient.connect({}, function (frame) {\r\n            stompClient.subscribe(`/sub/${chattingRoomId}`, function (chatMessage) {//구독\r\n                const tmpchat = JSON.parse(chatMessage.body);\r\n                setNewChatting(tmpchat);\r\n            });\r\n        });\r\n    }, [stompClient]);\r\n\r\n    //새로 불린 내용이 있으면 chattingList에 넣기\r\n    useEffect(() => {\r\n        if(newChatting === \"\") return;\r\n\r\n        const tmp = [...chattingList];\r\n        tmp.push(newChatting);\r\n        setChattingList(tmp);\r\n        setNeedScroll(true);\r\n        setNewChatting(\"\");\r\n    }, [newChatting]);\r\n\r\n    //초기함수 1번 - id를 가져오고 초기화를 하는함수\r\n    const [secondFuncTriger, setSecondFuncTriger] = useState(false)\r\n    const presetChattingRoomId = () => {\r\n        if(stompClient !== null){//이전에 할당받은 친구가 있었던 경우(당연히 채팅방 id도 있다.) disconnect하고 지금 생성한 Stomp를 넣어준다.\r\n            stompClient.unsubscribe(`/sub/${chattingRoomId}`);\r\n            stompClient.disconnect();\r\n        }\r\n        setChattingRoomId(leftBookState.split('/')[1]);\r\n        setChattingListStartId(987654321);//초기화 필요\r\n        setUserAndUserImg({});//초기화 필요\r\n        setUserAndUserNickname({});//초기화 필요\r\n        setChattingList([]);//초기화 필요\r\n        setNoMoreChat(false);\r\n        setLoading(true);//로딩을 다시 해야함\r\n        setSecondFuncTriger(true);\r\n    }\r\n    useEffect(() => {presetChattingRoomId();}, [leftBookState]);//초기 실행 - leftBookState가 바뀌면 실행한다. - 이건 바꾸면 안됨 채팅 종류만 달라질 수 있음 이 경우 leftBookState가 안달라짐\r\n\r\n    //초기함수 2번 - id를 받은 이후 이를 활용하여 채팅방 정보와 채팅 내역을 불러오는 함수\r\n    const preSetChattingRoomInfo = async () => {\r\n        if(!secondFuncTriger) return;//초기상황에서는 그냥 종료\r\n\r\n        const res1 = await getAxios(`${getChattingRoomStuffUrl}/${chattingRoomId}`, {}, refreshAccessToken);\r\n        setChattingRoomName(res1.data.data.name);\r\n        const tmpNickname = {};\r\n        const tmpUserImg = {};\r\n        res1.data.data.userDto.map((data) => {\r\n            tmpNickname[data.userId] = data.nickname;\r\n            tmpUserImg[data.userId] = data.imgUrl;\r\n        });\r\n        setUserAndUserNickname(tmpNickname);//유저id와 이름 페어 지정\r\n        setUserAndUserImg(tmpUserImg);//유저id와 프로필 이미지 페어 지정\r\n        socketConnect();//소캣도 연결한다.\r\n\r\n        await gettingChattingList();\r\n        setChatLoading(false);//이제 다른 방으로 이동 가능하게 한다.\r\n        setLoading(false);//채팅방 로딩이 종료되었으므로 화면을 띄운다\r\n        setSecondFuncTriger(false);\r\n    };\r\n    useEffect(() => {preSetChattingRoomInfo()}, [secondFuncTriger]);\r\n\r\n    //로딩이 끝나면 커서를 아래로 넣어주는 함수\r\n    useEffect(() => {if(!loading) document.querySelector(\"#userChatInput\").focus();}, [loading]);\r\n\r\n    //채팅 리스트를 불러오는 함수\r\n    const gettingChattingList = async () => {//초기실행 3번\r\n        const res = await getAxios(`${getChattingListUrl}/${chattingRoomId}?startId=${chattingListStartId}`, {}, refreshAccessToken);\r\n        const cur = [...chattingList];//지금의 채팅방 채팅 리스트\r\n        const tmp = [...res.data.data];//받아온 채팅방 채팅 리스트\r\n        if(tmp.length === 0){\r\n            setNoMoreChat(true);\r\n        }\r\n        else{\r\n            const revTmp = tmp.reverse();\r\n            const next = revTmp.concat(cur);\r\n            setChattingList(next);\r\n        }\r\n        if(chattingListStartId === 987654321){\r\n            setNeedScroll(true);\r\n        }\r\n        setChattingListStartId(res.data.startId);\r\n    };\r\n\r\n    //채팅이 추가되면 자동으로 스크롤 해주는 함수\r\n    const [needScroll, setNeedScroll] = useState(false);\r\n    const [currentScrollHeight, setCurrentScrollHeight] = useState(0);\r\n    useEffect(() => {\r\n        if(loading) return;//로딩중이면 실행 X\r\n        if(needScroll){//채팅이 하나 추가된 것이나, 첫 상황으로 아래로 그냥 내려가면 된다. 이 때의 높이를 기록한다.\r\n            document.querySelector(\"#chatbox\").scrollTop = document.querySelector(\"#chatbox\").scrollHeight;\r\n            setNeedScroll(false);\r\n        }\r\n        else{//상단에 추가된 경우\r\n            document.querySelector(\"#chatbox\").scrollTop = (document.querySelector(\"#chatbox\").scrollHeight - currentScrollHeight);\r\n        }\r\n        setCurrentScrollHeight(document.querySelector(\"#chatbox\").scrollHeight);\r\n    }, [chattingList]);\r\n\r\n    //채팅 제출함수\r\n    const userChattingSubmitHandler = (event) => {\r\n        if(event !== null) {//이벤트가 submit일 수도 있고 그냥 엔터눌러서 온 걸 수도 있다. 엔터면 그냥 넘어가고 submit이면 preventDefault()한다.\r\n            event.preventDefault();\r\n        }\r\n        if(userChatInput === \"\") return;//입력한게 없으면 제출 X\r\n        \r\n        const now = new Date();\r\n        stompClient.send(`/pub/${chattingRoomId}`, {},\r\n            JSON.stringify({\r\n                userId: userId,\r\n                message: userChatInput,\r\n                createdDate : now,\r\n            })\r\n        );\r\n        setUserChatInput(\"\");\r\n    };\r\n\r\n    //무한 로딩 함수 - 작동 확인함\r\n    useEffect(() => {\r\n        if(inView && !noMoreChat){\r\n            gettingChattingList();\r\n        }\r\n    }, [inView]);\r\n\r\n    //채팅방 이름 변경\r\n    const chattingRoomNamechangeSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        document.querySelector(\"#chattingRoomName\").disabled = true;\r\n\r\n        const sendBody = {\r\n            name: chattingRoomName,\r\n        }\r\n        await postAxios(`${changeChattingRoomNameUrl}/${chattingRoomId}`, sendBody, {}, refreshAccessToken);\r\n        setChattingTriger(true);\r\n    };\r\n\r\n    //채팅방 이름 변경 함수\r\n    const onChatnameClickHandler = (event) => {\r\n        event.preventDefault();\r\n        document.querySelector(\"#chattingRoomName\").disabled = false;\r\n        document.querySelector(\"#chattingRoomName\").select();\r\n    }\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <form className={Style.chattingRoomNameArea} onSubmit={chattingRoomNamechangeSubmitHandler}>\r\n                <div className={Style.flexBoxRight}>\r\n                    <img src={editImg} onClick={onChatnameClickHandler} style={{cursor: \"pointer\"}} />\r\n                </div>\r\n                <input\r\n                    id=\"chattingRoomName\"\r\n                    className={Style.chattingRoomName}\r\n                    value={chattingRoomName}\r\n                    onChange={onChattingRoomNameChangeHandler}\r\n                    maxLength={10}\r\n                    disabled={true}\r\n                />\r\n            </form>\r\n            <div id=\"chatbox\" className={Style.chattingListArea}>\r\n                <div className={Style.chattingListAreaSize}>\r\n                    {\r\n                        chattingList.map((data, index) => (\r\n                            index === 0 ?\r\n                            <SingleChat data={data} key={index} setLeftBookState={setLeftBookState} userId={userId} userAndUserImg={userAndUserImg} userAndUserNickname={userAndUserNickname} oldestChat={oldestChat}/>\r\n                            :\r\n                            <SingleChat data={data} key={index} setLeftBookState={setLeftBookState} userId={userId} userAndUserImg={userAndUserImg} userAndUserNickname={userAndUserNickname} oldestChat={null}/>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            <form className={Style.userChatArea} onSubmit={userChattingSubmitHandler}>\r\n                <textarea \r\n                    className={Style.userChatInput}\r\n                    value={userChatInput}\r\n                    onKeyDown={onUserChattingEnterClickHandler}\r\n                    onChange={onUserChattingChangeHandler}\r\n                    id=\"userChatInput\"\r\n                />\r\n                <div className={Style.userChatBtnArea}>\r\n                    <button className={Style.userChatBtn}>제출</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftChat;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js",["346","347","348"],[],"import Style from './newPost.module.css';\r\nimport { useEffect, useState } from 'react';\r\nimport addImage from '../../root/tagImages/add.png';\r\nimport { ImageValid } from '../../../../ImageValidCheck';\r\n\r\nconst LeftNewPost = ({renderedNewPostImages, setRenderedNewPostImages, newPostImages, setNewPostImages, newPostHashtag, setNewPostHashtag, newPostContent, setNewPostContent, uploadNewPostHandler }) => {\r\n    const [hashtag, setHashtag] = useState(\"\");//임시로 입력되는 값 변경하는 State.\r\n\r\n    //처음 로드되면 이미지 파일, 해시태그, 글을 초기화 하는 함수\r\n    useEffect(() => {\r\n        setRenderedNewPostImages([]);\r\n        setNewPostImages([]);\r\n        setNewPostHashtag([]);\r\n        setNewPostContent(\"\");\r\n    }, []);\r\n\r\n    //글 내용 변경 함수\r\n    const contentHandler = (event) => {\r\n        event.preventDefault();\r\n        setNewPostContent(event.target.value);\r\n    }\r\n\r\n    //이미지를 랜더링 해서 집어넣는다.\r\n    const renderImageFiles = (inputFile) => {\r\n        const renderTmp = [...renderedNewPostImages];//지금까지 미리보기로 되어있는 이미지들의 배열\r\n        inputFile.forEach((data) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(data);\r\n            reader.onload = (imageData) => {\r\n                renderTmp.push(imageData.target.result);\r\n                setRenderedNewPostImages(renderTmp);\r\n            }\r\n        });\r\n    };\r\n\r\n    //지금 들어온 파일을 파일 그대로 보낼 state에 넣기\r\n    const loadImageFiles = (inputFile) => {\r\n        const tmp = [...newPostImages];\r\n        const next = tmp.concat(inputFile);\r\n        setNewPostImages(next);\r\n    };\r\n\r\n    //이미지 영역에 파일을 드랍한 경우 - ondrop\r\n    const imageDropHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //들어온 파일을 인식하여 inputFile에 집어넣는다.\r\n        let inputFile = []\r\n        if(event.type === 'change'){//input에 넣은 경우\r\n            inputFile = [...event.target.files];\r\n        }\r\n        else{//드래그 드랍한 경우\r\n            inputFile = [...event.dataTransfer.files];\r\n        }\r\n        if(!ImageValid(inputFile, newPostImages)) return;//입력된 파일이 유효하지 않은 경우 실행X\r\n\r\n        renderImageFiles(inputFile);//이미지 렌더링 처리\r\n        loadImageFiles(inputFile);//api에 보낼 수 있도록 파일 자체의 세팅\r\n\r\n        //CSS는 반드시 실행된다.\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 영역 위에 파일을 올려놓은 경우 - ondragover(이게 있어야 ondrop이 활성화 된다.)\r\n    const imageDragOverHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    //파일을 이미지 영역 위로 최초 진입한 경우 - ondragenter\r\n    const imageDragEnterHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"0.5\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"hidden\";\r\n        imageUploadArea.style.backgroundColor=\"rgb(236, 236, 236)\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(150, 150, 150)\";\r\n    };\r\n\r\n    //파일을 이미지 영역 위에서 벗어나게 한 경우 - ondragleave\r\n    const imageDragLeaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"visible\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //hashtag영역 바꿔주는 함수\r\n    const hashtagHandler = (event) => {\r\n        event.preventDefault();\r\n        const value = event.target.value;\r\n        if(value === \" \"){\r\n            alert(\"1글자 이상의 키워드를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(value[value.length - 1] === \" \"){// 이 경우 \r\n            const tmp = newPostHashtag;\r\n            const input = value.slice(0,-1);\r\n            if(!newPostHashtag.includes(input)){\r\n                tmp.push(input);\r\n                setNewPostHashtag(tmp);\r\n                setHashtag(\"\");\r\n            }\r\n            setHashtag(\"\");\r\n        }\r\n        else{\r\n            setHashtag(value);\r\n        }\r\n    }\r\n\r\n    //hashtag 지우는 함수\r\n    const deleteTag = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostHashtag];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setNewPostHashtag(tmp);\r\n    };\r\n\r\n    //이미지 지우는 함수\r\n    const deleteImage = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...renderedNewPostImages];\r\n        tmp.splice(Number(event.target.id), 1);\r\n        setRenderedNewPostImages(tmp);\r\n\r\n        const tmp2 = [...newPostImages];\r\n        tmp2.splice(Number(event.target.id), 1);\r\n        setNewPostImages(tmp2);\r\n    };\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={uploadNewPostHandler}>\r\n            {/* 드래그 앤 드롭 영역 */}\r\n            <div className={Style.pictureArea}>\r\n                <div className={Style.picture} id=\"imageUploadArea\" onDrop={imageDropHandler} onDragOver={imageDragOverHandler} onDragEnter={imageDragEnterHandler} onDragLeave={imageDragLeaveHandler}>\r\n                    <input type=\"file\" multiple id=\"userImageInput\" accept=\"image/*\" style={{display:\"none\"}} onChange={imageDropHandler}/>\r\n                    <label htmlFor=\"userImageInput\"><img src={addImage} className={Style.pictureinnerimage} id=\"imageUploadImage\"/></label>\r\n                    <p className={Style.pictureinnerword} id=\"imageUploadMent\">업로드할 이미지를 여기로 옮겨주세요.</p>\r\n                </div>\r\n            </div>\r\n            {/* 올린 이미지 미리 보기 영역 */}\r\n            <div className={Style.ListArea} style={{overflow: \"auto\"}}>\r\n                <div style={{width: `${renderedNewPostImages.length * 200}px`, height: \"100%\"}}>\r\n                    {\r\n                        renderedNewPostImages.map((data, index) =>(\r\n                            <img className={Style.singlepicture} src={data} key={index} id={index} onClick={deleteImage} />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            {/* hashtag label 영역 */}\r\n            <p className={Style.hashtag}>키워드 (띄어쓰기로 분리해주세요)</p>\r\n            {/* hashtag input 영역 */}\r\n            <input \r\n                type=\"text\"\r\n                value={hashtag}\r\n                onChange={hashtagHandler}\r\n                className={Style.hashtagInput}\r\n            />\r\n            {/* hashtag list 영역 */}\r\n            <div className={Style.ListArea} style={{overflow: \"auto\"}}>\r\n                <div style={{width: \"100%\", height: \"100px\"}}>\r\n                    {\r\n                        newPostHashtag.map((data, index) =>(\r\n                            <button className={Style.singleHashTag} onClick={deleteTag} key={index} value={index}>#{data}</button>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            {/* word label 영역 */}\r\n            <p className={Style.word}>글을 입력해 주세요</p>\r\n            {/* word input 영역 */}\r\n            <textarea \r\n                type=\"text\" \r\n                vaslue={newPostContent}\r\n                onChange={contentHandler}\r\n                maxLength={200}\r\n                className={Style.wordInput} />\r\n            {/* 글 제출 영역 */}\r\n            <div className={Style.area}>\r\n                <button id=\"newPageSubmitBtn\" type=\"submit\" className={Style.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default LeftNewPost;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js",["349","350","351","352"],[],"import Style from './chat.module.css';\r\nimport chatAddBtn from './message_plus_alt.png';\r\nimport SingleChattingRoom from \"./singleChattingRoom\";\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getChattingRoomListUrl,\r\n} from '../../../../apiUrl';\r\nimport {\r\n    getAxios\r\n} from '../../../../apiCall';\r\n\r\nconst RightChat = ({refreshAccessToken, setLeftBookState, leftBookState, rightBookState, chattingTriger, setChattingTriger, chatLoading, setChatLoading, chatAndFriendReloadTriger, setChatAndFriendReloadTriger}) => {\r\n    const [chatSearchInput, setChatSearchInput] = useState(\"\");//검색창에 입력된 정보\r\n    const [chattingRoomList, setChattingRoomList] = useState([]);//채팅방들의 정보를 가진 리스트\r\n    const [searched, setSearched] = useState(false);//채팅방이 검색된 상태인지 알려주는 변수\r\n\r\n    //채팅방 검색 input change Handler\r\n    const chatSearchInputChangeHandler = (event) => {\r\n        setChatSearchInput(event.target.value);\r\n        if(searched){\r\n            console.log(\"검색어가 변경 되어 검색 결과를 초기화 합니다.\");\r\n            gettingChattingRoomList();//검색된 상태면 다시 채팅방 리스트를 불러온다.\r\n            setSearched(false);\r\n        }\r\n    };\r\n\r\n    const gettingChattingRoomList = async () => {\r\n        const res = await getAxios(getChattingRoomListUrl, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data];\r\n        setChattingRoomList(tmp);\r\n        setChattingTriger(false);\r\n    };\r\n\r\n    /*****************채팅창 불러오기******************/\r\n    const [loading, setLoading] = useState(true);//초기에만 true로 설정됨 첫 로드 이후에는 false로 정상 처리 된다.\r\n    useEffect(() => {\r\n        if(rightBookState === \"chat\"){//오른쪽이 chat일 때만 실행\r\n            gettingChattingRoomList();\r\n            setLoading(false);\r\n        }\r\n    }, [rightBookState]);//초기 설정\r\n\r\n\r\n    useEffect(() => {//이 트리거는 새로운 채팅이 올라왔을 때 발생\r\n        if(chattingTriger){//트리거가 발생한 순간에만 로딩\r\n            gettingChattingRoomList();\r\n        }\r\n    }, [chattingTriger]);\r\n\r\n    useEffect(() => {//이 트리거는 사용자가 오른쪽 페이지가 채팅일 때, 프로필 변경을 하면 발행\r\n        if(chatAndFriendReloadTriger){//트리거가 발생한 순간에만 로딩\r\n            gettingChattingRoomList();\r\n            setChatAndFriendReloadTriger(false);\r\n        }\r\n    }, [chatAndFriendReloadTriger]);\r\n\r\n    //새 채팅방 click Handler\r\n    const newChatClickHandler = () => {\r\n        setLeftBookState(\"makeNewC\");\r\n    };\r\n\r\n    //채팅방 찾는 handler\r\n    const findChattingRoomHandler = (event) => {\r\n        event.preventDefault();\r\n        if(chatSearchInput === \"\") return; //검색어가 비어있으면 아무 일도 일어나지 않는다.\r\n\r\n        console.log(chattingRoomList);\r\n        console.log(\"위 리스트에서 아래 검색어를 검색합니다.\");\r\n        console.log(chatSearchInput);\r\n\r\n        //채팅방 검색 기준은 채팅방의 이름이다.\r\n        const searchedList = chattingRoomList.filter(d => d.name.includes(chatSearchInput));\r\n        console.log(searchedList);\r\n        setChattingRoomList(searchedList);\r\n        setSearched(true);\r\n    };\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.chatList}>\r\n                <div className={Style.searchBarArea}>\r\n                    <form className={Style.flexBox} onSubmit={findChattingRoomHandler}>\r\n                        <input \r\n                            className={Style.searchBar}\r\n                            placeholder=\"채팅방을 검색하세요.\"\r\n                            value={chatSearchInput}\r\n                            onChange={chatSearchInputChangeHandler}\r\n                        />\r\n                    </form>\r\n                    <div className={Style.flexBox}>\r\n                        <img src={chatAddBtn} className={Style.makeNewChat} onClick={newChatClickHandler}/>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    chattingRoomList.map((data, index) => (\r\n                        <SingleChattingRoom key={index} data={data} setLeftBookState={setLeftBookState} refreshAccessToken={refreshAccessToken} gettingChattingRoomList={gettingChattingRoomList} leftBookState={leftBookState} searched={searched} setSearched={setSearched} chatLoading={chatLoading} setChatLoading={setChatLoading} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightChat;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newChat\\newChat.js",["353","354","355"],[],"import Style from './newChat.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getFolloweeListUrl,\r\n    getfollowerListUrl,\r\n    makeNewChattingRoomUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from \"../../../../apiCall\";\r\n\r\nimport SingleFriend from './singleFriend';\r\n\r\nconst LeftNewChat = ({refreshAccessToken, setLeftBookState, userId, setChattingTriger, setChatLoading}) => {\r\n    const [friendSearchInput, setFriendSearchInput] = useState(\"\");//친구 검색용\r\n    const [chattingRoomNameInput, setChattingRoomNameInput] = useState(\"\");//채팅방 이름 입력\r\n    const [outputFriendList, setOutputFriendList] = useState([]);//실제로 출력할 친구 리스트\r\n    const [wholeFriendList, setWholeFriendList] = useState([]);//받아온 친구 리스트\r\n    const [chosenFriendList, setChosenFriendList] = useState([]);//선택된 친구 리스트\r\n    const [followerList, setFollowerList] = useState([]);//친구를 받기 위해 followerList를 받아온다.\r\n    const [followeeList, setFolloweeList] = useState([]);//친구를 받기 위해 followeeList를 받아온다.\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const friendSearchInputChangeHandler = (event) => {\r\n        setFriendSearchInput(event.target.value);\r\n    };\r\n\r\n    const chattingRoomNameInputChangeHandler = (event) => {\r\n        setChattingRoomNameInput(event.target.value);\r\n    };\r\n\r\n    //팔로워와 팔로잉을 불러오는 함수\r\n    const presetFollowerAndFollowee = async () => {\r\n        const res1 = await getAxios(getFolloweeListUrl, {}, refreshAccessToken);\r\n        const tmp = [...res1.data.data];\r\n        setFolloweeList(tmp);//팔로잉 저장\r\n\r\n        const res2 = await getAxios(getfollowerListUrl, {}, refreshAccessToken);\r\n        const tmp2 = [...res2.data.data];\r\n        setFollowerList(tmp2);//팔로워 저장\r\n    };\r\n    useEffect(() => {presetFollowerAndFollowee();}, []);//초기 상황에만 진행\r\n\r\n    //팔로워와 팔로잉을 바탕으로 친구 리스트를 파악하는 함수\r\n    const presetFriendList = () => {\r\n        //follower와 follwee에 동시에 속한 값들은 친구로 저장\r\n        const JSONFollowerList = followerList.map(d => JSON.stringify(d));\r\n        const JSONFolloweeList = followeeList.map(d => JSON.stringify(d));\r\n        const JSONFriendList = JSONFollowerList.filter(x => JSONFolloweeList.includes(x));\r\n        setWholeFriendList(JSONFriendList.map(d => JSON.parse(d)));\r\n    };\r\n    useEffect(presetFriendList, [followerList, followeeList]);\r\n\r\n    //친구 리스트가 확정되면 일단 그 리스트를 output에 넣는다.\r\n    const presetOutputFriendList = () => {\r\n        const tmp = [...wholeFriendList];\r\n        setOutputFriendList(tmp);\r\n        setLoading(false);\r\n    };\r\n    useEffect(presetOutputFriendList, [wholeFriendList]);\r\n\r\n    //유저를 검색하면 outputFriendList가 변경된다. 이를 처리하는 함수\r\n    const changeOutputFriendListbySearch = (event) => {\r\n        event.preventDefault();\r\n        //whole친구 리스트를 바탕으로 조건에 맞는것만 outputList에 반영한다.\r\n        const tmp = wholeFriendList.filter(d => d.nickname.includes(friendSearchInput))//모든 친구중 이름에 검색사항이 포함된 친구만 받는다.\r\n        setOutputFriendList(tmp);//검색된 유저들만 리스트에 올린다.\r\n    };\r\n\r\n    //선택된 유저 리스트가 변경되면 output친구 리스트를 변경해야한다.\r\n    const changeOutputFriendListbyClick = () => {\r\n        const JSONWholeFriendList = wholeFriendList.map(d => JSON.stringify(d));\r\n        const JSONChosenFriendList = chosenFriendList.map(d => JSON.stringify(d));\r\n        const leftOverList = JSONWholeFriendList.filter(x => !JSONChosenFriendList.includes(x));//출력값중에서 친구리스트에 없는 친구들이 남은 애들이다.\r\n        setOutputFriendList(leftOverList.map(d => JSON.parse(d)));\r\n        setFriendSearchInput(\"\");//검색을 하고있었을 수 있는데 친구를 클릭하면 검색하던 내용을 없앤다.\r\n    };\r\n    useEffect(changeOutputFriendListbyClick, [chosenFriendList]);\r\n\r\n    //채팅방 생성함수\r\n    const [newChatSubmitClicked, setNewChatSubmitClicked] = useState(false);\r\n\r\n    const submitAbleAgain = () => {\r\n        setNewChatSubmitClicked(false);\r\n        const btn = document.querySelector('#newChattingBtn');\r\n        btn.innerHTML = '생 성';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const createChatClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(newChatSubmitClicked) return;\r\n        if(chosenFriendList.length === 0){//아무도 선택되지 않은 경우 함수 종료\r\n            alert(\"1명 이상의 친구를 선택해 주세요.\");\r\n            return;\r\n        }\r\n        setNewChatSubmitClicked(true);\r\n        setChatLoading(true);//방 생성중에 다른 채팅방으로 이동 불가\r\n        const btn = document.querySelector('#newChattingBtn');\r\n        btn.innerHTML = \"제출중\";\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const createChatClickHandlerSecondAct = async () => {\r\n        if(!newChatSubmitClicked) return;\r\n\r\n        const chosenFriendUserIdList = chosenFriendList.map(d => (d.userId));//id만 뽑아서 배열 생성\r\n        chosenFriendUserIdList.push(userId);//나도 집어넣는다.\r\n        let chattingRoomName = chattingRoomNameInput;//채팅방 이름 설정\r\n        if(chattingRoomName === \"\"){//사용자가 채팅방 명을 정해주지 않은 경우 이름 자동 생성\r\n            chosenFriendList.length - 1 === 0 ? \r\n            chattingRoomName = `${chosenFriendList[0].nickname}` : \r\n            chattingRoomName = `${chosenFriendList[0].nickname} 외 ${chosenFriendList.length - 1}명과의 대화`\r\n        }\r\n\r\n        const sendBody ={\r\n            name: chattingRoomName,\r\n            userIdList: chosenFriendUserIdList,\r\n        };\r\n\r\n        const res = await postAxios(makeNewChattingRoomUrl, sendBody, {}, refreshAccessToken);\r\n        setLeftBookState(`chat/${res.data.data.chatroomId}`);\r\n        setChattingTriger(true);\r\n        submitAbleAgain();\r\n    };\r\n    useEffect(() => {createChatClickHandlerSecondAct();}, [newChatSubmitClicked]);\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            {/* 검색창 */}\r\n            <form className={Style.flexBoxLeft} onSubmit={changeOutputFriendListbySearch}>\r\n                <input \r\n                    className={Style.friendInput}\r\n                    placeholder=\"친구 이름을 검색하세요.\"\r\n                    onChange={friendSearchInputChangeHandler}\r\n                    value={friendSearchInput}\r\n                />\r\n            </form>\r\n            {/* 친구 리스트 */}\r\n            <div className={Style.friendBox}>\r\n                <div className={Style.friendList}>\r\n                    {\r\n                        chosenFriendList.length === 0 && outputFriendList.length === 0 ?\r\n                        <p style={{width: \"100%\", textAlign: 'center'}}>친구가 없습니다..</p>\r\n                        :\r\n                        null\r\n                    }\r\n                    {\r\n                        chosenFriendList.map((data, index) => (\r\n                            <SingleFriend \r\n                                key={index}\r\n                                data={data}\r\n                                setChosenFriendList={setChosenFriendList}\r\n                                chosenFriendList={chosenFriendList}\r\n                                addStyle={{backgroundColor: \"gray\"}}\r\n                            />\r\n                        ))\r\n                    }\r\n                    {\r\n                        outputFriendList.map((data, index) => (\r\n                            <SingleFriend \r\n                                key={index}\r\n                                data={data}\r\n                                setChosenFriendList={setChosenFriendList}\r\n                                chosenFriendList={chosenFriendList}\r\n                                addStyle={null}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            {/* 생성 버튼 */}\r\n            <div className={Style.flexBoxRight}>\r\n                <input \r\n                    className={Style.friendInput}\r\n                    placeholder=\"채팅방의 이름을 설정하세요..(최대 10자)\"\r\n                    maxLength={10}\r\n                    onChange={chattingRoomNameInputChangeHandler}\r\n                    value={chattingRoomNameInput}\r\n                />\r\n                <button id=\"newChattingBtn\" type=\"button\" className={Style.submitBtn} onClick={createChatClickHandler}>생 성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftNewChat;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js",["356"],[],"import Style from './newPost.module.css';\r\nimport {useEffect} from 'react';\r\n\r\nconst RightNewPost = ({newPostLikeNotice, setNewPostLikeNotice, newPostCommentNotice, setNewPostCommentNotice, newPostReadPostAuth, setNewPostReadPostAuth, newPostCommentAuth, setNewPostCommentAuth, newPostReadLikeAuth, setNewPostReadLikeAuth}) => {\r\n    //초기에 모든 허용을 진하게 만드는 함수\r\n    const firstColoring = () => {\r\n        //좋아요 알림부분 반영\r\n        if(newPostLikeNotice){\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 알림 부분 반영\r\n        if(newPostCommentNotice){\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //읽기 권한 반영\r\n        if(newPostReadPostAuth === \"ALL\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else if(newPostReadPostAuth === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 읽기 반영\r\n        if(newPostCommentAuth){\r\n            document.querySelector(\"#commentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#commentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n        \r\n        //좋아요 읽기 반영\r\n        if(newPostReadLikeAuth){\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(firstColoring, []);\r\n\r\n    //누른 설정을 반영하는 함수\r\n    //좋아요 알림\r\n    const likeNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostLikeNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"likeNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostLikeNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"likeNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostLikeNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 알림\r\n    const commentNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostCommentNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"commentNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostCommentNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"commentNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostCommentNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //읽기 권한 - 얘만 3개다.\r\n    const readPostAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(clicked === \"readPostAuthAllow\"){//허용이 눌린 경우\r\n            if(newPostReadPostAuth !== \"ALL\"){//근데 이미 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"ALL\");//허용으로 변경\r\n            }\r\n        }\r\n        else if(clicked === \"readPostAuthHalfAllow\"){//팔로우만 허용인 경우\r\n            if(newPostReadPostAuth !== \"FOLLOW_ONLY\"){//근데 이미 팔로우만 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"FOLLOW_ONLY\");//팔로우만 허용으로 변경\r\n            }\r\n        }\r\n        else{//거부인 경우\r\n            if(newPostReadPostAuth !== \"NONE\"){//근데 이미 거부로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"NONE\");//거부로 변경\r\n            }\r\n        }\r\n    };\r\n    //댓글 관련 권한\r\n    const readCommentAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"commentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#commentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#commentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"commentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#commentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#commentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //좋아요 읽기 권한\r\n    const readLikeAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadLikeAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readLikeAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadLikeAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readLikeAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadLikeAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className={Style.WholeCover}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeAllow\" onClick={likeNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeDenial\" onClick={likeNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeAllow\" onClick={commentNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeDenial\" onClick={commentNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthAllow\" onClick={readPostAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthHalfAllow\" onClick={readPostAuthClickHandler}>팔로우 된 사람만 허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthDenial\" onClick={readPostAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 관련 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentAuthAllow\" onClick={readCommentAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentAuthDenial\" onClick={readCommentAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthAllow\" onClick={readLikeAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthDenial\" onClick={readLikeAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNewPost;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js",["357"],[],"import Style from './notice.module.css';\r\nimport SingleNotice from './singleNotice';\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport {\r\n    getNoticeUrl,\r\n} from '../../../../apiUrl';\r\nimport {\r\n    getAxios\r\n} from '../../../../apiCall';\r\n\r\nconst RightNotice = ({leftBookChangeHandler, refreshAccessToken, setPageId, noticeCount, setNoticeCount}) => {\r\n    const [noticeList, setNoticeList] = useState([]);\r\n    const [lastNotice, inView] = useInView();\r\n    const [noticeStartId, setNoticeStartId] = useState(987654321);\r\n    const [noMoreNotice, setNomoreNotice] = useState(false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //알림 불러오는 함수 => 아래의 더 오래된 알림을 로드한다.\r\n    const NoticeRead = async () => {\r\n        const res = await getAxios(`${getNoticeUrl}${noticeStartId}`, {}, refreshAccessToken);\r\n        setLoading(false);\r\n        if(res.data.data.length === 0) {\r\n            setNomoreNotice(true);\r\n            return;\r\n        }\r\n        setNomoreNotice(false);\r\n        const current = [...noticeList];\r\n        const tmp = [...res.data.data];\r\n        const next = current.concat(tmp);\r\n        setNoticeList(next);\r\n        setNoticeStartId(res.data.startId);\r\n    };\r\n    useState(() => {NoticeRead();}, [noticeCount]);//숫자 변경시 실행\r\n\r\n    //마지막 요소를 보는 중이며, 아직 알림이 남은 경우 notice를 더 불러오게 하는 함수\r\n    const infiniteLoad = () => {\r\n        if(inView & !noMoreNotice){\r\n            NoticeRead(\"\");\r\n        }\r\n    }\r\n    useEffect(infiniteLoad, [inView]);\r\n\r\n    //닫기 버튼 누른 경우 - Notice 요소 안에 선언하려면 list를 요소마다 복사해서 변수로 가져야 하므로 여기에 선언\r\n    const ListDeleteHandler = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...noticeList];\r\n        tmp.splice(Number(event.target.id), 1);\r\n        setNoticeList(tmp);\r\n    };\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.noticeList}>\r\n            {\r\n                noticeList.length === 0 ?\r\n                <p className={Style.noNoticeScript}>도착한 알림이 없습니다.</p>\r\n                :\r\n                noticeList.map((data, index) =>(//마지막 요소는 last가 true이다.\r\n                    <SingleNotice\r\n                        notificationId={data.notificationId}//알림의 id\r\n                        userImgUrl={data.userImgUrl}//알림의 대상의 프로필 사진\r\n                        targetUserId={data.userId}//알림의 대상의 id\r\n                        type={data.type}//알림의 타입\r\n                        resourceId={data.resourceId}//근원지 (FOLLOW의 경우 null이다.)\r\n                        checked={data.checked}//해당 알림을 확인했었는지 안했는지\r\n                        content={data.content}\r\n                        key={index}\r\n                        lastNotice={index === (noticeList.length - 1) ? lastNotice : null}\r\n                        leftBookChangeHandler={leftBookChangeHandler}\r\n                        ListDeleteHandler={ListDeleteHandler}\r\n                        index={index}\r\n                        setPageId={setPageId}\r\n                        setNoticeCount={setNoticeCount}\r\n                        refreshAccessToken={refreshAccessToken}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RightNotice;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js",["358","359","360"],[],"import Style from './friend.module.css';\r\nimport Profile from '../../root/profile/profile';\r\nimport { useState, useEffect } from 'react';\r\nimport RenderRightFriend from './renderRightFriend';\r\nimport {\r\n    getFolloweeListUrl,\r\n    getfollowerListUrl,\r\n    getcurrentProfileUrl,\r\n} from '../../../../apiUrl';\r\nimport {\r\n    getAxios\r\n} from '../../../../apiCall';\r\n\r\nconst RightFriend = ({userId, leftBookChangeHandler, refreshAccessToken, chatAndFriendReloadTriger, setChatAndFriendReloadTriger, userPageAndFriendReloadTriger, setUserPageAndFriendReloadTriger}) => {\r\n    const [followeeList, setFolloweeList] = useState([]);\r\n    const [followerList, setFollowerList] = useState([]);\r\n    const [friendList, setFriendList] = useState([]);\r\n    const [myProfileImage, setMyProfileImage] = useState(\"\");\r\n    const [myProfileName, setMyProfileName] = useState(\"\");\r\n\r\n    const rightFriendAndUserProfileChangeHandler = async () => {//오른쪽 화면이 친구리스트인데 사용자가 프로필을 수정하는 경우, 사용자의 프로필을 다시 불러와서 갱신하는 함수\r\n        if(!chatAndFriendReloadTriger) return;\r\n        \r\n        const res = await getAxios(getcurrentProfileUrl, {}, refreshAccessToken);//내 정보 불러오기\r\n        setMyProfileName(res.data.data.nickname);\r\n        setMyProfileImage(res.data.data.imgUrl);\r\n        setChatAndFriendReloadTriger(false);\r\n    };\r\n    useEffect(() => {rightFriendAndUserProfileChangeHandler();}, [chatAndFriendReloadTriger]);\r\n\r\n    //화면 렌더링 초기 설정 함수\r\n    const [loading, setLoaded] = useState(true);\r\n    const rightFriendPreset = async () => {\r\n        const res1 = await getAxios(getFolloweeListUrl, {}, refreshAccessToken);//내가 팔로우 중인 유저 불러오기\r\n        const tmp1 = [...res1.data.data];\r\n        setFolloweeList(tmp1);\r\n\r\n        const res2 = await getAxios(getfollowerListUrl, {}, refreshAccessToken);//나를 팔로우 중인 유저 불러오기\r\n        const tmp2 = [...res2.data.data];\r\n        setFollowerList(tmp2);\r\n\r\n        const res3 = await getAxios(getcurrentProfileUrl, {}, refreshAccessToken);//내 정보 불러오기\r\n        setMyProfileName(res3.data.data.nickname);\r\n        setMyProfileImage(res3.data.data.imgUrl);\r\n\r\n        setLoaded(false);\r\n    };\r\n    useEffect(() => {rightFriendPreset();}, []);\r\n\r\n    useEffect(() => {//유저의 page에서 팔로우 클릭 시 친구 정보를 다시 불러온다.\r\n        if(!userPageAndFriendReloadTriger) return;//false인 경우 실행 X\r\n        rightFriendPreset();\r\n        setUserPageAndFriendReloadTriger(false);\r\n    }, [userPageAndFriendReloadTriger]);\r\n\r\n    const friendListSet = () => {\r\n        //follower와 follwee에 동시에 속한 값들은 친구로 저장\r\n        const JSONFollowerList = followerList.map(d => JSON.stringify(d));\r\n        const JSONFolloweeList = followeeList.map(d => JSON.stringify(d));\r\n        const JSONFriendList = JSONFollowerList.filter(x => JSONFolloweeList.includes(x));\r\n        setFriendList(JSONFriendList.map(d => JSON.parse(d)));\r\n    };\r\n    useEffect(friendListSet, [followerList, followeeList]);\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <Profile img={myProfileImage} name={myProfileName} userId={userId} leftBookChangeHandler={leftBookChangeHandler}/>\r\n            </div>\r\n            <RenderRightFriend friendList={friendList} leftBookChangeHandler={leftBookChangeHandler}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightFriend;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerMain.js",["361","362"],[],"//로그인의 초기 화면. id, 비번을 쓰는 곳이 있다.\r\nimport { useState } from 'react';\r\nimport Style from './innerMain.module.css';\r\nimport KakaoImg from '../socialImg/Kakao.png';\r\nimport NaverImg from '../socialImg/Naver.png';\r\nimport axios from 'axios';\r\nimport {\r\n    loginApiUrl,\r\n    kakaoLoginUrl,\r\n    NaverLoginUrl,\r\n} from \"../../../apiUrl\";\r\n\r\nconst Main = ({toFindPasswordPage, toSignUpPage, login}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [wrong, setWrong] = useState(\"clear\");//가능한 값, clear(문제 없음), not user(이메일이나 비번이 틀린 경우)\r\n\r\n    //input 변경시 반영해주는 함수\r\n    const emailHandler = (event) =>{\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n        setWrong(\"clear\");\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n        setWrong(\"clear\");\r\n    };\r\n\r\n    //로그인 클릭 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(password === '') {\r\n            alert(\"비밀번호를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(loginApiUrl, {\r\n            email: email,\r\n            password: password,\r\n        })\r\n            .then((res) => {\r\n                setWrong(\"clear\");\r\n                login(res);\r\n            })\r\n            .catch((res) => {\r\n                console.log(res);\r\n                setWrong(\"not user\");\r\n            });\r\n    };\r\n\r\n    //카카오 로그인 처리 함수\r\n    const kakaoLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"kakao\");\r\n        window.location.href = kakaoLoginUrl;\r\n    };\r\n\r\n    //네이버 로그인 처리 함수 => 카카오와 내용은 동일하다.\r\n    const naverLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"naver\");\r\n        window.location.href = NaverLoginUrl;\r\n    };\r\n\r\n    return(\r\n        <form className={Style.loginInnerCover} onSubmit={submitHandler}>\r\n            {/* 아이디 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                className={Style.formInput}\r\n                value={email}\r\n                onChange={emailHandler}/>\r\n            </div>\r\n            {/* 비밀번호 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                className={Style.formInput}\r\n                value={password}\r\n                onChange={passwordHandler}/>\r\n            </div>\r\n            {/* 경고문 */}\r\n            <div className={Style.Cover}>\r\n                {wrong === \"not user\" ? <p className={Style.errorMes}>잘못된 이메일 혹은 비밀번호입니다.</p> : null}\r\n            </div>\r\n            {/* 로그인버튼 */}\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.loginbtn}\r\n                    type=\"submit\">\r\n                    로 그 인\r\n                </button>\r\n            </div>\r\n            {/* 찾기와 회원가입 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toFindPasswordPage}>\r\n                            비밀번호 찾기\r\n                        </p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toSignUpPage}>\r\n                            회원 가입\r\n                        </p>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            {/* 소셜 로그인 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={kakaoLoginHandler}>\r\n                            <div id=\"KakaoContainer\" className={Style.kakao}>\r\n                                <img id=\"symbol\" src={KakaoImg} className={Style.kakaoSymbol}/>\r\n                                <span id=\"label\" className={Style.kakaoLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={naverLoginHandler}>\r\n                            <div id=\"NaverContainer\" className={Style.naver}>\r\n                                <img id=\"symbol\" src={NaverImg} className={Style.naverSymbol}/>\r\n                                <span id=\"label\" className={Style.naverLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerFindPW.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Login\\inner\\innerSignUp.js",["363"],[],"//회원가입 부분\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Style from './innerSignUp.module.css';\r\nimport {\r\n    signUpApiUrl,\r\n    emailApiUrl,\r\n    loginApiUrl\r\n} from \"../../../apiUrl\";\r\n\r\nconst SignUp = ({login, toLoginPage}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [ageAgree, setAgeAgree] = useState(false);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [genderAgree, setGenderAgree] = useState(false);\r\n    const [emailAccept, setEmailAccept] = useState(false);\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n    //input변경 처리\r\n    const emailHandler = (event) => {\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n        setPasswordCheck(\"\");\r\n    };\r\n    const passwordCheckHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordCheck(event.target.value);\r\n    };\r\n    const nicknameHandler = (event) => {\r\n        event.preventDefault();\r\n        setNickname(event.target.value);\r\n    };\r\n    const ageHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.value >= 0){\r\n            setAge(event.target.value);\r\n        }\r\n    };\r\n    const ageAgreeHandler = () => {\r\n        setAgeAgree((current)=> !current);\r\n    };\r\n    const genderHandler = (event) => {\r\n        setGender(event.target.id);\r\n    };\r\n    const genderAgreeHandler = () => {\r\n        setGenderAgree((current)=> !current);\r\n    };\r\n\r\n    //비밀번호 유효성 확인 함수\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    }\r\n    //비밀번호 유효성 확인함수 실행부분\r\n    const passwordValid = () => {\r\n        if(passwordValidCheck(password)){\r\n            setPasswordInvalid(true);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(102, 181, 255)\";\r\n        }\r\n        else{\r\n            setPasswordInvalid(false);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(218, 86, 86)\";\r\n        }\r\n    }\r\n    useEffect(passwordValid, [password]);\r\n\r\n    //비밀번호 check확인 함수\r\n    const passwordCheckFunc = () => {\r\n        if(password !== passwordCheck){\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckFunc, [passwordCheck]);\r\n\r\n    //input재클릭 시 자동으로 전체선택 해주는 함수\r\n    const onfocusHandler = (event) => {\r\n        event.target.select();\r\n    };\r\n\r\n    //이메일 인증처리 함수\r\n    const emailSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(emailApiUrl, {\r\n            email: email,\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                alert(\"인증 메일을 보냈습니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = true;\r\n                setEmailAccept(true);\r\n            })\r\n            .catch((res)=> {\r\n                console.log(res);\r\n                alert(\"에러 발생 다시 시도해주십시오\");\r\n                document.querySelector(\"#emailInput\").select();\r\n            });\r\n    };\r\n\r\n    //회원가입 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '' || password === '' || passwordCheck === '' || nickname === '' || age === 0 || gender === ''){\r\n            alert(\"정보를 모두 입력해 주십시오.\")\r\n            return;\r\n        }\r\n        if(password !== passwordCheck) {\r\n            alert(\"비밀번호를 다시 확인해 주십시오.\");\r\n            return;\r\n        }\r\n        if(!emailAccept) {\r\n            alert(\"이메일 인증을 먼저 해주십시오.\");\r\n            return;\r\n        }\r\n        if(!passwordInvalid) { \r\n            alert(\"비밀번호의 조건을 맞춰주십시오.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(signUpApiUrl, {\r\n                email: email,\r\n                password: password,\r\n                nickname: nickname,\r\n                age: age,\r\n                gender: gender,\r\n                ageVisible: ageAgree,\r\n                genderVisible: genderAgree,\r\n        })\r\n        .then((res) => {\r\n            alert(\"회원가입 되셨습니다.\");\r\n            //즉시 로그인 Api호출\r\n            axios.post(loginApiUrl, {\r\n                email: email,\r\n                password: password,\r\n            })\r\n            .then((res) => {\r\n                login(res);\r\n            })\r\n            .catch((res) => {\r\n                alert(\"문제 발생. 다시 로그인 시도해주십시오.\");\r\n                toLoginPage();//로그인화면으로 이동\r\n            });\r\n        })\r\n        .catch((res) =>{\r\n            if(res.response.status === 400){\r\n                alert(\"이미 가입된 이메일입니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = false;\r\n                setEmailAccept(false);\r\n                document.querySelector(\"#emailInput\").select();\r\n            }\r\n            else{\r\n                alert(\"예상치 못한 문제가 발생했습니다.\");\r\n                console.log(res);\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <form className={Style.SignUpCover} onSubmit={submitHandler}>\r\n            {/* 이메일 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"emailInput\">\r\n                    Email\r\n                </label>\r\n            </div>\r\n            {/* 이메일 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"emailInput\"\r\n                            type=\"email\"\r\n                            className={Style.formInput}\r\n                            value={email}\r\n                            onChange={emailHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            type=\"button\"\r\n                            className={Style.emailButton}\r\n                            onClick={emailSubmitHandler}>\r\n                            인증\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 비밀번호 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordInput\">\r\n                    Password  \r\n                </label>\r\n                <p id=\"validPasswordColorWord\" className={Style.smallAlertWord}>  (8~16자리, 소문자, 특수문자를 하나이상 포함.)</p>\r\n            </div>\r\n            {/* 비밀번호 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={password}\r\n                    onChange={passwordHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 비밀번호 확인 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordCheckInput\">\r\n                    Password 확인\r\n                </label>\r\n            </div>\r\n            {/* 비밀번호 확인 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordCheckInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={passwordCheck}\r\n                    onChange={passwordCheckHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 닉네임 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"nicknameInput\">\r\n                    Nickname\r\n                </label>\r\n            </div>\r\n            {/* 닉네임 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"nicknameInput\"\r\n                    type=\"text\"\r\n                    className={Style.formInput}\r\n                    value={nickname}\r\n                    onChange={nicknameHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 나이 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"ageInput\">\r\n                    나이\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 나이 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageInput\"\r\n                            type=\"number\"\r\n                            className={Style.formInput}\r\n                            value={age}\r\n                            onChange={ageHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={ageAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 성별 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}>\r\n                    성별\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 성별 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.genderInputArea}>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"MALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"MALE\" className={Style.genderLabel}>남</label>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"FEMALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"FEMALE\" className={Style.genderLabel}>여</label>\r\n                            </div>\r\n                            <div />\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"genderAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={genderAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.btnArea}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            onClick={toLoginPage}\r\n                            type=\"button\"\r\n                            className={Style.cancelBtn}\r\n                            value=\"0\">\r\n                            취 소\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={Style.submitBtn}>\r\n                            가 입\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\timeCalculation.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\makeStringIntoArray.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\searchBar\\singleSearchList.js",["364"],[],"import Style from './searchBar.module.css';\r\n\r\nconst SingleSearchList = ({data, clickFunc}) => {\r\n    const mouseOverHandler = () => {\r\n        document.querySelector(`#cover_${data.userId}`).style.backgroundColor=\"rgb(190, 190, 190)\";\r\n    }\r\n    const mouseOutHandler = () => {\r\n        document.querySelector(`#cover_${data.userId}`).style.backgroundColor=\"white\";\r\n    }\r\n    return(\r\n        data.userId === -1 ?\r\n        <div id={`cover_${data.userId}`} className={Style.content} onMouseOver={mouseOverHandler} onMouseOut={mouseOutHandler} onClick={clickFunc}>\r\n            <div id={`image_${data.userId}`} className={Style.searchedUserImage} onClick={clickFunc}/>\r\n            <p id={`nickname_${data.userId}`} className={Style.searchedUserNickname} onClick={clickFunc}>{data.nickname}</p>\r\n        </div>\r\n        :\r\n        <div id={`cover_${data.userId}`} className={Style.content} onMouseOver={mouseOverHandler} onMouseOut={mouseOutHandler} onClick={clickFunc}>\r\n            <img id={`image_${data.userId}`} src={data.imgUrl} className={Style.searchedUserImage} onClick={clickFunc}/>\r\n            <p id={`nickname_${data.userId}`} className={Style.searchedUserNickname} onClick={clickFunc}>{data.nickname}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleSearchList;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\renderComment.js",["365","366","367","368"],[],"//댓글 영역을 띄우는 컴포넌트 - 계층상 2단계\r\n\r\nimport Style from './detailPage.module.css';\r\nimport heartImg from '../heart_outline.png';\r\nimport heartImgFill from '../heart_fill.png';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    likeThisPageUrl,\r\n    ReportUrl,\r\n    deleteCommentUrl,\r\n    unlikeThisPageUrl,\r\n    checkLikeUrl,\r\n    getCommentOFCommentNumberUrl,\r\n} from '../../../../apiUrl';\r\nimport { makeIntoArray } from '../../../../makeStringIntoArray';\r\nimport { getAxios, postAxios, deleteAxios } from '../../../../apiCall';\r\nimport { calculateTimeFrom } from '../../../../timeCalculation';\r\n\r\nimport ContentArea from '../contentArea/contentArea';\r\nimport RenderCommentOfComment from './renderCommentOfComment';\r\n\r\nconst RenderComment = ({data, pageId, lastComment, setCommentToWhom, refreshAccessToken, userId, setCommentStartId, setIsLastComment, setCommentList, setPageId, leftBookChangeHandler, COCAddedTriger, setCOCAddedTriger}) => {\r\n    const [loadCommentOfComment, setLoadCommentOfComment] = useState(0);//대댓글 켜는 버튼\r\n    const [CIsLiked, setCIsLiked] = useState(false);//댓글이 좋아요 된 상태인지\r\n    const [CLikeCount, setCLikeCount] = useState(0);//댓글 좋아요 개수\r\n    const [commentContentArray, setCommentContentArray] = useState([]);//실제로 출력할 내용이다.\r\n    const [COCCount, setCOCCount] = useState(0);//대댓글의 개수\r\n\r\n    //초기 실행할 내용\r\n    useEffect(() => {\r\n        setCOCCount(data.nestedCommentCount);//초기에 대댓글의 수를 넣어둔다.\r\n        setCommentContentArray(makeIntoArray(data.content));//내용도 배열로 만든다.\r\n        presetLikeorNot();\r\n    }, []);\r\n\r\n    const getCOCCount = async (pid, cid) => {//pageId와 commentId를 넣어서 COCCount를 업데이트 하는 함수\r\n        const res = await getAxios(`${getCommentOFCommentNumberUrl}/${pid}/comment/${cid}/count`, {}, refreshAccessToken);\r\n        setCOCCount(res.data.data.count);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(COCAddedTriger !== data.commentId) return;//해당되지 않는 경우 실행 X\r\n        getCOCCount(pageId, COCAddedTriger);//개수 불러오기\r\n        setCOCAddedTriger(-1);\r\n    }, [COCAddedTriger]);\r\n\r\n    //대댓글을 켜는 함수\r\n    const onLoadCommentOfCommentClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.innerText === \"답글 닫기\"){\r\n            event.target.innerText = `답글 (${COCCount})개`;\r\n        }\r\n        else{\r\n            event.target.innerText = \"답글 닫기\";\r\n        }\r\n        setLoadCommentOfComment(Number(data.group));\r\n    };\r\n\r\n    //신고 클릭함수 \r\n    const reportClickHandler = async () => {\r\n        if(window.confirm(\"정말 신고하시겠습니까?\")){//다시 한 번 물어보고 실행\r\n            const sendBody = {\r\n                targetId: data.commentId,\r\n                type: \"COMMENT\",\r\n            };\r\n            await postAxios(ReportUrl, sendBody, {}, refreshAccessToken);\r\n            alert(\"신고가 접수되었습니다.\");\r\n        }\r\n    }\r\n\r\n    //삭제 클릭 함수\r\n    const deleteClickHandler = async () => {\r\n        if(window.confirm(\"정말 삭제하시겠습니까?\")){\r\n            await deleteAxios(`${deleteCommentUrl}${pageId}/comment/${data.commentId}`, {}, refreshAccessToken);\r\n            alert(\"삭제되었습니다.\");\r\n            setCommentStartId(0);//다시 로드되도록 초기값으로 설정\r\n            setIsLastComment(false);//원활한 로드를 위해 설정\r\n            setCommentList([]);//지금까지 로드된 댓글 지우기\r\n        }\r\n    };\r\n\r\n    //댓글에 유저 클릭 함수\r\n    const commentUserClickHandler = () => {\r\n        setPageId(-1);//현재 페이지에서 나감\r\n        leftBookChangeHandler(`pList/${data.userDto.userId}`);//해당 유저의 페이지로 이동\r\n    };\r\n\r\n    /*************************상위 요소 전달용 함수들*****************************/\r\n    //댓글에 대댓글을 달 수 있도록 변경하는 함수\r\n    const changeCommentToComment = (event) => {\r\n        event.preventDefault();\r\n        setCommentToWhom([\"c\", data.group, data.userDto.nickname, data.commentId]);\r\n    };\r\n\r\n    /********************************좋아요 관련************************************/\r\n    //먼저 댓글이 로드될 때마다 해당 댓글에 좋아요를 눌렀었는지 반영해야한다.\r\n    const presetLikeorNot = async () => {\r\n        setCLikeCount(data.likeCount);\r\n        const res = await getAxios(`${checkLikeUrl}?targetId=${data.commentId}&type=COMMENT`, {}, refreshAccessToken);\r\n        setCIsLiked(res.data.data.like);\r\n    }\r\n\r\n    //좋아요 클릭 handler\r\n    const CommentLikeClickHandler = async () => {\r\n        let url = \"\"\r\n        CIsLiked ? url = unlikeThisPageUrl : url = likeThisPageUrl\r\n\r\n        const sendBody = {\r\n            targetId: data.commentId,\r\n            type: \"COMMENT\"\r\n        };\r\n        await postAxios(url, sendBody, {}, refreshAccessToken);\r\n        CIsLiked ? setCLikeCount(cur => cur - 1) : setCLikeCount(cur => cur + 1) //임시로라도 반영\r\n        setCIsLiked((cur) => !cur);\r\n        console.log(\"페이지에 좋아요혹은 좋아요 취소했습니다.\");\r\n    };\r\n\r\n    return(\r\n            <div className={Style.singleCommentArea} ref={lastComment}>\r\n                <div className={Style.CommentBox} style={{width:\"100%\"}}>\r\n                    <div className={Style.CommentProfileArea}>\r\n                        <img src={data.userDto.imgUrl} className={Style.UserImage} onClick={commentUserClickHandler}/>\r\n                        <p className={Style.UserNickname} onClick={commentUserClickHandler}>{data.userDto.nickname}</p>\r\n                    </div>\r\n                    <div className={Style.commentTextArea} style={{cursor: \"pointer\"}} onClick={changeCommentToComment}>\r\n                        {\r\n                            commentContentArray.map((d, index) => (\r\n                                <ContentArea data={d} key={index} />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div className={Style.likeTimeArea}>\r\n                        <div className={Style.cover}>\r\n                            <img src={CIsLiked ? heartImgFill : heartImg} className={Style.buttonImg} onClick={CommentLikeClickHandler}/>\r\n                            <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>{`좋아요 ${CLikeCount}개`}</p>\r\n                            {\r\n                                COCCount === 0 ?\r\n                                null : <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>|</p>\r\n                            }\r\n                            {\r\n                                COCCount === 0 ?\r\n                                null : <p className={Style.likeandCommentCount} onClick={onLoadCommentOfCommentClickHandler} id={`comment_${data.group}`}>{`답글 (${COCCount})개`}</p>\r\n                            }\r\n                            <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>|</p>\r\n                            {\r\n                                userId === data.userDto.userId ?\r\n                                /* 내 댓글인 경우 수정, 삭제 가능 */\r\n                                <p className={Style.likeandCommentCount} onClick={deleteClickHandler}>댓글 삭제</p>\r\n                                :\r\n                                /* 남의 댓글인 경우 신고 가능 */\r\n                                <p className={Style.likeandCommentCount} onClick={reportClickHandler}>댓글 신고하기</p>\r\n                            }\r\n                        </div>\r\n                        <p className={Style.time}>{calculateTimeFrom(data.createdDate)}</p>\r\n                    </div>\r\n                </div>\r\n                <RenderCommentOfComment \r\n                    pageId={pageId} \r\n                    groupId={data.group}\r\n                    commentId={data.commentId}\r\n                    getCOCCount={getCOCCount}\r\n                    setLoadCommentOfComment={setLoadCommentOfComment} \r\n                    loadCommentOfComment={loadCommentOfComment} \r\n                    refreshAccessToken={refreshAccessToken} \r\n                    reportClickHandler={reportClickHandler} \r\n                    userId={userId} \r\n                    deleteClickHandler={deleteClickHandler}\r\n                    leftBookChangeHandler={leftBookChangeHandler}\r\n                    setPageId={setPageId}\r\n                />\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default RenderComment;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\contentArea\\contentArea.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\singlePage.js",["369"],[],"import Style from './pageList.module.css';\r\n\r\nconst SinglePage = ({data, setPageId, lastPageInUserPage}) => {\r\n  const singlePageClickHandler = (event) => {\r\n    event.preventDefault();\r\n    setPageId(event.target.id);\r\n  };\r\n\r\n  return(\r\n    <img src={data.imgUrl} className={Style.singlePage} id={data.pageId} onClick={singlePageClickHandler} ref={lastPageInUserPage}/>\r\n  );\r\n};\r\n\r\nexport default SinglePage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\singlePage.js",["370","371","372","373"],[],"import { useState, useEffect } from 'react';\r\nimport ContentArea from '../../root/contentArea/contentArea';\r\nimport heartBtn from './heart_outline.png';\r\nimport heartFillBtn from './heart_fill.png';\r\nimport Style from './page.module.css';\r\nimport {\r\n    likeThisPageUrl,\r\n    unlikeThisPageUrl,\r\n} from \"../../../../apiUrl\";\r\nimport { postAxios } from '../../../../apiCall';\r\nimport { makeIntoArray } from \"../../../../makeStringIntoArray\";\r\n\r\nimport ImageArea from \"./imageArea\";\r\n\r\nconst SinglePage = ({data, lastPage, index, setPageId, setLeftBookState, refreshAccessToken, detailPageLikeClick, setDetailPageLikeClick}) => {\r\n  const [isLiked, setIsLiked] = useState(false);//좋아요 여부\r\n  const [likeCount, setLikeCount] = useState(0);//좋아요 개수\r\n  const [contentArray, setContentArray] = useState([]);\r\n\r\n  const pageClickFunc = () => {\r\n      setPageId(data.pageDto.pageId);\r\n  };\r\n\r\n  const userProfileClickHandler = () => {\r\n      setLeftBookState(`pList/${data.pageDto.userDto.userId}`);\r\n  };\r\n\r\n  //좋아요 초기 설정\r\n  useEffect(() => {\r\n      setLikeCount(data.pageDto.likeCount);//좋아요 개수 불러오기\r\n      setIsLiked(data.like);//좋아요 여부 불러오기\r\n      setContentArray(makeIntoArray(data.pageDto.content));//받은 글을 객체로 변경\r\n  }, [])\r\n\r\n  //좋아요 클릭 handler\r\n  const likeClickHandler = async () => {\r\n      let url = \"\"\r\n      isLiked ? url = unlikeThisPageUrl : url = likeThisPageUrl\r\n\r\n      const sendBody = {\r\n        targetId: data.pageDto.pageId,\r\n        type: \"PAGE\"\r\n      }\r\n\r\n      await postAxios(url, sendBody, {}, refreshAccessToken);\r\n      isLiked ? setLikeCount(cur => cur - 1) : setLikeCount(cur => cur + 1) //임시로 반영\r\n      setIsLiked((cur) => !cur);\r\n  };\r\n\r\n  //detailpage에서 클릭 시 어떤 페이지를 클릭했는지 확인하고, 그 페이지의 좋아요 여부를 반영 - api호출은 이미 했으므로 할 필요 없다.\r\n  useEffect(() => {\r\n      if(detailPageLikeClick !== data.pageDto.pageId) return;//초기 상황도 -1이므로 동시에 잡을 수 있다.\r\n\r\n      isLiked ? setLikeCount(cur => cur - 1) : setLikeCount(cur => cur + 1) //임시로라도 반영\r\n      setIsLiked((cur) => !cur);\r\n      console.log(\"detailpage에서 클릭한 여부를 반영했습니다.\");\r\n      setDetailPageLikeClick(-1);//다시 초기화한다.\r\n\r\n  }, [detailPageLikeClick]);\r\n\r\n  return(\r\n      <div className={Style.singlePageCover} ref={lastPage}>\r\n          {/* 프로필 영역 */}\r\n          <div className={Style.profileArea}>\r\n              <div className={Style.flexBoxCenter}>\r\n                  <img src={data.pageDto.userDto.imgUrl} className={Style.profileImage} onClick={userProfileClickHandler}/>\r\n              </div>\r\n              <div className={Style.flexBoxStart}>\r\n                  <p className={Style.profileNickname} onClick={userProfileClickHandler}>{data.pageDto.userDto.nickname}</p>\r\n              </div>\r\n          </div>\r\n          {/* 이미지 영역 */}\r\n          <ImageArea imgList={data.imgUrlList} pageIndex={index} pageClickFunc={pageClickFunc}/>\r\n          {/* 아래 좋아요랑 글 영역 */}\r\n          <div className={Style.pageLikeAndContentArea}>\r\n              <div className={Style.pagelikearea}>\r\n                  <img src={isLiked ? heartFillBtn : heartBtn} className={Style.pageLikeBtn} onClick={likeClickHandler}/>\r\n                  <p style={{margin: \"0\"}}>{data.pageDto.likeReadAuth ? `좋아요 ${likeCount} 개` : `좋아요 여러 개`}</p>\r\n              </div>\r\n              <div className={Style.pageContentArea} onClick={pageClickFunc}>\r\n                  {\r\n                      contentArray.map((d, index) => (\r\n                          <ContentArea data={d} key={index}/>\r\n                      ))\r\n                  }\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SinglePage;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\pageList\\singleUser.js",["374"],[],"import Style from './pageList.module.css';\r\n\r\nconst SingleUser = ({data, leftBookChangeHandler}) => {\r\n  const userClickHander = (event) => {\r\n      event.preventDefault();\r\n      leftBookChangeHandler(\"pList/\" + event.target.id.split('_')[1]);\r\n  };\r\n\r\n  return(\r\n    <div className={Style.userArea} onClick={userClickHander} id={`pageListUserId_${data.userId}`}>\r\n        <img src={data.imgUrl} className={Style.userImg} id={`pageListUserId_${data.userId}`}/>\r\n        <p className={Style.userNickname} id={`pageListUserId_${data.userId}`}>{data.nickname}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleUser;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\chat\\singleChat.js",["375"],[],"import Style from './chat.module.css';\r\nimport { chatCalculateTimeFrom } from '../../../../timeCalculation';\r\n\r\nconst SingleChat = ({data, setLeftBookState, userId, userAndUserImg, userAndUserNickname, oldestChat}) => {\r\n  //유저의 이미지나 이름을 클릭하면 해당 유저의 페이지로 이동한다.\r\n  const goToThatUserPage = (event) => {\r\n      event.preventDefault();\r\n      setLeftBookState(`pList/${data.userId}`);\r\n  };\r\n\r\n  return(\r\n      <div className={userId !== data.userId ? Style.singleOtherChattingArea : Style.singleMyChattingArea} ref={oldestChat}>            \r\n          {/* 유저의 프로필 이미지가 오는 곳 */\r\n              userId !== data.userId ?\r\n             <img src={userAndUserImg[data.userId]} className={Style.chatUserimg} onClick={goToThatUserPage}/> : null\r\n          }\r\n          <div className={Style.userchatFlexBox}>\r\n              {/* 유저의 이름이 오는 곳 */\r\n                  userId !== data.userId ?\r\n                  <p className={Style.chatuserName} onClick={goToThatUserPage}>{userAndUserNickname[data.userId]}</p> : null\r\n              }\r\n              {/* 유저의 채팅 내용이 오는 곳 */}\r\n              <div className={Style.chattingText} style={userId !== data.userId ? null : {backgroundColor: \"#F4DEDE\"}}>{data.message}</div>\r\n              <p className={Style.chatTime}>{chatCalculateTimeFrom(data.createdDate)}</p>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SingleChat;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\ImageValidCheck.js",["376","377"],[],"//받은 파일리스트가 유효한지 검사하는 함수\r\nexport const ImageValid = (data, existingArray) => {\r\n  let answer = true;\r\n\r\n  //받은 input들에 대해서 이미지 여부, 용량 여부(5메가 이하),\r\n  data.map((d) => {\r\n      if(!(d.type === 'image/png' || d.type === 'image/jpg' || d.type === 'image/jpeg')){\r\n          alert(`이미지 파일만 업로드 가능합니다.\\n${d.name}`);\r\n          answer = false;\r\n      }\r\n      if(d.size > 1024 * 1024 * 10){\r\n          alert(`10MB 이상의 이미지는 업로드 불가합니다.\\n${d.name}`);\r\n          answer = false;\r\n      }\r\n      existingArray.map((cd) => {\r\n          if(cd.name === d.name){\r\n              alert(`같은 이름의 파일이 이미 업로드 되어있습니다.\\n${d.name}`);\r\n              answer = false;\r\n          }\r\n      });\r\n  });\r\n\r\n  return answer;\r\n};","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js",["378","379","380","381","382","383"],[],"import {useState, useEffect} from 'react';\r\nimport Style from './profileSetting.module.css';\r\nimport {\r\n    getcurrentProfileUrl,\r\n    submitProfileSettingUrl,\r\n    uploadImageUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from '../../../../apiCall';\r\n\r\nconst ProfileSetting = ({refreshAccessToken, setChatAndFriendReloadTriger, rightBookState}) => {\r\n    //api에 보낼 내용 + input에 반영해야하므로 useState로 선언\r\n    const [ps_userImage, setPs_UserImage] = useState(null);//백엔드에서 받아온 기존의 이미지 정보\r\n    const [ps_userImageSend, setPs_userImageSend] = useState(null);//유저가 변경한 이미지의 파일 정보\r\n    const [ps_userName, setPs_UserName] = useState(\"\");//유저의 닉네임\r\n    const [ps_userAge, setPs_UserAge] = useState(\"\");//유저의 나이\r\n    const [ps_userAgeVisible, setPs_UserAgeVisible] = useState(\"\");//유저의 나이 공개 여부\r\n    const [ps_userGender, setPs_userGender] = useState(\"\");//유저의 성별\r\n    const [ps_userGenderVisible, setPs_UserGenderVisible] = useState(\"\");//유저의 성별 공개 여부\r\n    const [ps_userIntroduce, setPs_UserIntroduce] = useState(\"\");//유저의 자기 소개\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //공개 여부 인지 후 색상 변경 함수\r\n    const ageVisibleBtnChangeHandler = (event) => {\r\n        if(loading) return;\r\n        if(ps_userAgeVisible){//나이가 공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(ageVisibleBtnChangeHandler, [ps_userAgeVisible]);\r\n\r\n    const genderVisibleBtnChangeHandler = (event) => {\r\n        if(loading) return;\r\n        if(ps_userGenderVisible){//성별이 공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(genderVisibleBtnChangeHandler, [ps_userGenderVisible]);\r\n\r\n    //초기 상태 명시용 함수\r\n    const profileSettingPreset = async () => {\r\n        const res = await getAxios(getcurrentProfileUrl, {}, refreshAccessToken);\r\n        setPs_UserImage(res.data.data.imgUrl);//url이 string의 형태로 들어온다.\r\n        setPs_UserName(res.data.data.nickname);//이름 설정 - api upload\r\n        setPs_UserAge(res.data.data.age);//나이 설정\r\n        setPs_UserAgeVisible(res.data.data.ageVisible);//나이 공개\r\n        setPs_userGender(res.data.data.gender);//성별 설정\r\n        setPs_UserGenderVisible(res.data.data.genderVisible);//성별 공개\r\n        setPs_UserIntroduce(res.data.data.selfIntroduction);\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {profileSettingPreset();}, []);\r\n\r\n    //submit함수 - 3개가 순차적으로 call된다. 1.제출 클릭했으므로 스타일 변경 / 이미지 처리 / 실제 제출 후 스타일 변경\r\n    const [userProfileUploaded, setUserProfileuploaded] = useState(null);\r\n    const [profileSubmitClicked, setProfileSubmitClicked] = useState(false);//제출 클릭을 기억한다.\r\n\r\n    const submitAbleAgain = () => {\r\n        setProfileSubmitClicked(false);\r\n        const btn = document.querySelector('#profileSubmitBtn');\r\n        btn.innerHTML = '수정';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const profileSettingSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(profileSubmitClicked) return;//이미 submit중이면 실행하지 않는다.\r\n\r\n        setProfileSubmitClicked(true);\r\n        const btn = document.querySelector('#profileSubmitBtn');\r\n        btn.innerHTML = '제출중';\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const profileSettingSubmitHandlerSecondAct = async () => {\r\n        if(!profileSubmitClicked) return;//초기상황에 자동종료+ true->false에서의 실행을 막는다.\r\n\r\n        if(ps_userImageSend === null){//사용자 지정 없이 그냥 제출한 경우\r\n            setUserProfileuploaded(ps_userImage);//지금꺼 그대로 적용\r\n            return;\r\n        }\r\n        const fileData = new FormData();\r\n        console.log(ps_userImageSend);\r\n        fileData.append('file', ps_userImageSend);\r\n\r\n        const res = await postAxios(`${uploadImageUrl}profile`, fileData, {\r\n            headers:{\r\n            'Content-Type': 'multipart/form-data',\r\n            }\r\n        }, refreshAccessToken);\r\n        setUserProfileuploaded(res.data[0]);\r\n    };\r\n    useEffect(() => {profileSettingSubmitHandlerSecondAct();}, [profileSubmitClicked]);\r\n\r\n    const profileSettingSubmitHandlerThirdAct = async () => {\r\n        if(userProfileUploaded !== null){//초기상황에 자동종료\r\n            const sendBody = {\r\n                nickname: ps_userName,\r\n                age: ps_userAge,\r\n                gender: ps_userGender,\r\n                ageVisible: ps_userAgeVisible,\r\n                genderVisible:ps_userGenderVisible,\r\n                imgUrl: userProfileUploaded,\r\n                selfIntroduction: ps_userIntroduce,\r\n            };\r\n\r\n            await postAxios(submitProfileSettingUrl, sendBody, {}, refreshAccessToken);\r\n            alert(\"설정을 변경했습니다.\");\r\n            profileSettingPreset();//설정 다시 불러오기\r\n            //아래는 초기화\r\n            setPs_userImageSend(null);\r\n            setUserProfileuploaded(null);\r\n            submitAbleAgain();//다시 제출 가능 상태로\r\n            if(rightBookState === \"chat\" || rightBookState === \"friend\"){\r\n                setChatAndFriendReloadTriger(true);\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {profileSettingSubmitHandlerThirdAct()}, [userProfileUploaded]);\r\n\r\n    //이미지 변경 함수 - ps_nextUserImage를 바꾸고 받아온 이미지를 처리 한다.\r\n    const profileImageChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        const inputImage = event.target.files[0];\r\n        setPs_userImageSend(inputImage);//파일 자체를 집어넣는다.\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(inputImage);\r\n        reader.onload = (imageData) => {\r\n            setPs_UserImage(imageData.target.result);//파일의 미리보기를 생성해서 집어넣는다.\r\n        }\r\n    };\r\n\r\n    //값 변경 함수\r\n    const nicknameChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserName(event.target.value);\r\n    };\r\n    const ageChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAge(event.target.value);\r\n    };\r\n    const selfIntroductionChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserIntroduce(event.target.value);\r\n    };\r\n    \r\n    //공개여부 변경 함수\r\n    const ageVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAgeVisible((cur) => !cur);\r\n    };\r\n\r\n    const genderVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserGenderVisible((cur) => !cur);\r\n    };\r\n\r\n\r\n    return(\r\n        loading? null :\r\n        <form className={Style.profileSettingCover} onSubmit={profileSettingSubmitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.MyprofileExample}>\r\n                    <div className={Style.Cover}>\r\n                        <label htmlFor='UserProfileImage'>\r\n                            <img src={ps_userImage} className={Style.myprofileImage}/>\r\n                        </label>\r\n                        <input \r\n                            type=\"file\"\r\n                            onChange={profileImageChangeHandler}\r\n                            className={Style.myprofileImageInput}\r\n                            id=\"UserProfileImage\"\r\n                            accept=\"image/*\"\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.myprofileNickname}>{ps_userName}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.profileSettingDetail}>\r\n                    {/* 닉네임 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingUserName\"\r\n                            className={Style.profileSettingLabel}>\r\n                            사용자 이름\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingUserName\"\r\n                            type=\"text\"\r\n                            maxLength={20}\r\n                            value={ps_userName}\r\n                            onChange={nicknameChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div />\r\n                    {/* 나이 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingAge\"\r\n                            className={Style.profileSettingLabel}>\r\n                            나이\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"profileSettingAge\"\r\n                            type=\"number\"\r\n                            value={ps_userAge}\r\n                            onChange={ageChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"ageVisibleBtn\"\r\n                            onClick={ageVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 성별 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.profileSettingLabel}>\r\n                            성별\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        {\r\n                            ps_userGender === \"MALE\" ?\r\n                            <input type=\"text\" value=\"남\" className={Style.profileSettingInput} readOnly />\r\n                            :\r\n                            <input type=\"text\" value=\"여\" className={Style.profileSettingInput} readOnly />\r\n                        }\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"genderVisibleBtn\"\r\n                            onClick={genderVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 자기소개 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"profileSettingIntroduce\"\r\n                            className={Style.profileSettingLabel}>\r\n                            자기소개\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <textarea \r\n                            id=\"profileSettingIntroduce\"\r\n                            type=\"text\"\r\n                            maxLength={120}\r\n                            value={ps_userIntroduce}\r\n                            onChange={selfIntroductionChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                            style={{resize: \"none\", height: \"70%\"}}/>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.submitButton}\r\n                    id=\"profileSubmitBtn\"\r\n                    type=\"submit\">\r\n                    수정\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js",["384","385","386","387","388","389","390","391"],[],"import Style from './filteringSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentfilterSetting,\r\n    getCurrentNotFilteredUserUrl,\r\n    submitFilteringSetting,\r\n    addNotFilteredUserUrl,\r\n    deleteNotFilteredUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from '../../../../apiCall';\r\n\r\nconst FilteringSetting = ({refreshAccessToken, userId}) => {\r\n    const [filterAll, setFilterAll] = useState(\"\");\r\n    const [filterFollowee, setFilterFollowee] = useState(\"\");\r\n\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//예외로 설정된 사람들\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //필터링 설정 정보 가져오기\r\n    const gettingCurrentFilterSetting = async () => {\r\n        const res = await getAxios(getCurrentfilterSetting, {}, refreshAccessToken);\r\n        setFilterAll(res.data.data.filterAll);\r\n        setFilterFollowee(res.data.data.filterFollowee);\r\n    };\r\n\r\n    //필터링 하지 않을 유저 정보 가져오기\r\n    const gettingCurrentNotFilteredUser = async () => {\r\n        const res = await getAxios(getCurrentNotFilteredUserUrl, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data];\r\n        setAddedUserList(tmp);\r\n        setSearchedUserList([]);\r\n    };\r\n\r\n    //초기 설정 함수\r\n    const presetFilteringSetting = async () => {\r\n        gettingCurrentFilterSetting();\r\n        gettingCurrentNotFilteredUser();\r\n    };\r\n\r\n    useEffect(() => {presetFilteringSetting(); setLoading(false);}, []);\r\n\r\n    /* 상단 내용 */\r\n\r\n    //정보에 따라 스타일 변경해주는 함수\r\n    const filterAllStyleHandler = () => {\r\n        if(loading) return;\r\n        if(filterAll){\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterAllStyleHandler, [filterAll]);\r\n\r\n    const filterFolloweeStyleHandler = () => {\r\n        if(loading) return;\r\n        if(filterFollowee){\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterFolloweeStyleHandler, [filterFollowee]);\r\n\r\n    //input 클릭 handler\r\n    const filterAllClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterAll((cur) => !cur);\r\n    };\r\n\r\n    const filterFolloweeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterFollowee((cur) => !cur);\r\n    };\r\n\r\n    //설정 submit handler\r\n    const [filterringSubmitClicked, setFilteringSubmitClicked] = useState(false);\r\n\r\n    const submitAbleAgain = () => {\r\n        setFilteringSubmitClicked(false);\r\n        const btn = document.querySelector('#filteringSubmitBtn');\r\n        btn.innerHTML = '제출';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const settingSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(filterringSubmitClicked) return;//이미 실행중이면 실행X\r\n\r\n        setFilteringSubmitClicked(true);\r\n        const btn = document.querySelector('#filteringSubmitBtn');\r\n        btn.innerHTML = \"제출중\";\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const settingSubmitHandlerSecondAct = async () => {\r\n        if(!filterringSubmitClicked) return;\r\n\r\n        const sendBody = {\r\n            filterAll: filterAll,\r\n            filterFollowee: filterFollowee,\r\n        };\r\n        await postAxios(submitFilteringSetting, sendBody, {}, refreshAccessToken);\r\n        alert(\"설정을 변경했습니다.\");\r\n        submitAbleAgain();\r\n    }\r\n    useEffect(() => {settingSubmitHandlerSecondAct();}, [filterringSubmitClicked])\r\n\r\n    /* 하단 내용 */\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        const sendBody = {\r\n            userId: event.target.id,\r\n        };\r\n        await postAxios(addNotFilteredUserUrl, sendBody, {}, refreshAccessToken);\r\n        await gettingCurrentNotFilteredUser();\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        const sendBody = {\r\n            userId: event.target.id,\r\n        };\r\n        await postAxios(deleteNotFilteredUserUrl, sendBody, {}, refreshAccessToken);\r\n        const tmp = [...AddedUserList];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setAddedUserList(tmp);\r\n        setSearchedUserList([]);\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    }\r\n\r\n    //유저 검색 함수\r\n    const searchHandler = async (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        const res = await getAxios(`${searchUserUrl}${userInput}`, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data]\r\n        const withoutMe = tmp.filter((d) => d.userId !== userId);//tmp중에서 나 자신은 리스트에 뜨면 안된다. 내가 없는 검색된 리스트\r\n\r\n        //이제 검색된 리스트에서 기존에 추가되어있던 유저들은 검색되지 않아야한다.\r\n        const JSONWithoutMeList = withoutMe.map(d => JSON.stringify(d));\r\n        const JSONAlreadyAddedList = AddedUserList.map(d => JSON.stringify(d));\r\n        const JSONFriendList = JSONWithoutMeList.filter(x => !JSONAlreadyAddedList.includes(x));\r\n        setSearchedUserList(JSONFriendList.map(d => JSON.parse(d)));\r\n    };\r\n\r\n    return(\r\n        loading ? null :\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.filterSettingArea} onSubmit={settingSubmitHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>전체 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllAllow\" onClick={filterAllClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllDenial\" onClick={filterAllClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>팔로우 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeAllow\" onClick={filterFolloweeClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeDenial\" onClick={filterFolloweeClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button id=\"filteringSubmitBtn\" type=\"submit\" className={Style.submitBtn}>제출</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.searchLabel}\r\n                            htmlFor=\"userIdInput\">\r\n                            필터링 하지 않을 사용자 추가\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"userIdInput\"\r\n                            placeholder='닉네임을 입력하세요'\r\n                            className={Style.searchInput}\r\n                            value={userInput}\r\n                            onChange={userInputChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover} style={{overflow: \"auto\"}}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                searchedUserList.map((person, index) => (\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover} style={{overflow: \"auto\"}}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                AddedUserList.map((person, index) => (\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilteringSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\withdrawalSetting.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js",["392"],[],"import Style from './credit.module.css';\r\nimport HongikLogo from './datafile/Logo_of_hongik_university.jpg';\r\n\r\nconst Person = ({name, email, github}) => {\r\n    return(\r\n        <div className={Style.personArea}>\r\n            <p className={Style.name}>{name}</p>\r\n            <p className={Style.email}>{email}</p>\r\n            <a className={Style.github} href={github}>{github}</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Credit = () => {\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <img src={HongikLogo} className={Style.HongikLogo} />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.creditArea}>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711093 / 성의현\" email=\"luckhome1020@gmail.com\" github=\"https://github.com/SungIII\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711142 / 이종찬\" email=\"reljacer@gmail.com\" github=\"https://github.com/Lipeya\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711163 / 임채민\" email=\"chemin9898@gmail.com\" github=\"https://github.com/lacram\" />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Credit;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js",["393","394","395","396","397","398","399"],[],"import { useState, useEffect } from 'react';\r\nimport Style from './noticeSetting.module.css';\r\nimport {\r\n    getCurrentNoticeSettingUrl,\r\n    submitCurrentNoticeSettingUrl,\r\n} from \"../../../../apiUrl\";\r\nimport { getAxios, postAxios } from '../../../../apiCall';\r\n\r\nconst NoticeSetting = ({refreshAccessToken}) => {\r\n    //설정들\r\n    const [notificationFollow, setNotificationFollow] = useState(\"\");\r\n    const [notificationComment, setNotificationComment] = useState(\"\");\r\n    const [notificationLike, setNotificationLike] = useState(\"\");\r\n    const [notificationFollowAccept, setNotificationFollowAccept] = useState(\"\");\r\n    const [notificationChat, setNotificationChat] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //처음에 설정현황을 불러오는 함수\r\n    const noticeSettingPreset = async () => {\r\n        const res = await getAxios(getCurrentNoticeSettingUrl, {}, refreshAccessToken);\r\n        setNotificationFollow(res.data.data.notificationFollow);\r\n        setNotificationComment(res.data.data.notificationComment)\r\n        setNotificationLike(res.data.data.notificationLike);\r\n        setNotificationFollowAccept(res.data.data.notificationFollowAccept);\r\n        setNotificationChat(res.data.data.notificationChat);\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {noticeSettingPreset();}, []);\r\n\r\n    //submit function\r\n    const [noticeSubmitClicked, setNoticeSubmitClicked] = useState(false);//제출 상태 확인\r\n    \r\n    const submitAbleAgain = () => {\r\n        setNoticeSubmitClicked(false);\r\n        const btn = document.querySelector('#noticeSubmitBtn');\r\n        btn.innerHTML = '제출';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(noticeSubmitClicked) return;\r\n\r\n        setNoticeSubmitClicked(true);\r\n        const btn = document.querySelector('#noticeSubmitBtn');\r\n        btn.innerHTML = \"제출중\";\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const submitHandlerSecondAct = async () => {\r\n        if(!noticeSubmitClicked) return;\r\n\r\n        const sendBody = {\r\n            notificationFollow: notificationFollow,\r\n            notificationComment: notificationComment,\r\n            notificationLike: notificationLike,\r\n            notificationFollowAccept: notificationFollowAccept,\r\n            notificationChat: notificationChat,\r\n        };\r\n        await postAxios(submitCurrentNoticeSettingUrl, sendBody, {}, refreshAccessToken);\r\n        alert(\"설정을 변경했습니다.\");\r\n        noticeSettingPreset();//초기값 다시 불러오기\r\n        submitAbleAgain();//다시 제출 가능하게 하기\r\n    };\r\n    useEffect(() => {submitHandlerSecondAct();}, [noticeSubmitClicked]);\r\n\r\n    //각 설정 클릭시 handler\r\n    const notificationFollowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollow((cur) => !cur);\r\n    };\r\n    const notificationCommentClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationCommentAll\"){\r\n            setNotificationComment(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationCommentFollowOnly\"){\r\n            setNotificationComment(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationComment(\"NONE\");\r\n        }\r\n    };\r\n    const notificationLikeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationLikeAll\"){\r\n            setNotificationLike(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationLikeFollowOnly\"){\r\n            setNotificationLike(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationLike(\"NONE\");\r\n        }\r\n    };\r\n    const notificationFollowAcceptClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollowAccept((cur) => !cur);\r\n    };\r\n    const notificationChatClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationChat((cur) => !cur);\r\n    };\r\n\r\n    //각 요소 스타일 변경 handler\r\n    const notificationFollowStyleChanger = () => {\r\n        if(loading) return;\r\n        if(notificationFollow){\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowStyleChanger, [notificationFollow]);\r\n\r\n    const notificationCommentStyleChanger = () => {\r\n        if(loading) return;\r\n        if(notificationComment === \"ALL\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationComment === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationCommentStyleChanger, [notificationComment]);\r\n\r\n    const notificationLikeStyleChanger = () => {\r\n        if(loading) return;\r\n        if(notificationLike === \"ALL\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationLike === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else {\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationLikeStyleChanger, [notificationLike]);\r\n\r\n    const notificationFollowAcceptStyleChanger = () => {\r\n        if(loading) return;\r\n        if(notificationFollowAccept){\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowAcceptStyleChanger, [notificationFollowAccept]);\r\n\r\n    const notificationChatStyleChanger = () => {\r\n        if(loading) return;\r\n        if(notificationChat){\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationChatStyleChanger, [notificationChat]);\r\n\r\n\r\n    return(\r\n        loading ? null :\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>팔로우알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowTrue\" onClick={notificationFollowClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowFalse\" onClick={notificationFollowClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 댓글 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentAll\" onClick={notificationCommentClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentFollowOnly\" onClick={notificationCommentClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentNone\" onClick={notificationCommentClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 글 좋아요 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeAll\" onClick={notificationLikeClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeFollowOnly\" onClick={notificationLikeClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeNone\" onClick={notificationLikeClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>상대의 팔로우 수락</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptTrue\" onClick={notificationFollowAcceptClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptFalse\" onClick={notificationFollowAcceptClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>채팅 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatTrue\" onClick={notificationChatClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatFalse\" onClick={notificationChatClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button id=\"noticeSubmitBtn\" type=\"submit\" className={Style.submitBtn}>제출</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NoticeSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js",["400","401"],[],"import Style from './passwordSetting.module.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {\r\n    passwordCheck,\r\n    passwordChangeUrl\r\n} from '../../../../apiUrl';\r\nimport { postAxios } from '../../../../apiCall';\r\n\r\nconst PasswordSetting = ({refreshAccessToken}) => {\r\n    //useState 선언\r\n    const [previousPassword, setPreviousPassword] = useState(\"\");\r\n    const [passwordChange, setPasswordChange] = useState(\"\");\r\n    const [passwordChangeCheck, setPasswordChangeCheck] = useState(\"\");\r\n    const [passwordCondition, setPasswordCondition] = useState(false);//조건 확인\r\n\r\n    //비밀번호 변경 함수\r\n    const previousPasswordChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPreviousPassword(event.target.value);\r\n    };\r\n    const passwordChangeChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChange(event.target.value);\r\n        setPasswordChangeCheck(\"\");\r\n    };\r\n    const passwordChangeCheckChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChangeCheck(event.target.value);\r\n    };\r\n\r\n    //submit handler\r\n    const [passwordSubmitClicked, setPasswordSubmitClicked] = useState(false);\r\n\r\n    const submitAbleAgain = () => {\r\n        setPasswordSubmitClicked(false);\r\n        const btn = document.querySelector('#passwordSubmitBtn');\r\n        btn.innerHTML = '수정';\r\n        btn.style.color = 'white';\r\n        btn.style.backgroundColor = '#F4DEDE';\r\n        btn.style.cursor = 'pointer';\r\n        btn.disabled = false;\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(passwordSubmitClicked) return;//이미 제출중이면 실행X\r\n\r\n        if(previousPassword === passwordChange){\r\n            alert(\"바꾸려는 비밀번호가 동일합니다.\");\r\n            return;\r\n        }\r\n        if(!passwordCondition){\r\n            alert(\"새 비밀번호가 비밀번호 조건에 맞지 않습니다.\");\r\n            return;\r\n        }\r\n        if(passwordChange !== passwordChangeCheck){\r\n            alert(\"새 비밀번호와 새 비밀번호 확인이 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n\r\n        setPasswordSubmitClicked(true);\r\n        const btn = document.querySelector('#passwordSubmitBtn');\r\n        btn.innerHTML = \"제출중\";\r\n        btn.style.color = 'black';\r\n        btn.style.backgroundColor = 'gray';\r\n        btn.style.cursor = 'wait';\r\n        btn.disabled = true;\r\n    };\r\n\r\n    const changePassword = async () => {\r\n        const sendBody = {\r\n            password: passwordChange,\r\n        };\r\n\r\n        await postAxios(passwordChangeUrl, sendBody, {}, refreshAccessToken);\r\n        alert(\"비밀번호가 변경되었습니다.\");\r\n        submitAbleAgain();//다시 보낼 수 있게 설정\r\n        setPreviousPassword(\"\");\r\n        setPasswordChange(\"\");\r\n        setPasswordChangeCheck(\"\");\r\n    };\r\n\r\n    const submitHandlerSecondAct = async () => {\r\n        if(!passwordSubmitClicked) return;//불필요한 호출 차단\r\n\r\n        const sendBody = {\r\n            password: previousPassword,\r\n        };\r\n        const res = await postAxios(passwordCheck, sendBody, {}, refreshAccessToken);\r\n        if(res.data){//일치하면\r\n            await changePassword();\r\n        }\r\n        else{\r\n            alert(\"기존 비밀번호가 일치하지 않습니다.\");\r\n            submitAbleAgain();//다시 보낼 수 있게 설정\r\n        }\r\n    };\r\n    useEffect(() => {submitHandlerSecondAct();}, [passwordSubmitClicked])\r\n\r\n    //비밀번호 동일한지 확인해서 style바꿔주는 함수\r\n    const passwordCheckSameCheck = () => {\r\n        if(passwordChangeCheck === \"\"){//비어있으면 빨간 선을 없앤다.\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n            return;\r\n        }\r\n        if(passwordChangeCheck !== passwordChange){\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckSameCheck, [passwordChangeCheck]);\r\n\r\n\r\n    //비밀번호 조건확인\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    };\r\n\r\n    //비밀번호 조건확인하는 함수 함수\r\n    const passwordValid = () => {\r\n        setPasswordCondition(passwordValidCheck(passwordChange));\r\n    };\r\n    useEffect(passwordValid, [passwordChange]);\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.formArea}>\r\n                    {/* 현재 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"prevPW\"\r\n                            className={Style.settingLabel}>\r\n                            이전 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"prevPW\"\r\n                            type=\"password\"\r\n                            value={previousPassword}\r\n                            onChange={previousPasswordChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChange'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChange\"\r\n                            type=\"password\"\r\n                            value={passwordChange}\r\n                            onChange={passwordChangeChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 확인 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChangeCheck'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호 확인\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChangeCheck\"\r\n                            type=\"password\"\r\n                            value={passwordChangeCheck}\r\n                            onChange={passwordChangeCheckChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                {passwordCondition ? null : <p className={Style.alertWord}>비밀번호는 8~16자리, 소문자, 특수문자를 하나이상 포함.</p>}\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button id=\"passwordSubmitBtn\" type=\"submit\" className={Style.submitButton}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PasswordSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js",["402","403","404","405","406"],[],"import Style from './blockSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentBlockedPersonUrl,\r\n    blockUserCancleUrl,\r\n    blockUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios, postAxios } from '../../../../apiCall';\r\n\r\nconst BlockSetting = ({refreshAccessToken, userId}) => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//차단된 사람들\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    //처음에 차단된 유저들의 리스트를 먼저 가져와야한다.\r\n    const blockSettingInitialSetting = async() => {\r\n        const res = await getAxios(getCurrentBlockedPersonUrl, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data];\r\n        setAddedUserList(tmp);\r\n        setSearchedUserList([]);//검색 리스트 초기화 : 이게 초기상황이든 유저가 추가한 이후든 상관없이 실행되도 된다.\r\n        setLoading(false);\r\n    };\r\n    useEffect(() => {blockSettingInitialSetting();}, []);\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        const sendBody = {\r\n            userId: event.target.id,\r\n        };\r\n        await postAxios(blockUserUrl, sendBody, {}, refreshAccessToken);\r\n        await blockSettingInitialSetting();\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        const sendBody = {\r\n            userId: event.target.id,\r\n        };\r\n        await postAxios(blockUserCancleUrl, sendBody, {}, refreshAccessToken);\r\n        const tmp = [...AddedUserList];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setAddedUserList(tmp);\r\n        setSearchedUserList([]);//삭제하고 나면 검색된 유저들 초기화\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    };\r\n\r\n    const searchHandler = async (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        const res = await getAxios(`${searchUserUrl}${userInput}`, {}, refreshAccessToken);\r\n        const tmp = [...res.data.data]\r\n        const withoutMe = tmp.filter((d) => d.userId !== userId);//tmp중에서 나 자신은 리스트에 뜨면 안된다.\r\n        setSearchedUserList(withoutMe);\r\n    };\r\n\r\n    return(\r\n        loading ? null :\r\n        <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n            <div className={Style.Cover}>\r\n                <label\r\n                    className={Style.searchLabel}\r\n                    htmlFor=\"userIdInput\">\r\n                    차단할 사용자 추가\r\n                </label>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <input \r\n                    id=\"userIdInput\"\r\n                    placeholder='닉네임을 입력하세요'\r\n                    className={Style.searchInput}\r\n                    value={userInput}\r\n                    onChange={userInputChangeHandler}\r\n                />\r\n            </div>\r\n            <div className={Style.Cover} style={{overflow: \"auto\"}}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        searchedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover} style={{overflow: \"auto\"}}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        AddedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default BlockSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\newChat\\singleFriend.js",["407"],[],"import Style from './newChat.module.css';\r\n\r\nconst SingleFriend = ({data, setChosenFriendList, chosenFriendList, addStyle}) => {\r\n  //유저를 클릭하면 chosenfriendList를 변경한다. => 이미 선택중이면 거기서 제외되고, 선택중이 아니면 추가된다.\r\n  const addFriend = () => {\r\n      if(addStyle === null){\r\n          const tmp = [...chosenFriendList];//지금까지 선택된 친구들\r\n          tmp.push(data);//클릭된 유저를 집어넣는다.\r\n          setChosenFriendList(tmp);//선택된 유저를 변경한다.\r\n      }\r\n      else{\r\n          const tmp = [...chosenFriendList];//지금까지 선택된 친구들\r\n          const JSONtmp = tmp.map(d => JSON.stringify(d));\r\n          const JSONdata = JSON.stringify(data);\r\n          const JSONnext = JSONtmp.filter(x => x !== JSONdata);//선택되지 않은 친구들만 집어넣는다.\r\n          setChosenFriendList(JSONnext.map(d => JSON.parse(d)));\r\n      }\r\n  };\r\n\r\n  return(\r\n      <div className={Style.singleFriendCover}>\r\n          <div className={Style.singleFriend} onClick={addFriend} style={addStyle}>\r\n              <div className={Style.flexBox}>\r\n                  <img src={data.imgUrl} className={Style.friendImg} />\r\n              </div>\r\n              <div className={Style.flexBox}>\r\n                  <p className={Style.friendNickname}>{data.nickname}</p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SingleFriend;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\notice\\singleNotice.js",["408","409","410"],[],"import Style from './notice.module.css';\r\nimport { useEffect } from 'react';\r\nimport {\r\n    readNoticeUrl,\r\n    deleteNoticeUrl,\r\n} from '../../../../apiUrl';\r\nimport {\r\n    postAxios,\r\n    deleteAxios\r\n} from '../../../../apiCall';\r\nimport closeBtn from './close_btn.png';\r\n\r\nconst SingleNotice = ({notificationId, userImgUrl, targetUserId, type, resourceId, checked, content, lastNotice, leftBookChangeHandler, ListDeleteHandler, index, setPageId, setNoticeCount, refreshAccessToken}) => {\r\n    //초기 설정으로, 이미 읽은 알림의 경우 연하게 스타일 변경\r\n    const noticePreset = () => {\r\n        if(checked){\r\n            document.querySelector(`#noticeScript${notificationId}`).style.color =\"gray\";\r\n        }\r\n    };\r\n    useEffect(noticePreset, []);\r\n\r\n    //알림의 이미지 클릭 시 해당 유저의 페이지로 이동\r\n    const onUserImageClickHandler = (event) => {\r\n        event.preventDefault();\r\n        leftBookChangeHandler(\"pList/\" + targetUserId);\r\n    };\r\n\r\n    //알림을 클릭 시 알림이 발생한 근원지로 이동(FOLLOW는 유저로, 나머지는 글로)\r\n    //알림 클릭 시 해당 알림은 읽은 것으로 처리\r\n    const onNoticeScripsClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //읽음 처리\r\n        await postAxios(`${readNoticeUrl}${notificationId}`, {\r\n            notificationId: notificationId,\r\n        }, {}, refreshAccessToken);\r\n        if(document.querySelector(`#noticeScript${notificationId}`).style.color !== \"gray\"){//이미 읽은것으로 처리되어있는 경우가 아닐 때 1을 뺀다.\r\n            setNoticeCount((cur) => cur - 1);//알림 하나 읽은 것으로 처리\r\n        }\r\n        document.querySelector(`#noticeScript${notificationId}`).style.color = \"gray\";\r\n\r\n        //페이지 이동\r\n        if(type === \"FOLLOW\"){\r\n            leftBookChangeHandler(\"pList/\" + targetUserId);\r\n        }\r\n        else{\r\n            setPageId(resourceId);\r\n        }\r\n    };\r\n\r\n    const deleteBtnClickHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //api로 삭제 처리\r\n        await deleteAxios(`${deleteNoticeUrl}${notificationId}`, {}, refreshAccessToken);\r\n        ListDeleteHandler(event);//보이는 내용 처리\r\n        if(document.querySelector(`#noticeScript${notificationId}`).style.color !== \"gray\"){//이미 읽은것으로 처리되어있는 경우가 아닐 때 1을 뺀다.\r\n            setNoticeCount((cur) => cur - 1);//알림 하나 읽은 것으로 처리\r\n        }\r\n    };\r\n\r\n    return(//마지막 요소는 설정을 더해준다.\r\n        <div className={Style.noticeCover} ref={lastNotice}>\r\n                <div className={Style.Cover}>\r\n                    <img src={userImgUrl} className={Style.noticeImg} onClick={onUserImageClickHandler}/>\r\n                </div>\r\n                <div className={Style.Cover}>\r\n                    <p id={`noticeScript${notificationId}`} className={Style.script} onClick={onNoticeScripsClickHandler}>{content}</p>\r\n                </div>\r\n                <div className={Style.Cover}>\r\n                    <img src={closeBtn} className={Style.deleteBtn} onClick={deleteBtnClickHandler} id={index}/>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleNotice;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\chat\\singleChattingRoom.js",["411","412","413","414","415","416","417","418","419","420","421"],[],"import Style from './chat.module.css';\r\nimport deletechattingRoom from './close_big.png';\r\nimport {\r\n    deleteChattingRoomUrl,\r\n} from '../../../../apiUrl';\r\nimport {\r\n    deleteAxios\r\n} from '../../../../apiCall';\r\n\r\nconst SingleChattingRoom = ({data, setLeftBookState, refreshAccessToken, gettingChattingRoomList, leftBookState, searched, setSearched, chatLoading, setChatLoading}) => {\r\n    const chatClickHandler = async (event) => {\r\n        if(chatLoading) return;//다른 채팅방이 아직 로딩중이면 작동을 하지 않음\r\n\r\n        if(event.target.id === \"chattingRoomDeleteBtn\"){//닫기를 누른 경우\r\n            if(window.confirm(\"정말 채팅방을 나가실 건가요?\")){\r\n                await deleteAxios(`${deleteChattingRoomUrl}/${data.chatroomId}`, {}, refreshAccessToken);\r\n                alert(\"채팅방에서 나갔습니다.\");\r\n                if(leftBookState === `chat/${data.chatroomId}`){//나간 방에 들어와 있는 상태라면 나가야한다.\r\n                    setLeftBookState(\"page\");//다른 화면으로 강제 전환시킨다.\r\n                }\r\n                await gettingChattingRoomList();//채팅방 다시 로드\r\n            }\r\n        }\r\n        else{//닫기가 아닌 그냥 채팅방을 클릭한 경우\r\n            if(data.chatroomId === Number(leftBookState.split('/')[1])) return;//이미 그 방에 들어와 있다면 작동을 하지 않음\r\n            setLeftBookState(`chat/${data.chatroomId}`);\r\n            setChatLoading(true);//이동과 동시에 이제 로딩할 것이기 때문에 true로 값 변경\r\n            if(searched){\r\n                console.log(\"채팅방으로 입장하여 검색 결과를 초기화합니다.\");\r\n                await gettingChattingRoomList();//검색된 상태면 다시 채팅방 리스트를 불러온다.\r\n                setSearched(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className={Style.singleChat} onClick={chatClickHandler}>\r\n            {/* 이미지 영역 유저(data.headCount)가 1,2,3,4(혹은 그 이상) 일 때를 각각 만드는게 좋을듯 */}\r\n            {\r\n                data.headCount === 1 ?\r\n                <div className={Style.singleImgFlex}>\r\n                    <img src={data.userImgUrlList[0]} className={Style.chatImgBig} />\r\n                </div> : \r\n                data.headCount === 2 ?\r\n                <div className={Style.flexBox}>\r\n                    <div className={Style.overDoubleImgFlex}>\r\n                        <img src={data.userImgUrlList[0]} className={Style.chatImgSmall} />\r\n                        <div />\r\n                        <div />\r\n                        <img src={data.userImgUrlList[1]} className={Style.chatImgSmall} />\r\n                    </div>\r\n                </div> : \r\n                data.headCount === 3 ?\r\n                <div className={Style.flexBox}>\r\n                    <div className={Style.overDoubleImgFlex}>\r\n                        <img src={data.userImgUrlList[0]} className={Style.chatImgSmall} />\r\n                        <img src={data.userImgUrlList[1]} className={Style.chatImgSmall} />\r\n                        <img src={data.userImgUrlList[2]} className={Style.chatImgSmall} />\r\n                        <div />\r\n                    </div>\r\n                </div> : \r\n                <div className={Style.flexBox}>\r\n                    <div className={Style.overDoubleImgFlex}>\r\n                        <img src={data.userImgUrlList[0]} className={Style.chatImgSmall} />\r\n                        <img src={data.userImgUrlList[1]} className={Style.chatImgSmall} />\r\n                        <img src={data.userImgUrlList[2]} className={Style.chatImgSmall} />\r\n                        <img src={data.userImgUrlList[3]} className={Style.chatImgSmall} />\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className={Style.flexBoxcol}>\r\n                <div className={Style.flexBoxRight} style={{height: \"30%\"}}>\r\n                    <img src={deletechattingRoom} id=\"chattingRoomDeleteBtn\" style={{cursor: \"pointer\"}}/>\r\n                </div>\r\n                <p className={Style.chatName}>{data.name}</p>\r\n                <p className={Style.lastChat}>{data.lastChat}</p>\r\n                <div className={Style.flexBoxRight} style={{height: \"20%\"}}>\r\n                    {\r\n                        data.uncheckedChatCount === 0 ? null :\r\n                        <p className={Style.chatNumber}>{data.uncheckedChatCount}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleChattingRoom;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\rightInner\\friend\\renderRightFriend.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\profile\\profile.js",["422"],[],"//프로필을 보여주는 JS\r\nimport Style from './profile.module.css';\r\n\r\nconst Profile = ({img, name, userId, leftBookChangeHandler}) => {\r\n    const profileClickHandler = (event) => {\r\n        event.preventDefault();\r\n        leftBookChangeHandler(\"pList/\" + userId);\r\n    }\r\n\r\n    return (\r\n        <div className={Style.friendProfile} onClick={profileClickHandler}>\r\n            <div className={Style.Cover}>\r\n                <img src={img} className={Style.friendProfilePic}/>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <p className={Style.friendProfileName}>{name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\renderCommentOfComment.js",["423","424","425"],[],"//대댓글을 불러오고 toggle하는 컴포넌트 - 계층상 3단계\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport {\r\n    LoadDetailPageUrl,\r\n} from '../../../../apiUrl';\r\nimport { getAxios } from '../../../../apiCall';\r\nimport SingleCommentOfComment from './singleCommentOfComment';\r\n\r\n\r\n//대댓글 toggle과 불러오는 부분\r\nconst RenderCommentOfComment = ({pageId, groupId, setPageId, setLoadCommentOfComment, loadCommentOfComment, refreshAccessToken, userId, leftBookChangeHandler, commentId, getCOCCount}) => {\r\n    const [toggle, setToggle] = useState(false);//대댓글을 보여주는 toggle이다.\r\n    const [commentOfCommentList, setCommentOfCommentList] = useState([]);//대댓글 리스트\r\n    const [commentOfCommentStartId, setCommentOfCommentStartId] = useState(1);//첫 로드시에는 1이온다.\r\n    const [isLastCommentOfComment, setIsLastCommentOfComment] = useState(false);//마지막 요소가 읽어들여지면 true로 세팅해서 inview로 인해 더이상 로드가 안되게 한다.\r\n    const [lastCommentOfComment, InView] = useInView();//마지막 대댓글에 넣는다. 이게 보이면 대댓글을 추가로 요청한다.\r\n\r\n    //대댓글 활성화하고 비활성화 하는 함수\r\n    const setToggleFunc = () => {\r\n        if(groupId === loadCommentOfComment){\r\n            setToggle((cur) => !cur);\r\n            setLoadCommentOfComment(0);//다시 초기 상태로\r\n            setCommentOfCommentList([]);//다시 초기 상태로\r\n            setCommentOfCommentStartId(1);//다시 초기 상태로\r\n        }\r\n    }\r\n    useEffect(setToggleFunc, [loadCommentOfComment]);\r\n\r\n    //toggle이되고, 그 값이 true면 그 그룹에 해당하는 대댓글을 불러와야한다.\r\n    const loadThisCommentOfComment = async () => {\r\n        if(toggle){\r\n            const res = await getAxios(`${LoadDetailPageUrl}${pageId}/nested?group=${groupId}&startId=${commentOfCommentStartId}`, {}, refreshAccessToken);\r\n            const tmp = [...res.data.data];\r\n            if(tmp.length === 0){\r\n                setIsLastCommentOfComment(true);\r\n                return;//이후의 작업은 불필요하다.\r\n            }\r\n            const cur = [...commentOfCommentList];\r\n            const next = cur.concat(tmp);\r\n            setCommentOfCommentList(next);\r\n            setCommentOfCommentStartId(res.data.startId);\r\n        }\r\n    };\r\n    useEffect(() => {loadThisCommentOfComment();}, [toggle]);\r\n\r\n    //맨 아래 요소가 보이면 대댓글을 부른다.\r\n    const lastCommentOfCommentSeen = () => {\r\n        if(!isLastCommentOfComment && InView){//false일 때도 call된다. true일 때만 실제로 로드한다 + 실제로 마지막 댓글이 이미 로드 된 상황이면 로드하지 않는다.\r\n            loadThisCommentOfComment();\r\n        }\r\n    };\r\n    useEffect(lastCommentOfCommentSeen, [InView]);\r\n\r\n    return (\r\n        toggle ?\r\n            commentOfCommentList === undefined ?\r\n            null\r\n            :\r\n            commentOfCommentList.map((data, index) =>\r\n                index === (commentOfCommentList.length - 1) ?\r\n                <SingleCommentOfComment \r\n                    data={data}\r\n                    key={index}\r\n                    lastCommentOfComment={lastCommentOfComment}\r\n                    leftBookChangeHandler={leftBookChangeHandler}\r\n                    setPageId={setPageId}\r\n                    userId={userId}\r\n                    pageId={pageId}\r\n                    refreshAccessToken={refreshAccessToken}\r\n                    setToggle={setToggle}\r\n                    setCommentOfCommentList={setCommentOfCommentList}\r\n                    setCommentOfCommentStartId={setCommentOfCommentStartId}\r\n                    setIsLastCommentOfComment={setIsLastCommentOfComment}\r\n                    commentId={commentId}\r\n                    getCOCCount={getCOCCount}\r\n                />\r\n                :\r\n                <SingleCommentOfComment \r\n                    data={data}\r\n                    key={index}\r\n                    lastCommentOfComment={null}\r\n                    leftBookChangeHandler={leftBookChangeHandler}\r\n                    setPageId={setPageId}\r\n                    userId={userId}\r\n                    pageId={pageId}\r\n                    refreshAccessToken={refreshAccessToken}\r\n                    setToggle={setToggle}\r\n                    setCommentOfCommentList={setCommentOfCommentList}\r\n                    setCommentOfCommentStartId={setCommentOfCommentStartId}\r\n                    setIsLastCommentOfComment={setIsLastCommentOfComment}\r\n                    commentId={commentId}\r\n                    getCOCCount={getCOCCount}\r\n                />\r\n            )\r\n        : null\r\n    );\r\n};\r\n\r\nexport default RenderCommentOfComment;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\leftInner\\page\\imageArea.js",["426","427","428","429"],[],"import { useState, useEffect } from 'react';\r\nimport leftArrow from './caret_left.png';\r\nimport rightArrow from './caret_right.png'\r\nimport Style from './page.module.css';\r\n\r\nconst ImageArea = ({imgList, pageIndex, pageClickFunc}) => {\r\n  const [imageIndex, setImageIndex] = useState(0);//보고있는 이미지의 index\r\n\r\n  /* 이미지 영역 */\r\n  const leftArrowClickHandler = (event) => {\r\n      event.preventDefault();\r\n      if(imageIndex === 0) return;//넘어서지 않게 한다\r\n      else setImageIndex((cur) => cur - 1);\r\n  };\r\n\r\n  const rightArrowClickHandler = (event) => {\r\n      event.preventDefault();\r\n      if(imageIndex === imgList.length - 1) return;//넘어서지 않게 한다\r\n      else setImageIndex((cur) => cur + 1);\r\n  };\r\n\r\n  const moveImageHandler = () => {\r\n      document.querySelector(`#onlyImageArea_${pageIndex}`).style.transform = `translate(-${(imageIndex * 100) / imgList.length}%)`;\r\n  };\r\n  useEffect(moveImageHandler, [imageIndex]);\r\n\r\n  return(\r\n      <div className={Style.imageArea}>\r\n          <div className={Style.onlyImageArea} onClick={pageClickFunc}>\r\n              <div style={{overflow:\"hidden\"}}>\r\n                  <div id={`onlyImageArea_${pageIndex}`} style={{width:`${100 * imgList.length}%`, height: \"100%\", transition: \"transform 0.5s\"}}>\r\n                      {\r\n                          imgList.map((imageUrl, index) =>\r\n                              <div style={{height: \"100%\", width: `${100 / imgList.length}%`, float: \"left\"}} key={index}>\r\n                                  <img src={imageUrl} style={{width: \"100%\", height: \"100%\", objectFit: \"contain\", cursor: \"pointer\"}}/>\r\n                              </div>\r\n                          )\r\n                      }\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div className={Style.ImageBtnArea}>\r\n              {\r\n                  imgList.length === 1 ?\r\n                  null\r\n                  :\r\n                  <div className={Style.flexBoxCenter}>\r\n                      <img id={`leftArrow_${pageIndex}`} src={leftArrow} className={Style.ImageChangeBtn} onClick={leftArrowClickHandler}/>\r\n                      <img id={`rightArrow_${pageIndex}`} src={rightArrow} className={Style.ImageChangeBtn} onClick={rightArrowClickHandler}/>\r\n                  </div>\r\n              }\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ImageArea;","C:\\Users\\luckh\\OneDrive\\Desktop\\졸프\\grad\\src\\routes\\Home\\root\\detailPage\\singleCommentOfComment.js",["430","431","432"],[],"//대댓글 하나를 띄우는 컴포넌트 - 계층상 4단계\r\n\r\nimport Style from './detailPage.module.css';\r\nimport heartImg from '../heart_outline.png';\r\nimport heartImgFill from '../heart_fill.png';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    likeThisPageUrl,\r\n    ReportUrl,\r\n    deleteCommentUrl,\r\n    unlikeThisPageUrl,\r\n    checkLikeUrl,\r\n} from '../../../../apiUrl';\r\nimport { makeIntoArray } from '../../../../makeStringIntoArray';\r\nimport { getAxios, postAxios, deleteAxios} from '../../../../apiCall';\r\nimport { calculateTimeFrom } from '../../../../timeCalculation';\r\nimport ContentArea from '../contentArea/contentArea';\r\n\r\n//대댓글 부분\r\nconst SingleCommentOfComment = ({data, lastCommentOfComment, setPageId, userId, refreshAccessToken, pageId, leftBookChangeHandler, setToggle, setCommentOfCommentList, setCommentOfCommentStartId, setIsLastCommentOfComment, commentId, getCOCCount}) => {\r\n    const [COCIsLiked, setCOCIsLiked] = useState(false);//대댓글 좋아요 여부\r\n    const [COCLikeCount, setCOCLikeCount] = useState(0);//대댓글 좋아요 개수\r\n    const [COCContentArray, setCOCContentArray] = useState([]);//대댓글 출력용 배열\r\n\r\n    //초기에 좋아요 관련 정보 불러오기 및 출력 내용 바꾸기\r\n    const presetLikeInfo = async () => {\r\n        setCOCLikeCount(data.likeCount);\r\n        const res = await getAxios(`${checkLikeUrl}?targetId=${data.commentId}&type=COMMENT`, {}, refreshAccessToken);\r\n        setCOCIsLiked(res.data.data.like);\r\n        setCOCContentArray(makeIntoArray(data.content));\r\n    }\r\n    useEffect(() => {presetLikeInfo();}, []);\r\n\r\n    //대댓글의 유저 클릭 시 해당 유저 페이지로 이동\r\n    const CommentofCommentUserClickHandler = () => {\r\n        setPageId(-1);//현재 페이지에서 나감\r\n        leftBookChangeHandler(`pList/${data.userDto.userId}`);//해당 유저의 페이지로 이동\r\n    };\r\n\r\n    //신고 클릭함수\r\n    const COCreportClickHandler = async () => {\r\n        if(window.confirm(\"정말 신고하시겠습니까?\")){//다시 한 번 물어보고 실행\r\n            const sendBody = {\r\n                targetId: data.commentId,\r\n                type: \"COMMENT\",\r\n            };\r\n            await postAxios(ReportUrl, sendBody, {}, refreshAccessToken);\r\n            alert(\"신고가 접수되었습니다.\");\r\n        }\r\n    };\r\n    \r\n    //삭제 클릭 함수\r\n    const COCdeleteClickHandler = async () => {\r\n        if(window.confirm(\"정말 삭제하시겠습니까?\")){\r\n            await deleteAxios(`${deleteCommentUrl}${pageId}/comment/${data.commentId}`, {}, refreshAccessToken);\r\n            alert(\"삭제되었습니다.\");\r\n            setCommentOfCommentStartId(1)//대댓글 startId 초기화\r\n            setIsLastCommentOfComment(false)//대댓글 lastcomment fasle\r\n            setToggle(false)//토글 값 강제로 false로\r\n            setCommentOfCommentList([])//대댓글 지우기\r\n            await getCOCCount(pageId, commentId);\r\n        }\r\n    };\r\n\r\n    //좋아요 clickhandler\r\n    const CommentOfCommentLikeHandler = async () => {\r\n        let url = \"\"\r\n        COCIsLiked ? url = unlikeThisPageUrl : url = likeThisPageUrl\r\n        const sendBody = {\r\n            targetId: data.commentId,\r\n            type: \"COMMENT\"\r\n        };\r\n\r\n        await postAxios(url, sendBody, {}, refreshAccessToken);\r\n        COCIsLiked ? setCOCLikeCount(cur => cur - 1) : setCOCLikeCount(cur => cur + 1) //임시로라도 반영\r\n        setCOCIsLiked((cur) => !cur);\r\n    }\r\n\r\n    return(\r\n        <div className={Style.CommentBox} style={{width:\"80%\"}} ref={lastCommentOfComment}>\r\n            <div className={Style.CommentProfileArea}>\r\n                <img src={data.userDto.imgUrl} className={Style.UserImage} onClick={CommentofCommentUserClickHandler}/>\r\n                <p className={Style.UserNickname} onClick={CommentofCommentUserClickHandler}>{data.userDto.nickname}</p>\r\n            </div>\r\n            <div className={Style.commentTextArea}>\r\n                {\r\n                    COCContentArray.map((d, index) => (\r\n                        <ContentArea data={d} key={index} />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className={Style.likeTimeArea}>\r\n                <div className={Style.cover}>\r\n                    <img src={COCIsLiked ? heartImgFill : heartImg} className={Style.buttonImg} onClick={CommentOfCommentLikeHandler}/>\r\n                    <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>{`좋아요${COCLikeCount}개`}</p>\r\n                    <p className={Style.likeandCommentCount} style={{cursor: \"default\"}}>|</p>\r\n                    {\r\n                        userId === data.userDto.userId ?\r\n                        /* 내 댓글인 경우 삭제 가능 */\r\n                        <p className={Style.likeandCommentCount} onClick={COCdeleteClickHandler}>댓글 삭제</p>\r\n                        :\r\n                        /* 남의 댓글인 경우 신고 가능 */\r\n                        <p className={Style.likeandCommentCount} onClick={COCreportClickHandler}>댓글 신고하기</p>\r\n                    }\r\n                </div>\r\n                <p className={Style.time}>{calculateTimeFrom(data.createdDate)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SingleCommentOfComment;",{"ruleId":"433","severity":1,"message":"434","line":72,"column":44,"nodeType":"435","endLine":72,"endColumn":46,"suggestions":"436"},{"ruleId":"433","severity":1,"message":"437","line":126,"column":5,"nodeType":"435","endLine":126,"endColumn":18,"suggestions":"438"},{"ruleId":"439","severity":1,"message":"440","line":2,"column":24,"nodeType":"441","messageId":"442","endLine":2,"endColumn":37},{"ruleId":"433","severity":1,"message":"443","line":104,"column":55,"nodeType":"435","endLine":104,"endColumn":77,"suggestions":"444"},{"ruleId":"433","severity":1,"message":"445","line":135,"column":54,"nodeType":"435","endLine":135,"endColumn":68,"suggestions":"446"},{"ruleId":"433","severity":1,"message":"447","line":150,"column":6,"nodeType":"435","endLine":150,"endColumn":8,"suggestions":"448"},{"ruleId":"433","severity":1,"message":"449","line":225,"column":31,"nodeType":"435","endLine":225,"endColumn":62,"suggestions":"450"},{"ruleId":"433","severity":1,"message":"451","line":255,"column":6,"nodeType":"435","endLine":255,"endColumn":19,"suggestions":"452"},{"ruleId":"433","severity":1,"message":"453","line":268,"column":6,"nodeType":"435","endLine":268,"endColumn":21,"suggestions":"454"},{"ruleId":"439","severity":1,"message":"455","line":276,"column":15,"nodeType":"441","messageId":"442","endLine":276,"endColumn":19},{"ruleId":"433","severity":1,"message":"456","line":281,"column":6,"nodeType":"435","endLine":281,"endColumn":22,"suggestions":"457"},{"ruleId":"433","severity":1,"message":"456","line":289,"column":6,"nodeType":"435","endLine":289,"endColumn":22,"suggestions":"458"},{"ruleId":"459","severity":1,"message":"460","line":325,"column":17,"nodeType":"461","endLine":325,"endColumn":103},{"ruleId":"459","severity":1,"message":"460","line":332,"column":17,"nodeType":"461","endLine":332,"endColumn":105},{"ruleId":"459","severity":1,"message":"460","line":342,"column":17,"nodeType":"461","endLine":342,"endColumn":112},{"ruleId":"459","severity":1,"message":"460","line":352,"column":17,"nodeType":"461","endLine":352,"endColumn":104},{"ruleId":"459","severity":1,"message":"460","line":359,"column":17,"nodeType":"461","endLine":359,"endColumn":108},{"ruleId":"459","severity":1,"message":"460","line":8,"column":13,"nodeType":"461","endLine":8,"endColumn":71},{"ruleId":"433","severity":1,"message":"462","line":87,"column":44,"nodeType":"435","endLine":87,"endColumn":60,"suggestions":"463"},{"ruleId":"433","severity":1,"message":"464","line":110,"column":32,"nodeType":"435","endLine":110,"endColumn":40,"suggestions":"465"},{"ruleId":"433","severity":1,"message":"466","line":137,"column":33,"nodeType":"435","endLine":137,"endColumn":45,"suggestions":"467"},{"ruleId":"433","severity":1,"message":"468","line":182,"column":34,"nodeType":"435","endLine":182,"endColumn":49,"suggestions":"469"},{"ruleId":"433","severity":1,"message":"470","line":243,"column":63,"nodeType":"435","endLine":243,"endColumn":85,"suggestions":"471"},{"ruleId":"459","severity":1,"message":"460","line":278,"column":41,"nodeType":"461","endLine":278,"endColumn":120},{"ruleId":"459","severity":1,"message":"460","line":288,"column":29,"nodeType":"461","endLine":288,"endColumn":113},{"ruleId":"459","severity":1,"message":"460","line":289,"column":29,"nodeType":"461","endLine":289,"endColumn":115},{"ruleId":"459","severity":1,"message":"460","line":297,"column":29,"nodeType":"461","endLine":297,"endColumn":118},{"ruleId":"459","severity":1,"message":"460","line":309,"column":33,"nodeType":"461","endLine":309,"endColumn":139},{"ruleId":"433","severity":1,"message":"472","line":34,"column":44,"nodeType":"435","endLine":34,"endColumn":59,"suggestions":"473"},{"ruleId":"433","severity":1,"message":"474","line":42,"column":33,"nodeType":"435","endLine":42,"endColumn":41,"suggestions":"475"},{"ruleId":"433","severity":1,"message":"476","line":45,"column":41,"nodeType":"435","endLine":45,"endColumn":50,"suggestions":"477"},{"ruleId":"433","severity":1,"message":"478","line":53,"column":27,"nodeType":"435","endLine":53,"endColumn":35,"suggestions":"479"},{"ruleId":"459","severity":1,"message":"460","line":66,"column":11,"nodeType":"461","endLine":73,"endColumn":13},{"ruleId":"433","severity":1,"message":"480","line":64,"column":33,"nodeType":"435","endLine":64,"endColumn":48,"suggestions":"481"},{"ruleId":"433","severity":1,"message":"482","line":89,"column":46,"nodeType":"435","endLine":89,"endColumn":60,"suggestions":"483"},{"ruleId":"433","severity":1,"message":"484","line":109,"column":8,"nodeType":"435","endLine":109,"endColumn":16,"suggestions":"485"},{"ruleId":"459","severity":1,"message":"460","line":186,"column":21,"nodeType":"461","endLine":186,"endColumn":73},{"ruleId":"459","severity":1,"message":"460","line":195,"column":25,"nodeType":"461","endLine":199,"endColumn":27},{"ruleId":"459","severity":1,"message":"460","line":204,"column":25,"nodeType":"461","endLine":204,"endColumn":116},{"ruleId":"433","severity":1,"message":"486","line":64,"column":8,"nodeType":"435","endLine":64,"endColumn":21,"suggestions":"487"},{"ruleId":"433","severity":1,"message":"488","line":75,"column":8,"nodeType":"435","endLine":75,"endColumn":21,"suggestions":"489"},{"ruleId":"433","severity":1,"message":"490","line":93,"column":48,"nodeType":"435","endLine":93,"endColumn":63,"suggestions":"491"},{"ruleId":"492","severity":1,"message":"493","line":103,"column":43,"nodeType":"494","messageId":"495","endLine":103,"endColumn":45},{"ruleId":"433","severity":1,"message":"496","line":116,"column":49,"nodeType":"435","endLine":116,"endColumn":67,"suggestions":"497"},{"ruleId":"433","severity":1,"message":"498","line":153,"column":8,"nodeType":"435","endLine":153,"endColumn":22,"suggestions":"499"},{"ruleId":"433","severity":1,"message":"500","line":178,"column":8,"nodeType":"435","endLine":178,"endColumn":16,"suggestions":"501"},{"ruleId":"459","severity":1,"message":"460","line":204,"column":21,"nodeType":"461","endLine":204,"endColumn":103},{"ruleId":"433","severity":1,"message":"502","line":15,"column":8,"nodeType":"435","endLine":15,"endColumn":10,"suggestions":"503"},{"ruleId":"459","severity":1,"message":"460","line":141,"column":53,"nodeType":"461","endLine":141,"endColumn":132},{"ruleId":"459","severity":1,"message":"460","line":150,"column":29,"nodeType":"461","endLine":150,"endColumn":124},{"ruleId":"433","severity":1,"message":"504","line":41,"column":8,"nodeType":"435","endLine":41,"endColumn":24,"suggestions":"505"},{"ruleId":"433","severity":1,"message":"504","line":48,"column":8,"nodeType":"435","endLine":48,"endColumn":24,"suggestions":"506"},{"ruleId":"433","severity":1,"message":"507","line":55,"column":8,"nodeType":"435","endLine":55,"endColumn":35,"suggestions":"508"},{"ruleId":"459","severity":1,"message":"460","line":92,"column":25,"nodeType":"461","endLine":92,"endColumn":108},{"ruleId":"433","severity":1,"message":"509","line":41,"column":53,"nodeType":"435","endLine":41,"endColumn":55,"suggestions":"510"},{"ruleId":"433","severity":1,"message":"511","line":77,"column":46,"nodeType":"435","endLine":77,"endColumn":64,"suggestions":"512"},{"ruleId":"433","severity":1,"message":"513","line":131,"column":59,"nodeType":"435","endLine":131,"endColumn":81,"suggestions":"514"},{"ruleId":"433","severity":1,"message":"515","line":64,"column":30,"nodeType":"435","endLine":64,"endColumn":32,"suggestions":"516"},{"ruleId":"433","severity":1,"message":"517","line":43,"column":29,"nodeType":"435","endLine":43,"endColumn":37,"suggestions":"518"},{"ruleId":"433","severity":1,"message":"519","line":29,"column":66,"nodeType":"435","endLine":29,"endColumn":93,"suggestions":"520"},{"ruleId":"433","severity":1,"message":"521","line":48,"column":45,"nodeType":"435","endLine":48,"endColumn":47,"suggestions":"522"},{"ruleId":"433","severity":1,"message":"523","line":54,"column":8,"nodeType":"435","endLine":54,"endColumn":39,"suggestions":"524"},{"ruleId":"459","severity":1,"message":"460","line":135,"column":33,"nodeType":"461","endLine":135,"endColumn":96},{"ruleId":"459","severity":1,"message":"460","line":143,"column":33,"nodeType":"461","endLine":143,"endColumn":96},{"ruleId":"433","severity":1,"message":"525","line":85,"column":34,"nodeType":"435","endLine":85,"endColumn":49,"suggestions":"526"},{"ruleId":"459","severity":1,"message":"460","line":18,"column":13,"nodeType":"461","endLine":18,"endColumn":121},{"ruleId":"433","severity":1,"message":"527","line":35,"column":8,"nodeType":"435","endLine":35,"endColumn":10,"suggestions":"528"},{"ruleId":"433","severity":1,"message":"529","line":46,"column":8,"nodeType":"435","endLine":46,"endColumn":24,"suggestions":"530"},{"ruleId":"459","severity":1,"message":"460","line":123,"column":25,"nodeType":"461","endLine":123,"endColumn":119},{"ruleId":"459","severity":1,"message":"460","line":135,"column":29,"nodeType":"461","endLine":135,"endColumn":138},{"ruleId":"459","severity":1,"message":"460","line":10,"column":5,"nodeType":"461","endLine":10,"endColumn":133},{"ruleId":"433","severity":1,"message":"531","line":33,"column":6,"nodeType":"435","endLine":33,"endColumn":8,"suggestions":"532"},{"ruleId":"433","severity":1,"message":"533","line":59,"column":6,"nodeType":"435","endLine":59,"endColumn":27,"suggestions":"534"},{"ruleId":"459","severity":1,"message":"460","line":66,"column":19,"nodeType":"461","endLine":66,"endColumn":124},{"ruleId":"459","severity":1,"message":"460","line":77,"column":19,"nodeType":"461","endLine":77,"endColumn":122},{"ruleId":"459","severity":1,"message":"460","line":11,"column":9,"nodeType":"461","endLine":11,"endColumn":96},{"ruleId":"459","severity":1,"message":"460","line":15,"column":14,"nodeType":"461","endLine":15,"endColumn":111},{"ruleId":"492","severity":1,"message":"493","line":6,"column":16,"nodeType":"494","messageId":"495","endLine":6,"endColumn":18},{"ruleId":"492","severity":1,"message":"493","line":15,"column":30,"nodeType":"494","messageId":"495","endLine":15,"endColumn":32},{"ruleId":"433","severity":1,"message":"468","line":33,"column":43,"nodeType":"435","endLine":33,"endColumn":62,"suggestions":"535"},{"ruleId":"433","severity":1,"message":"468","line":44,"column":46,"nodeType":"435","endLine":44,"endColumn":68,"suggestions":"536"},{"ruleId":"433","severity":1,"message":"537","line":58,"column":48,"nodeType":"435","endLine":58,"endColumn":50,"suggestions":"538"},{"ruleId":"433","severity":1,"message":"539","line":105,"column":64,"nodeType":"435","endLine":105,"endColumn":86,"suggestions":"540"},{"ruleId":"433","severity":1,"message":"541","line":131,"column":62,"nodeType":"435","endLine":131,"endColumn":83,"suggestions":"542"},{"ruleId":"459","severity":1,"message":"460","line":178,"column":29,"nodeType":"461","endLine":178,"endColumn":87},{"ruleId":"433","severity":1,"message":"543","line":48,"column":69,"nodeType":"435","endLine":48,"endColumn":71,"suggestions":"544"},{"ruleId":"433","severity":1,"message":"468","line":64,"column":38,"nodeType":"435","endLine":64,"endColumn":49,"suggestions":"545"},{"ruleId":"433","severity":1,"message":"468","line":77,"column":43,"nodeType":"435","endLine":77,"endColumn":59,"suggestions":"546"},{"ruleId":"433","severity":1,"message":"547","line":128,"column":57,"nodeType":"435","endLine":128,"endColumn":82,"suggestions":"548"},{"ruleId":"459","severity":1,"message":"460","line":273,"column":49,"nodeType":"461","endLine":273,"endColumn":104},{"ruleId":"459","severity":1,"message":"460","line":279,"column":49,"nodeType":"461","endLine":279,"endColumn":237},{"ruleId":"459","severity":1,"message":"460","line":294,"column":49,"nodeType":"461","endLine":294,"endColumn":104},{"ruleId":"459","severity":1,"message":"460","line":300,"column":49,"nodeType":"461","endLine":300,"endColumn":249},{"ruleId":"459","severity":1,"message":"460","line":18,"column":17,"nodeType":"461","endLine":18,"endColumn":70},{"ruleId":"433","severity":1,"message":"549","line":29,"column":47,"nodeType":"435","endLine":29,"endColumn":49,"suggestions":"550"},{"ruleId":"433","severity":1,"message":"551","line":72,"column":50,"nodeType":"435","endLine":72,"endColumn":71,"suggestions":"552"},{"ruleId":"433","severity":1,"message":"468","line":124,"column":47,"nodeType":"435","endLine":124,"endColumn":67,"suggestions":"553"},{"ruleId":"433","severity":1,"message":"468","line":144,"column":48,"nodeType":"435","endLine":144,"endColumn":69,"suggestions":"554"},{"ruleId":"433","severity":1,"message":"468","line":165,"column":45,"nodeType":"435","endLine":165,"endColumn":63,"suggestions":"555"},{"ruleId":"433","severity":1,"message":"468","line":178,"column":53,"nodeType":"435","endLine":178,"endColumn":79,"suggestions":"556"},{"ruleId":"433","severity":1,"message":"468","line":192,"column":45,"nodeType":"435","endLine":192,"endColumn":63,"suggestions":"557"},{"ruleId":"433","severity":1,"message":"551","line":98,"column":50,"nodeType":"435","endLine":98,"endColumn":73,"suggestions":"558"},{"ruleId":"433","severity":1,"message":"559","line":113,"column":39,"nodeType":"435","endLine":113,"endColumn":60,"suggestions":"560"},{"ruleId":"433","severity":1,"message":"561","line":29,"column":54,"nodeType":"435","endLine":29,"endColumn":56,"suggestions":"562"},{"ruleId":"459","severity":1,"message":"460","line":123,"column":41,"nodeType":"461","endLine":123,"endColumn":96},{"ruleId":"459","severity":1,"message":"460","line":129,"column":41,"nodeType":"461","endLine":129,"endColumn":229},{"ruleId":"459","severity":1,"message":"460","line":144,"column":41,"nodeType":"461","endLine":144,"endColumn":96},{"ruleId":"459","severity":1,"message":"460","line":150,"column":41,"nodeType":"461","endLine":150,"endColumn":241},{"ruleId":"459","severity":1,"message":"460","line":24,"column":19,"nodeType":"461","endLine":24,"endColumn":72},{"ruleId":"433","severity":1,"message":"563","line":20,"column":29,"nodeType":"435","endLine":20,"endColumn":31,"suggestions":"564"},{"ruleId":"459","severity":1,"message":"460","line":65,"column":21,"nodeType":"461","endLine":65,"endColumn":106},{"ruleId":"459","severity":1,"message":"460","line":71,"column":21,"nodeType":"461","endLine":71,"endColumn":113},{"ruleId":"459","severity":1,"message":"460","line":42,"column":21,"nodeType":"461","endLine":42,"endColumn":86},{"ruleId":"459","severity":1,"message":"460","line":47,"column":25,"nodeType":"461","endLine":47,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":50,"column":25,"nodeType":"461","endLine":50,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":56,"column":25,"nodeType":"461","endLine":56,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":57,"column":25,"nodeType":"461","endLine":57,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":58,"column":25,"nodeType":"461","endLine":58,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":64,"column":25,"nodeType":"461","endLine":64,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":65,"column":25,"nodeType":"461","endLine":65,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":66,"column":25,"nodeType":"461","endLine":66,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":67,"column":25,"nodeType":"461","endLine":67,"endColumn":92},{"ruleId":"459","severity":1,"message":"460","line":73,"column":21,"nodeType":"461","endLine":73,"endColumn":107},{"ruleId":"459","severity":1,"message":"460","line":13,"column":17,"nodeType":"461","endLine":13,"endColumn":68},{"ruleId":"433","severity":1,"message":"565","line":28,"column":30,"nodeType":"435","endLine":28,"endColumn":52,"suggestions":"566"},{"ruleId":"433","severity":1,"message":"567","line":45,"column":52,"nodeType":"435","endLine":45,"endColumn":60,"suggestions":"568"},{"ruleId":"433","severity":1,"message":"569","line":53,"column":41,"nodeType":"435","endLine":53,"endColumn":49,"suggestions":"570"},{"ruleId":"433","severity":1,"message":"571","line":25,"column":31,"nodeType":"435","endLine":25,"endColumn":43,"suggestions":"572"},{"ruleId":"459","severity":1,"message":"460","line":35,"column":35,"nodeType":"461","endLine":35,"endColumn":137},{"ruleId":"459","severity":1,"message":"460","line":48,"column":23,"nodeType":"461","endLine":48,"endColumn":140},{"ruleId":"459","severity":1,"message":"460","line":49,"column":23,"nodeType":"461","endLine":49,"endColumn":143},{"ruleId":"433","severity":1,"message":"573","line":33,"column":42,"nodeType":"435","endLine":33,"endColumn":44,"suggestions":"574"},{"ruleId":"459","severity":1,"message":"460","line":83,"column":17,"nodeType":"461","endLine":83,"endColumn":120},{"ruleId":"459","severity":1,"message":"460","line":95,"column":21,"nodeType":"461","endLine":95,"endColumn":136},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshAccessToken'. Either include it or remove the dependency array.","ArrayExpression",["575"],"React Hook useEffect has a missing dependency: 'socialLoginStart'. Either include it or remove the dependency array.",["576"],"no-unused-vars","'NaverTokenUrl' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'uploadNewPostHandlerSecondAct'. Either include it or remove the dependency array.",["577"],"React Hook useEffect has a missing dependency: 'uploadNewPostHandlerThirdAct'. Either include it or remove the dependency array.",["578"],"React Hook useEffect has a missing dependency: 'presetNoticeCount'. Either include it or remove the dependency array.",["579"],"React Hook useEffect has a missing dependency: 'goBack'. Either include it or remove the dependency array.",["580"],"React Hook useEffect has a missing dependency: 'noticeEventSource'. Either include it or remove the dependency array.",["581"],"React Hook useEffect has missing dependencies: 'chattingRoomId' and 'stompClient'. Either include them or remove the dependency array.",["582"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chattingTrigerEventSource'. Either include it or remove the dependency array.",["583"],["584"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'presetDetailPage'. Either include it or remove the dependency array.",["585"],"React Hook useEffect has missing dependencies: 'isLastComment' and 'presetComment'. Either include them or remove the dependency array.",["586"],"React Hook useEffect has missing dependencies: 'loading' and 'postedImageList.length'. Either include them or remove the dependency array.",["587"],"React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.",["588"],"React Hook useEffect has a missing dependency: 'userCommitSubmitHandlerSecondAction'. Either include it or remove the dependency array.",["589"],"React Hook useEffect has a missing dependency: 'loadPageListFunc'. Either include it or remove the dependency array.",["590"],"React Hook useEffect has missing dependencies: 'isLoadFinish' and 'loadPageListFunc'. Either include them or remove the dependency array.",["591"],"React Hook useEffect has a missing dependency: 'loadHashtagPage'. Either include it or remove the dependency array.",["592"],"React Hook useEffect has missing dependencies: 'isFinished' and 'loadHashtagPage'. Either include them or remove the dependency array.",["593"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["594"],"React Hook useEffect has a missing dependency: 'presetUserPageList'. Either include it or remove the dependency array.",["595"],"React Hook useEffect has missing dependencies: 'getUserPageList' and 'lastPage'. Either include them or remove the dependency array.",["596"],"React Hook useEffect has a missing dependency: 'chattingRoomId'. Either include it or remove the dependency array.",["597"],"React Hook useEffect has a missing dependency: 'chattingList'. Either include it or remove the dependency array.",["598"],"React Hook useEffect has a missing dependency: 'presetChattingRoomId'. Either include it or remove the dependency array.",["599"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'preSetChattingRoomInfo'. Either include it or remove the dependency array.",["600"],"React Hook useEffect has missing dependencies: 'currentScrollHeight', 'loading', and 'needScroll'. Either include them or remove the dependency array.",["601"],"React Hook useEffect has missing dependencies: 'gettingChattingList' and 'noMoreChat'. Either include them or remove the dependency array.",["602"],"React Hook useEffect has missing dependencies: 'setNewPostContent', 'setNewPostHashtag', 'setNewPostImages', and 'setRenderedNewPostImages'. Either include them or remove the dependency array. If 'setRenderedNewPostImages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["603"],"React Hook useEffect has a missing dependency: 'gettingChattingRoomList'. Either include it or remove the dependency array.",["604"],["605"],"React Hook useEffect has missing dependencies: 'gettingChattingRoomList' and 'setChatAndFriendReloadTriger'. Either include them or remove the dependency array. If 'setChatAndFriendReloadTriger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["606"],"React Hook useEffect has a missing dependency: 'presetFollowerAndFollowee'. Either include it or remove the dependency array.",["607"],"React Hook useEffect has a missing dependency: 'wholeFriendList'. Either include it or remove the dependency array.",["608"],"React Hook useEffect has a missing dependency: 'createChatClickHandlerSecondAct'. Either include it or remove the dependency array.",["609"],"React Hook useEffect has missing dependencies: 'newPostCommentAuth', 'newPostCommentNotice', 'newPostLikeNotice', 'newPostReadLikeAuth', and 'newPostReadPostAuth'. Either include them or remove the dependency array.",["610"],"React Hook useEffect has missing dependencies: 'NoticeRead' and 'noMoreNotice'. Either include them or remove the dependency array.",["611"],"React Hook useEffect has a missing dependency: 'rightFriendAndUserProfileChangeHandler'. Either include it or remove the dependency array.",["612"],"React Hook useEffect has a missing dependency: 'rightFriendPreset'. Either include it or remove the dependency array.",["613"],"React Hook useEffect has missing dependencies: 'rightFriendPreset' and 'setUserPageAndFriendReloadTriger'. Either include them or remove the dependency array. If 'setUserPageAndFriendReloadTriger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["614"],"React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.",["615"],"React Hook useEffect has missing dependencies: 'data.content', 'data.nestedCommentCount', and 'presetLikeorNot'. Either include them or remove the dependency array. If 'setCOCCount' needs the current value of 'data.nestedCommentCount', you can also switch to useReducer instead of useState and read 'data.nestedCommentCount' in the reducer.",["616"],"React Hook useEffect has missing dependencies: 'data.commentId', 'getCOCCount', 'pageId', and 'setCOCAddedTriger'. Either include them or remove the dependency array. If 'setCOCAddedTriger' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["617"],"React Hook useEffect has missing dependencies: 'data.like', 'data.pageDto.content', and 'data.pageDto.likeCount'. Either include them or remove the dependency array. If 'setLikeCount' needs the current value of 'data.pageDto.likeCount', you can also switch to useReducer instead of useState and read 'data.pageDto.likeCount' in the reducer.",["618"],"React Hook useEffect has missing dependencies: 'data.pageDto.pageId', 'isLiked', and 'setDetailPageLikeClick'. Either include them or remove the dependency array. If 'setDetailPageLikeClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["619"],["620"],["621"],"React Hook useEffect has a missing dependency: 'profileSettingPreset'. Either include it or remove the dependency array.",["622"],"React Hook useEffect has a missing dependency: 'profileSettingSubmitHandlerSecondAct'. Either include it or remove the dependency array.",["623"],"React Hook useEffect has a missing dependency: 'profileSettingSubmitHandlerThirdAct'. Either include it or remove the dependency array.",["624"],"React Hook useEffect has a missing dependency: 'presetFilteringSetting'. Either include it or remove the dependency array.",["625"],["626"],["627"],"React Hook useEffect has a missing dependency: 'settingSubmitHandlerSecondAct'. Either include it or remove the dependency array.",["628"],"React Hook useEffect has a missing dependency: 'noticeSettingPreset'. Either include it or remove the dependency array.",["629"],"React Hook useEffect has a missing dependency: 'submitHandlerSecondAct'. Either include it or remove the dependency array.",["630"],["631"],["632"],["633"],["634"],["635"],["636"],"React Hook useEffect has a missing dependency: 'passwordChange'. Either include it or remove the dependency array.",["637"],"React Hook useEffect has a missing dependency: 'blockSettingInitialSetting'. Either include it or remove the dependency array.",["638"],"React Hook useEffect has missing dependencies: 'checked' and 'notificationId'. Either include them or remove the dependency array.",["639"],"React Hook useEffect has missing dependencies: 'groupId' and 'setLoadCommentOfComment'. Either include them or remove the dependency array. If 'setLoadCommentOfComment' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["640"],"React Hook useEffect has a missing dependency: 'loadThisCommentOfComment'. Either include it or remove the dependency array.",["641"],"React Hook useEffect has missing dependencies: 'isLastCommentOfComment' and 'loadThisCommentOfComment'. Either include them or remove the dependency array.",["642"],"React Hook useEffect has missing dependencies: 'imgList.length' and 'pageIndex'. Either include them or remove the dependency array.",["643"],"React Hook useEffect has a missing dependency: 'presetLikeInfo'. Either include it or remove the dependency array.",["644"],{"desc":"645","fix":"646"},{"desc":"647","fix":"648"},{"desc":"649","fix":"650"},{"desc":"651","fix":"652"},{"desc":"653","fix":"654"},{"desc":"655","fix":"656"},{"desc":"657","fix":"658"},{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"661","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"670","fix":"671"},{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"678","fix":"679"},{"desc":"680","fix":"681"},{"desc":"682","fix":"683"},{"desc":"684","fix":"685"},{"desc":"686","fix":"687"},{"desc":"688","fix":"689"},{"desc":"690","fix":"691"},{"desc":"692","fix":"693"},{"desc":"694","fix":"695"},{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},"Update the dependencies array to be: [refreshAccessToken]",{"range":"784","text":"785"},"Update the dependencies array to be: [socialLoginStart, socialState]",{"range":"786","text":"787"},"Update the dependencies array to be: [newPageSumbitClicked, uploadNewPostHandlerSecondAct]",{"range":"788","text":"789"},"Update the dependencies array to be: [uploadImages, uploadNewPostHandlerThirdAct]",{"range":"790","text":"791"},"Update the dependencies array to be: [presetNoticeCount]",{"range":"792","text":"793"},"Update the dependencies array to be: [rightBookState, leftBookState, goBack]",{"range":"794","text":"795"},"Update the dependencies array to be: [noticeCount, noticeEventSource]",{"range":"796","text":"797"},"Update the dependencies array to be: [chattingRoomId, leftBookState, stompClient]",{"range":"798","text":"799"},"Update the dependencies array to be: [chattingTrigerEventSource, rightBookState]",{"range":"800","text":"801"},{"range":"802","text":"801"},"Update the dependencies array to be: [commentStartId, presetDetailPage]",{"range":"803","text":"804"},"Update the dependencies array to be: [inView, isLastComment, presetComment]",{"range":"805","text":"806"},"Update the dependencies array to be: [imageIndex, loading, postedImageList.length]",{"range":"807","text":"808"},"Update the dependencies array to be: [commentToWhom, loading]",{"range":"809","text":"810"},"Update the dependencies array to be: [commentSubmitClicked, userCommitSubmitHandlerSecondAction]",{"range":"811","text":"812"},"Update the dependencies array to be: [leftBookState, loadPageListFunc]",{"range":"813","text":"814"},"Update the dependencies array to be: [inView, isLoadFinish, loadPageListFunc]",{"range":"815","text":"816"},"Update the dependencies array to be: [hashTag, loadHashtagPage]",{"range":"817","text":"818"},"Update the dependencies array to be: [InView, isFinished, loadHashtagPage]",{"range":"819","text":"820"},"Update the dependencies array to be: [leftBookState, userId]",{"range":"821","text":"822"},"Update the dependencies array to be: [loadedUserId, presetUserPageList]",{"range":"823","text":"824"},"Update the dependencies array to be: [getUserPageList, inView, lastPage]",{"range":"825","text":"826"},"Update the dependencies array to be: [chattingRoomId, stompClient]",{"range":"827","text":"828"},"Update the dependencies array to be: [chattingList, newChatting]",{"range":"829","text":"830"},"Update the dependencies array to be: [leftBookState, presetChattingRoomId]",{"range":"831","text":"832"},"Update the dependencies array to be: [preSetChattingRoomInfo, secondFuncTriger]",{"range":"833","text":"834"},"Update the dependencies array to be: [chattingList, currentScrollHeight, loading, needScroll]",{"range":"835","text":"836"},"Update the dependencies array to be: [gettingChattingList, inView, noMoreChat]",{"range":"837","text":"838"},"Update the dependencies array to be: [setNewPostContent, setNewPostHashtag, setNewPostImages, setRenderedNewPostImages]",{"range":"839","text":"840"},"Update the dependencies array to be: [gettingChattingRoomList, rightBookState]",{"range":"841","text":"842"},"Update the dependencies array to be: [chattingTriger, gettingChattingRoomList]",{"range":"843","text":"844"},"Update the dependencies array to be: [chatAndFriendReloadTriger, gettingChattingRoomList, setChatAndFriendReloadTriger]",{"range":"845","text":"846"},"Update the dependencies array to be: [presetFollowerAndFollowee]",{"range":"847","text":"848"},"Update the dependencies array to be: [chosenFriendList, wholeFriendList]",{"range":"849","text":"850"},"Update the dependencies array to be: [createChatClickHandlerSecondAct, newChatSubmitClicked]",{"range":"851","text":"852"},"Update the dependencies array to be: [newPostCommentAuth, newPostCommentNotice, newPostLikeNotice, newPostReadLikeAuth, newPostReadPostAuth]",{"range":"853","text":"854"},"Update the dependencies array to be: [NoticeRead, inView, noMoreNotice]",{"range":"855","text":"856"},"Update the dependencies array to be: [chatAndFriendReloadTriger, rightFriendAndUserProfileChangeHandler]",{"range":"857","text":"858"},"Update the dependencies array to be: [rightFriendPreset]",{"range":"859","text":"860"},"Update the dependencies array to be: [rightFriendPreset, setUserPageAndFriendReloadTriger, userPageAndFriendReloadTriger]",{"range":"861","text":"862"},"Update the dependencies array to be: [password, passwordCheck]",{"range":"863","text":"864"},"Update the dependencies array to be: [data.content, data.nestedCommentCount, presetLikeorNot]",{"range":"865","text":"866"},"Update the dependencies array to be: [COCAddedTriger, data.commentId, getCOCCount, pageId, setCOCAddedTriger]",{"range":"867","text":"868"},"Update the dependencies array to be: [data.like, data.pageDto.content, data.pageDto.likeCount]",{"range":"869","text":"870"},"Update the dependencies array to be: [data.pageDto.pageId, detailPageLikeClick, isLiked, setDetailPageLikeClick]",{"range":"871","text":"872"},"Update the dependencies array to be: [loading, ps_userAgeVisible]",{"range":"873","text":"874"},"Update the dependencies array to be: [loading, ps_userGenderVisible]",{"range":"875","text":"876"},"Update the dependencies array to be: [profileSettingPreset]",{"range":"877","text":"878"},"Update the dependencies array to be: [profileSettingSubmitHandlerSecondAct, profileSubmitClicked]",{"range":"879","text":"880"},"Update the dependencies array to be: [profileSettingSubmitHandlerThirdAct, userProfileUploaded]",{"range":"881","text":"882"},"Update the dependencies array to be: [presetFilteringSetting]",{"range":"883","text":"884"},"Update the dependencies array to be: [filterAll, loading]",{"range":"885","text":"886"},"Update the dependencies array to be: [filterFollowee, loading]",{"range":"887","text":"888"},"Update the dependencies array to be: [filterringSubmitClicked, settingSubmitHandlerSecondAct]",{"range":"889","text":"890"},"Update the dependencies array to be: [noticeSettingPreset]",{"range":"891","text":"892"},"Update the dependencies array to be: [noticeSubmitClicked, submitHandlerSecondAct]",{"range":"893","text":"894"},"Update the dependencies array to be: [loading, notificationFollow]",{"range":"895","text":"896"},"Update the dependencies array to be: [loading, notificationComment]",{"range":"897","text":"898"},"Update the dependencies array to be: [loading, notificationLike]",{"range":"899","text":"900"},"Update the dependencies array to be: [loading, notificationFollowAccept]",{"range":"901","text":"902"},"Update the dependencies array to be: [loading, notificationChat]",{"range":"903","text":"904"},"Update the dependencies array to be: [passwordSubmitClicked, submitHandlerSecondAct]",{"range":"905","text":"906"},"Update the dependencies array to be: [passwordChange, passwordChangeCheck]",{"range":"907","text":"908"},"Update the dependencies array to be: [blockSettingInitialSetting]",{"range":"909","text":"910"},"Update the dependencies array to be: [checked, notificationId]",{"range":"911","text":"912"},"Update the dependencies array to be: [groupId, loadCommentOfComment, setLoadCommentOfComment]",{"range":"913","text":"914"},"Update the dependencies array to be: [loadThisCommentOfComment, toggle]",{"range":"915","text":"916"},"Update the dependencies array to be: [InView, isLastCommentOfComment, loadThisCommentOfComment]",{"range":"917","text":"918"},"Update the dependencies array to be: [imageIndex, imgList.length, pageIndex]",{"range":"919","text":"920"},"Update the dependencies array to be: [presetLikeInfo]",{"range":"921","text":"922"},[2694,2696],"[refreshAccessToken]",[4394,4407],"[socialLoginStart, socialState]",[4285,4307],"[newPageSumbitClicked, uploadNewPostHandlerSecondAct]",[5401,5415],"[uploadImages, uploadNewPostHandlerThirdAct]",[6309,6311],"[presetNoticeCount]",[8917,8948],"[rightBookState, leftBookState, goBack]",[10114,10127],"[noticeCount, noticeEventSource]",[10771,10786],"[chattingRoomId, leftBookState, stompClient]",[11463,11479],"[chattingTrigerEventSource, rightBookState]",[11744,11760],[4366,4382],"[commentStartId, presetDetailPage]",[5346,5354],"[inView, isLastComment, presetComment]",[6259,6271],"[imageIndex, loading, postedImageList.length]",[7883,7898],"[commentToWhom, loading]",[10008,10030],"[commentSubmitClicked, userCommitSubmitHandlerSecondAction]",[1415,1430],"[leftBookState, loadPageListFunc]",[1656,1664],"[inView, isLoadFinish, loadPageListFunc]",[1727,1736],"[hashTag, loadHashtagPage]",[1911,1919],"[InView, isFinished, loadHashtagPage]",[2892,2907],"[leftBookState, userId]",[3896,3910],"[loadedUserId, presetUserPageList]",[4546,4554],"[getUserPageList, inView, lastPage]",[2703,2716],"[chattingRoomId, stompClient]",[2994,3007],"[chattingList, newChatting]",[3772,3787],"[leftBookState, presetChattingRoomId]",[4839,4857],"[preSetChattingRoomInfo, secondFuncTriger]",[6424,6438],"[chattingList, currentScrollHeight, loading, needScroll]",[7173,7181],"[gettingChattingList, inView, noMoreChat]",[689,691],"[setNewPostContent, setNewPostHashtag, setNewPostImages, setRenderedNewPostImages]",[1689,1705],"[gettingChattingRoomList, rightBookState]",[1874,1890],"[chattingTriger, gettingChattingRoomList]",[2128,2155],"[chatAndFriendReloadTriger, gettingChattingRoomList, setChatAndFriendReloadTriger]",[1777,1779],"[presetFollowerAndFollowee]",[3541,3559],"[chosenFriendList, wholeFriendList]",[5654,5676],"[createChatClickHandlerSecondAct, newChatSubmitClicked]",[3108,3110],"[newPostCommentAuth, newPostCommentNotice, newPostLikeNotice, newPostReadLikeAuth, newPostReadPostAuth]",[1529,1537],"[NoticeRead, inView, noMoreNotice]",[1368,1395],"[chatAndFriendReloadTriger, rightFriendAndUserProfileChangeHandler]",[2154,2156],"[rightFriendPreset]",[2377,2408],"[rightFriendPreset, setUserPageAndFriendReloadTriger, userPageAndFriendReloadTriger]",[2848,2863],"[password, passwordCheck]",[1537,1539],"[data.content, data.nestedCommentCount, presetLikeorNot]",[2003,2019],"[COCAddedTriger, data.commentId, getCOCCount, pageId, setCOCAddedTriger]",[1217,1219],"[data.like, data.pageDto.content, data.pageDto.likeCount]",[2090,2111],"[data.pageDto.pageId, detailPageLikeClick, isLiked, setDetailPageLikeClick]",[1558,1577],"[loading, ps_userAgeVisible]",[2034,2056],"[loading, ps_userGenderVisible]",[2739,2741],"[profileSettingPreset]",[4541,4563],"[profileSettingSubmitHandlerSecondAct, profileSubmitClicked]",[5599,5620],"[profileSettingSubmitHandlerThirdAct, userProfileUploaded]",[1811,1813],"[presetFilteringSetting]",[2369,2380],"[filterAll, loading]",[2925,2941],"[filterFollowee, loading]",[4565,4590],"[filterringSubmitClicked, settingSubmitHandlerSecondAct]",[1322,1324],"[noticeSettingPreset]",[2863,2884],"[noticeSubmitClicked, submitHandlerSecondAct]",[4767,4787],"[loading, notificationFollow]",[5904,5925],"[loading, notificationComment]",[7006,7024],"[loading, notificationLike]",[7635,7661],"[loading, notificationFollowAccept]",[8218,8236],"[loading, notificationChat]",[3255,3278],"[passwordSubmitClicked, submitHandlerSecondAct]",[3911,3932],"[passwordChange, passwordChangeCheck]",[1229,1231],"[blockSettingInitialSetting]",[727,729],"[checked, notificationId]",[1373,1395],"[groupId, loadCommentOfComment, setLoadCommentOfComment]",[2138,2146],"[loadThisCommentOfComment, toggle]",[2450,2458],"[InView, isLastCommentOfComment, loadThisCommentOfComment]",[904,916],"[imageIndex, imgList.length, pageIndex]",[1498,1500],"[presetLikeInfo]"]