[{"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\index.js":"1","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\App.js":"2","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\apiUrl.js":"3","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js":"4","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js":"5","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js":"6","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js":"7","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\detailPage.js":"8","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js":"9","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js":"10","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js":"11","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js":"12","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\hashtagPage\\hashtagPage.js":"13","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js":"14","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js":"15","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js":"16","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js":"17","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newChat\\newChat.js":"18","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js":"19","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js":"20","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js":"21","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js":"22","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js":"23","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js":"24","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js":"25","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js":"26","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js":"27","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js":"28","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js":"29","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js":"30","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\logo\\Logo.js":"31"},{"size":197,"mtime":1665017350499,"results":"32","hashOfConfig":"33"},{"size":6395,"mtime":1666076970764,"results":"34","hashOfConfig":"33"},{"size":6399,"mtime":1666142946476,"results":"35","hashOfConfig":"33"},{"size":1908,"mtime":1665536368369,"results":"36","hashOfConfig":"33"},{"size":18549,"mtime":1666146457387,"results":"37","hashOfConfig":"33"},{"size":310,"mtime":1666141908256,"results":"38","hashOfConfig":"33"},{"size":3344,"mtime":1665448980672,"results":"39","hashOfConfig":"33"},{"size":34889,"mtime":1666242883237,"results":"40","hashOfConfig":"33"},{"size":1130,"mtime":1665017350516,"results":"41","hashOfConfig":"33"},{"size":14219,"mtime":1665622431256,"results":"42","hashOfConfig":"33"},{"size":6816,"mtime":1665622431256,"results":"43","hashOfConfig":"33"},{"size":12106,"mtime":1666160682794,"results":"44","hashOfConfig":"33"},{"size":2801,"mtime":1665022614297,"results":"45","hashOfConfig":"33"},{"size":8060,"mtime":1665017350499,"results":"46","hashOfConfig":"33"},{"size":7753,"mtime":1665888062234,"results":"47","hashOfConfig":"33"},{"size":5161,"mtime":1666073805004,"results":"48","hashOfConfig":"33"},{"size":17334,"mtime":1665017350516,"results":"49","hashOfConfig":"33"},{"size":9981,"mtime":1666074473356,"results":"50","hashOfConfig":"33"},{"size":2602,"mtime":1665017350516,"results":"51","hashOfConfig":"33"},{"size":4529,"mtime":1665622431256,"results":"52","hashOfConfig":"33"},{"size":14187,"mtime":1665535015336,"results":"53","hashOfConfig":"33"},{"size":5651,"mtime":1665534933292,"results":"54","hashOfConfig":"33"},{"size":2578,"mtime":1665535095222,"results":"55","hashOfConfig":"33"},{"size":11319,"mtime":1665622431256,"results":"56","hashOfConfig":"33"},{"size":1466,"mtime":1665017350499,"results":"57","hashOfConfig":"33"},{"size":16978,"mtime":1665622431256,"results":"58","hashOfConfig":"33"},{"size":8865,"mtime":1665622431256,"results":"59","hashOfConfig":"33"},{"size":6872,"mtime":1665622431256,"results":"60","hashOfConfig":"33"},{"size":13679,"mtime":1665622431256,"results":"61","hashOfConfig":"33"},{"size":688,"mtime":1665017350516,"results":"62","hashOfConfig":"33"},{"size":407,"mtime":1665535800081,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"9ba2bc",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"67"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"67"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"67"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"67"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"67"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"67"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"67"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"67"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"67"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"67"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"67"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"67"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"67"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"67"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"67"},"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\index.js",[],[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\App.js",["175","176"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\apiUrl.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js",["177","178","179","180","181","182","183","184","185"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js",["186"],[],"//검색창\r\nimport { useEffect } from 'react';\r\nimport Style from './searchBar.module.css';\r\n\r\nconst SingleSearchList = ({data, clickFunc}) => {\r\n    const mouseOverHandler = (event) => {\r\n        document.querySelector(`#cover_${data.userId}`).style.backgroundColor=\"rgb(190, 190, 190)\";\r\n    }\r\n    const mouseOutHandler = (event) => {\r\n        document.querySelector(`#cover_${data.userId}`).style.backgroundColor=\"white\";\r\n    }\r\n    return(\r\n        data.userId === -1 ?\r\n        <div id={`cover_${data.userId}`} className={Style.content} onMouseOver={mouseOverHandler} onMouseOut={mouseOutHandler} onClick={clickFunc}>\r\n            <div id={`image_${data.userId}`} className={Style.searchedUserImage} onClick={clickFunc}/>\r\n            <p id={`nickname_${data.userId}`} className={Style.searchedUserNickname} onClick={clickFunc}>{data.nickname}</p>\r\n        </div>\r\n        :\r\n        <div id={`cover_${data.userId}`} className={Style.content} onMouseOver={mouseOverHandler} onMouseOut={mouseOutHandler} onClick={clickFunc}>\r\n            <img id={`image_${data.userId}`} src={data.imgUrl} className={Style.searchedUserImage} onClick={clickFunc}/>\r\n            <p id={`nickname_${data.userId}`} className={Style.searchedUserNickname} onClick={clickFunc}>{data.nickname}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst SearchBar = ({userSearch, hashtagPageNumber, userSearchChangeHandler, userSearchSubmitHandler, isSubmitted, searchedList, searchedUserClickHandler, searchedHashtagClickHandler}) =>{\r\n    \r\n    //dropbox를 활성화 하는 함수\r\n    const dropBoxActivate = () => {\r\n        if(userSearch.length >= 1){\r\n            document.querySelector(\"#searchBarDropBox\").style.display = \"flex\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#searchBarDropBox\").style.display = \"none\";\r\n        }\r\n    };\r\n    useEffect(dropBoxActivate, [userSearch]);\r\n\r\n    return(\r\n        <form className={Style.searchBarCover} onSubmit={userSearchSubmitHandler}>\r\n            <input \r\n                type=\"text\"\r\n                className={Style.searchBar}\r\n                placeholder=\"검색\"\r\n                value={userSearch}\r\n                onChange={userSearchChangeHandler}\r\n            />\r\n            <div id=\"searchBarDropBox\" className={Style.dropBox}>\r\n                {\r\n                    isSubmitted ?\r\n                    <div className={Style.dropBoxInner}>\r\n                        <SingleSearchList data={{userId: -1, nickname: `#${userSearch} 게시물 ${hashtagPageNumber}개`, imgUrl: \"#\"}} index={0} clickFunc={searchedHashtagClickHandler}/> \r\n                        {\r\n                            searchedList.map((data, index) => (\r\n                                <SingleSearchList data={data} key={index} clickFunc={searchedUserClickHandler} />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <div className={Style.dropBoxInner}>\r\n                        <p style={{textAlign: \"center\", paddingTop: \"30px\"}}>검색어를 검색합니다. 엔터를 눌러주세요.</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\detailPage.js",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js",["205","206","207","208","209","210","211","212","213"],[],"//유저 프로필 화면\r\nimport Style from './pageList.module.css';\r\nimport followBefImg from './user_plus.png';\r\nimport followAftImg from './user_check.png';\r\nimport moreStuff from '../../root/moreStuff.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getUserPageListUrl,\r\n    getUserNicknameAndImageUrl,\r\n    getFolloweeListUrl,\r\n    getfollowerListUrl,\r\n    ReportUrl,\r\n    BlockUserURl,\r\n    followUserUrl,\r\n    unfollowUserUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst UserListArea = ({bottomStuff, refreshAccessToken, leftBookChangeHandler, setted, leftBookState}) => {\r\n    const [userList, setUserList] = useState([]);\r\n\r\n    //페이지 이동 시 초기화함수\r\n    const reset = () => {\r\n        setUserList([]);\r\n    };\r\n    useEffect(reset, [leftBookState]);\r\n\r\n    //팔로워/팔로잉을 불러오는 함수\r\n    const presetUserListArea = () => {\r\n        if(!setted) return;\r\n        let followerOfFolloweeUrl = \"\";\r\n        bottomStuff === \"FOLLOWER\" ? \r\n        followerOfFolloweeUrl = getfollowerListUrl\r\n        :\r\n        bottomStuff === \"FOLLOWEE\" ?\r\n            followerOfFolloweeUrl = getFolloweeListUrl\r\n            :\r\n            followerOfFolloweeUrl = \"\"\r\n        if(followerOfFolloweeUrl === \"\") return; //에러상황\r\n\r\n        axios.get(followerOfFolloweeUrl)\r\n        .then((res) =>{\r\n            setUserList(res.data.data);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"팔로워/팔로잉를 불러오지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n    useEffect(presetUserListArea, [bottomStuff]);\r\n\r\n    const userClickHander = (event) => {\r\n        event.preventDefault();\r\n        leftBookChangeHandler(\"pList/\" + document.querySelector('[id^=pageListUserId]').id.split('_')[1]);\r\n    };\r\n\r\n    return(\r\n        <div className={Style.pageArea}>\r\n            {\r\n                userList.map((data, index) => (\r\n                    <div className={Style.userArea} key={index} onClick={userClickHander} id={`pageListUserId_${data.userId}`}>\r\n                        <img src={data.imgUrl}className={Style.userImg} />\r\n                        <p className={Style.userNickname}>{data.nickname}</p>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PageListArea = ({loadedUserId, refreshAccessToken, setPageId, setted, leftBookState}) => {\r\n    const [userPageList, setUserPageList] = useState([]);\r\n    const [pageStartId, setPageStartId] = useState(987654321);\r\n    const [triger, setTriger] = useState(false);\r\n\r\n    const reset = () => {\r\n        setUserPageList([]);\r\n        setPageStartId(987654321);\r\n        setTriger(true);\r\n    };\r\n    useEffect(reset, [leftBookState]);\r\n\r\n    const presetUserPageList = () => {\r\n        setTriger(false);\r\n        if(!setted) return;\r\n        axios.get(getUserPageListUrl + loadedUserId.toString() + \"?startId=\" + pageStartId.toString())\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            const currentList = [...userPageList];\r\n            const next = currentList.concat(tmp);\r\n            setUserPageList(next);\r\n            setPageStartId(res.data.startId);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"글을 불러오지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n    useEffect(presetUserPageList, [triger]);\r\n\r\n    const singlePageClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setPageId(event.target.id);\r\n    };\r\n\r\n    return(\r\n        <div className={Style.pageArea}>\r\n            {\r\n                userPageList.map((data, index) => (\r\n                    <img src={data.imgUrl} className={Style.singlePage} key={index} id={data.pageId} onClick={singlePageClickHandler}/>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeftPageList = ({leftBookState, refreshAccessToken, leftBookChangeHandler, setPageId, userId}) => {//일단 leftBookState를 확인해야한다. pageList/{userId}로 되어있음 userId의 유저 게시글과 이미지, 이름을 불러와서 로딩한다.\r\n    const [userImage, setUserImage] = useState(\"\");//해당 프로필의 유저 이미지\r\n    const [userNickname, setUserNickname] = useState(\"\");//해당 프로필의 유저 닉네임\r\n    const [userIntroduce, setUserIntroduce] = useState(\"\");//해당 프로필의 유저 자기소개\r\n    const [followerCount, setFollowerCount] = useState(0);//팔로워 숫자\r\n    const [followeeCount, setFolloweeCount] = useState(0);//팔로잉 숫자\r\n    const [isFollowed, setIsFollowed] = useState(false);//해당 유저를 내가 이미 팔로우 중인지 확인\r\n    const [isMyPage, setIsMyPage] = useState(false);\r\n    const [bottomStuff, setBottomStuff] = useState(\"PAGE\");//PAGE, FOLLOWEE, FOLLOWER가 가능한 값이다. 이 값에 따라 하단 내용이 달라진다.\r\n    const [setted, setSetted] = useState(false);\r\n    const [userDropBoxToggle, setUserDropBoxToggle] = useState(false);//...누르면 뜨는거 활성화 toggle\r\n    const [loadedUserId, setLoadedUserId] = useState(\"\");\r\n\r\n    /**************************초기 설정******************************/\r\n    const loadLoadedUserId = () => {//지금 어떤 페이지로 들어왔는지 확인한다.\r\n        //먼저 나의 id와 지금 들어온 id가 동일하면, isMyPage를 true로 바꿔주고 작업한다.\r\n        setLoadedUserId(Number(leftBookState.split('/')[1]));\r\n        setBottomStuff(\"PAGE\");//또한 기존에 이 페이지가 로드되어있었을 수 있으므로 초기화한다.\r\n        if(userId === Number(leftBookState.split('/')[1])){//자기 자신의 페이지를 불러온 경우\r\n            setIsMyPage(true);\r\n        }\r\n        else{\r\n            setIsMyPage(false);\r\n        }\r\n    };\r\n    useEffect(loadLoadedUserId, [leftBookState]);\r\n\r\n    const presetUserPageList = () => {\r\n        if(loadedUserId === \"\") return;//초기 상황인 경우 즉시 종료한다.\r\n        axios.get(getUserNicknameAndImageUrl + loadedUserId + \"/profile\")\r\n        .then((res) => {\r\n            setUserImage(res.data.data.imgUrl);\r\n            setUserNickname(res.data.data.nickname);\r\n            setUserIntroduce(res.data.data.selfIntroduction);\r\n            setFollowerCount(res.data.data.followerCount);\r\n            setFolloweeCount(res.data.data.followeeCount);\r\n            setSetted(true);\r\n            setIsFollowed(res.data.data.follow);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"이미지와 닉네임을 불러오지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n    useEffect(presetUserPageList, [loadedUserId]);\r\n\r\n    /**************************관리 부분*****************************/\r\n    //게시물 클릭 시 handler\r\n    const pageClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setBottomStuff(\"PAGE\");\r\n    };\r\n\r\n    //팔로워 클릭 시 handler\r\n    const followerClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(isMyPage){\r\n            setBottomStuff(\"FOLLOWER\");\r\n        }\r\n    };\r\n\r\n    const followeeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(isMyPage){\r\n            setBottomStuff(\"FOLLOWEE\");\r\n        }\r\n    };\r\n\r\n    //...누르는 함수\r\n    const userDropBoxToggleClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserDropBoxToggle((cur) => !cur);\r\n    };\r\n\r\n    //유저 팔로우/팔로우 취소 함수\r\n    const followClickHandler = (event) => {\r\n        let followOrUnfollowUrl = \"\";\r\n        isFollowed ? followOrUnfollowUrl = unfollowUserUrl : followOrUnfollowUrl = followUserUrl\r\n        axios.post(followOrUnfollowUrl,{\r\n            userId: loadedUserId\r\n        })\r\n        .then((res) => {\r\n            alert(\"팔로우/팔로우를 취소했습니다.\");\r\n            setIsFollowed((cur) => !cur);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"해당 유저를 팔로우/ 팔로우 취소하지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n\r\n    //유저 신고함수\r\n    const userReportClickHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(ReportUrl, {\r\n            targetId: loadedUserId,\r\n            type: \"USER\",\r\n        })\r\n        .then((res) => {\r\n            alert(\"해당 유저를 신고했습니다.\");\r\n        })\r\n        .catch((res) =>{\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"해당 유저를 신고하지 못했습니다.\");\r\n            }\r\n        })\r\n    };\r\n\r\n    //유저 차단함수\r\n    const userBlockClickHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(BlockUserURl, {\r\n            userId: loadedUserId,\r\n        })\r\n        .then((res) => {\r\n            alert(\"해당 유저를 차단했습니다.\");\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"해당 유저를 차단하지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n    \r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.profileCover}>\r\n                <img src={userImage} className={Style.profileImg} />\r\n                <p className={Style.profileName}>{userNickname}</p>\r\n                { isMyPage ? /* 타인만 필요 */\r\n                    null \r\n                    : \r\n                    <img \r\n                        src={isFollowed ? followAftImg : followBefImg}\r\n                        onClick={followClickHandler}\r\n                        style={{marginRight: \"30px\", cursor: \"pointer\"}}\r\n                    />\r\n                }\r\n                { isMyPage ? /* 타인만 필요 */\r\n                    null \r\n                    :\r\n                    <div className={Style.dropBoxCover}>\r\n                        <img src={moreStuff} className={Style.dropBoxBtn} onClick={userDropBoxToggleClickHandler}/>\r\n                        {\r\n                            userDropBoxToggle ?\r\n                            <div className={Style.userDropBox}>\r\n                                <div \r\n                                    className={Style.settingBlock}\r\n                                    style={{\r\n                                        borderRight: \"1px solid rgb(190, 190, 190)\",\r\n                                        borderRadius: \"0.5rem 0 0 0.5rem\"\r\n                                    }}\r\n                                    onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                    onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                    onClick={userReportClickHandler}>\r\n                                    신고\r\n                                </div>\r\n                                <div \r\n                                    className={Style.settingBlock}\r\n                                    style={{borderRight: \"1px solid rgb(190, 190, 190)\"}}\r\n                                    onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                    onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                    onClick={userBlockClickHandler}>\r\n                                    차단\r\n                                </div>\r\n                                <div \r\n                                    className={Style.settingBlock}\r\n                                    style={{borderRadius: \"0 0.5rem 0.5rem 0\"}}\r\n                                    onMouseOver={(event) => event.target.style.backgroundColor=\"rgb(200,200,200)\"}\r\n                                    onMouseOut={(event) => event.target.style.backgroundColor=\"white\"}\r\n                                    onClick={() => setUserDropBoxToggle((cur) => !cur)}>\r\n                                    닫기\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            null\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n            {/* 게시물, 팔로워, 팔로우 하는 사람을 볼 수 있는 곳으로, 내 페이지인 경우만 팔로워, 팔로우 하는 사람을 볼 수 있다. */}\r\n            <div className={Style.pageFollowerFolloweeCover}>\r\n                <p onClick={pageClickHandler} style={{cursor:\"pointer\"}}>게시물</p>\r\n                <p onClick={followerClickHandler} style={isMyPage ? {cursor:\"pointer\"} : null}>{`팔로워 ${followerCount}`}</p>\r\n                <p onClick={followeeClickHandler} style={isMyPage ? {cursor:\"pointer\"} : null}>{`팔로잉 ${followeeCount}`}</p>\r\n            </div>\r\n            <p style={{height:\"fit-content\"}}>{userIntroduce}</p>\r\n            {bottomStuff === \"PAGE\" && setted? <PageListArea bottomStuff={bottomStuff} loadedUserId={loadedUserId} refreshAccessToken={refreshAccessToken} setPageId={setPageId} setted={setted} leftBookState={leftBookState}/> : null}\r\n            {(bottomStuff === \"FOLLOWER\" || bottomStuff === \"FOLLOWEE\") && setted ? <UserListArea bottomStuff={bottomStuff} refreshAccessToken={refreshAccessToken} leftBookChangeHandler={leftBookChangeHandler} setted={setted} leftBookState={leftBookState}/> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPageList;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js",["214","215","216","217","218","219","220","221","222","223"],[],"//피드 여러개 띄우는 화면\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport moreStuff from './moreStuff.png';\r\nimport leftArrow from './caret_left.png';\r\nimport rightArrow from './caret_right.png'\r\nimport heartBtn from './heart_outline.png';\r\nimport heartFillBtn from './heart_fill.png';\r\nimport axios from 'axios';\r\nimport Style from './page.module.css';\r\nimport {\r\n    pageloadUrl,\r\n} from \"../../../../apiUrl\";\r\n\r\nconst ImageArea = ({imgList, pageIndex}) => {\r\n    const [imageIndex, setImageIndex] = useState(0);//보고있는 이미지의 index\r\n\r\n    /* 이미지 영역 */\r\n    const leftArrowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(imageIndex === 0) return;//넘어서지 않게 한다\r\n        else setImageIndex((cur) => cur - 1);\r\n    };\r\n\r\n    const rightArrowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(imageIndex === imgList.length - 1) return;//넘어서지 않게 한다\r\n        else setImageIndex((cur) => cur + 1);\r\n    };\r\n\r\n    const moveImageHandler = () => {\r\n        document.querySelector(`#onlyImageArea_${pageIndex}`).style.transform = `translate(-${(imageIndex * 100) / imgList.length}%)`;\r\n    };\r\n    useEffect(moveImageHandler, [imageIndex]);\r\n\r\n    return(\r\n        <div className={Style.imageArea}>\r\n            <div className={Style.onlyImageArea}>\r\n                <div style={{overflow:\"hidden\"}}>\r\n                    <div id={`onlyImageArea_${pageIndex}`} style={{width:`${100 * imgList.length}%`, height: \"100%\", transition: \"transform 0.5s\"}}>\r\n                        {\r\n                            imgList.map((imageUrl, index) =>\r\n                                <div style={{height: \"100%\", width: `${100 / imgList.length}%`, float: \"left\"}} key={index}>\r\n                                    <img src={imageUrl} style={{width: \"100%\", height: \"100%\", objectFit: \"contain\"}}/>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.ImageBtnArea}>\r\n                {\r\n                    imgList.length === 1 ?\r\n                    null\r\n                    :\r\n                    <div className={Style.flexBoxCenter}>\r\n                        <img id={`leftArrow_${pageIndex}`} src={leftArrow} className={Style.ImageChangeBtn} onClick={leftArrowClickHandler}/>\r\n                        <img id={`rightArrow_${pageIndex}`} src={rightArrow} className={Style.ImageChangeBtn} onClick={rightArrowClickHandler}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Pages = ({pageList, lastPage, setPageId}) => {\r\n    const pageClickFunc = () => {\r\n        setPageId(document.querySelector('[id^=singlePageId]').id.split('_')[1]);\r\n    };\r\n\r\n    return(\r\n        <div className={Style.pageListArea}>\r\n            {\r\n                pageList.length === 0 ?\r\n                <p className={Style.noPageText}>글이 존재하지 않습니다.. 너무도 조용합니다..</p>\r\n                :\r\n                pageList.map((data, index) => (\r\n                    <div className={Style.singlePageCover} key={index} id={`singlePageId_${data.pageDto.pageId}`} ref={index === (pageList.length - 1) ? lastPage : null}>\r\n                        {/* 프로필 영역 */}\r\n                        <div className={Style.profileArea}>\r\n                            <div className={Style.flexBoxCenter}>\r\n                                <img src={data.pageDto.userDto.imgUrl} className={Style.profileImage} />\r\n                            </div>\r\n                            <div className={Style.flexBoxStart}>\r\n                                <p className={Style.profileNickname}>{data.pageDto.userDto.nickname}</p>\r\n                            </div>\r\n                            <div className={Style.flexBoxCenter}>\r\n                                <img src={moreStuff} className={Style.profileSetting} />\r\n                            </div>\r\n                        </div>\r\n                        {/* 이미지 영역 */}\r\n                        <ImageArea imgList={data.imgUrlList} pageIndex={index}/>\r\n                        {/* 아래 좋아요랑 글 영역 */}\r\n                        <div className={Style.pageLikeAndContentArea} onClick={pageClickFunc}>\r\n                            <div className={Style.pagelikearea}>\r\n                                <img src={heartBtn} className={Style.pageLikeBtn} />\r\n                            </div>\r\n                            <div className={Style.pageContentArea}>\r\n                                <p className={Style.pageContent}>{data.pageDto.content}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeftPage = ({refreshAccessToken, leftBookState, setPageId}) => {\r\n    const [pageStartId, setPageStartId] = useState(987654321);//글 리스트의 startId\r\n    const [pageList, setPageList] = useState([]); //글 리스트\r\n    const [lastPage, inView] = useInView(); //이게 ref된 요소가 화면에 보이면 inView가 true로 변경\r\n    const [isLoadFinish, setIsLoadFinish] = useState(false);//false면 더 이상 로드할 내용이 남은 경우, true면 로드할 내용이 더 없는 경우이다.\r\n\r\n    //게시글 로드 함수\r\n    const loadPageListFunc = () => {\r\n        axios.get(`${pageloadUrl}?startId=${pageStartId}`)\r\n        .then((res) => {\r\n            const cur = [...pageList];\r\n            const tmp = [...res.data.data];\r\n            if(tmp.length === 0){\r\n                setIsLoadFinish(true);//더 이상 글이 없는 경우이다.\r\n                return;\r\n            }\r\n            const next = cur.concat(tmp);\r\n            setPageList(next);\r\n            setPageStartId(res.data.startId);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"글을 로드해 오지 못했습니다.\");\r\n            }\r\n        });\r\n    };\r\n    useEffect(loadPageListFunc, [leftBookState]);//state가 바뀌면 다시 load\r\n\r\n    //화면의 마지막이 읽히면 조건을 확인해서 글을 로드하는 함수\r\n    const loadMorePageFunc = () => {\r\n        if(!isLoadFinish && inView){\r\n            loadPageListFunc();\r\n        }\r\n    };\r\n    useEffect(loadMorePageFunc, [inView]);\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <Pages pageList={pageList} lastPage={lastPage} setPageId={setPageId}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPage;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js",["224","225","226","227","228","229","230","231","232"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\hashtagPage\\hashtagPage.js",["233","234","235"],[],"import Style from './hashtagPage.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport axios from 'axios';\r\nimport{\r\n  pageLoadHashtagUrl,\r\n} from '../../../../apiUrl';\r\n\r\nconst LeftHashtagPage = ({leftBookState, setPageId}) => {\r\n  const [hashTag, setHashTag] = useState(\"\");//받아온 해시태그\r\n  const [hashTagPageList, setHashTagPageList] = useState([]);//글 리스트\r\n  const [hashTagPageStartId, setHashTagPageStartId] = useState(987654321);//글 리스트의 startId\r\n  const [isFinished, setIsFinished] = useState(false);//페이지 로딩이 끝난 경우 더 이상 불리지 않게 세팅한다.\r\n  const [lastHashtagPage, InView] = useInView();//마지막 페이지에 세팅한다.\r\n\r\n  /***************************초기 세팅 함수********************************/\r\n  //처음에 해시태그 받는 함수\r\n  const hashTagpreset = () => {\r\n    setHashTag(leftBookState.split('/')[1]);\r\n    setHashTagPageStartId(987654321);//초기상태로 전환\r\n    setIsFinished(false);//초기 상태로 전환\r\n  };\r\n  useEffect(hashTagpreset, [leftBookState]);//state변경 시 실행\r\n\r\n  //해시태그로 검색한 게시글을 불러오는 함수\r\n  const loadHashtagPage = () => {\r\n    if(hashTag === \"\") return; //빈 문자열인 경우 종료\r\n\r\n    axios.get(`${pageLoadHashtagUrl}${hashTag}&startId=${hashTagPageStartId}`)\r\n    .then((res) => {\r\n      const tmp = [...res.data.data];\r\n      if(tmp.length === 0){\r\n        setIsFinished(true);\r\n        return;\r\n      }\r\n      const cur = [...hashTagPageList];\r\n      const next = cur.concat(tmp);\r\n      setHashTagPageList(next);\r\n      setHashTagPageStartId(res.data.startId);\r\n    })\r\n    .catch((res) => {\r\n\r\n    })\r\n  };\r\n  useEffect(loadHashtagPage, [hashTag]);//해시태그 변경 시 실행한다.\r\n\r\n  //마지막 요소가 보이면 로드한다.\r\n  const lastPageSeen = () => {\r\n    if(InView && !isFinished){\r\n      loadHashtagPage();\r\n    }\r\n  };\r\n  useEffect(lastPageSeen, [InView]);\r\n\r\n  /******************************이후 관리 함수*********************************/\r\n  const hastTagPageClickHandler = (event) => {\r\n    setPageId(event.target.id);\r\n  };\r\n\r\n  return(\r\n    <div className={Style.wholeCover}>\r\n      <p className={Style.AnswerText}>{`검색하신 \"#${hashTag}\"에 대한 게시물입니다.`}</p>\r\n      {\r\n        hashTagPageList.map((data, index) => (\r\n          <img \r\n            key={index}\r\n            src={data.imgUrl}\r\n            id={data.pageId}\r\n            onClick={hastTagPageClickHandler}\r\n            className={Style.singlePage}\r\n            ref={index === hashTagPageList.length - 1 ? lastHashtagPage : null}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftHashtagPage;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js",["236","237","238","239"],[],"import Style from './newPost.module.css';\r\nimport { useState } from 'react';\r\nimport addImage from '../../root/tagImages/add.png';\r\n\r\nconst HashtagList = ({deleteTag, newPostHashtag}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostHashtag.map((data, index) =>(\r\n                    <button className={Style.singleHashTag} onClick={deleteTag} key={index} value={index}>\r\n                        #{data} \r\n                    </button>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ImageList = ({deleteImage, newPostImages}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostImages.map((data, index) =>(\r\n                    <img className={Style.singlepicture} src={data} key={index} id={index} onClick={deleteImage} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeftNewPost = ({ newPostImages, setNewPostImages, newPostHashtag, setNewPostHashtag, newPostContent, setNewPostContent, uploadNewPostHandler }) => {\r\n    const [hashtag, setHashtag] = useState(\"\");//임시로 입력되는 값 변경하는 State.\r\n\r\n    //글 내용 변경 함수\r\n    const contentHandler = (event) => {\r\n        event.preventDefault();\r\n        setNewPostContent(event.target.value);\r\n    }\r\n\r\n    //받은 파일리스트가 유효한지 검사하는 함수\r\n    const ImageValid = (data) => {\r\n        let answer = true;\r\n        //먼저 받은 데이터가 1개인지 확인\r\n        if(data.length !== 1){\r\n            alert(\"한 번에 하나의 이미지를 드랍해주십시오.\");\r\n            return false;\r\n        }\r\n\r\n        //받은 input들에 대해서 이미지 여부, 용량 여부(5메가 이하),\r\n        data.map((d, index) => {\r\n            if(!(d.type === 'image/png' || d.type === 'image/jpg' || d.type === 'image/jpeg')){\r\n                alert(`이미지 파일만 업로드 가능합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            if(d.size > 1024 * 1024 * 50){\r\n                alert(`50MB 이상의 이미지는 업로드 불가합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            newPostImages.map((cd, index) => {\r\n                if(cd.name === d.name){\r\n                    alert(`같은 이름의 파일이 이미 업로드 되어있습니다.\\n${d.name}`);\r\n                    answer = false;\r\n                }\r\n            });\r\n        });\r\n        return answer;\r\n    };\r\n\r\n    //이미지 영역에 파일을 드랍한 경우 - ondrop\r\n    const imageDropHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const inputFile = [...event.dataTransfer?.files];//지금 들어온 파일이다.\r\n        if(ImageValid(inputFile)){//유효한 파일인 경우 집어넣는다.\r\n            //이미지를 랜더링 해서 집어넣는다.\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(inputFile[0]);\r\n            reader.onload = (imageData) => {\r\n                const curPreview = [...newPostImages];\r\n                curPreview.push(imageData.target.result);\r\n                setNewPostImages(curPreview);\r\n            }\r\n        }\r\n\r\n        //CSS는 반드시 실행된다.\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 영역 위에 파일을 올려놓은 경우 - ondragover(이게 있어야 ondrop이 활성화 된다.)\r\n    const imageDragOverHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    //파일을 이미지 영역 위로 최초 진입한 경우 - ondragenter\r\n    const imageDragEnterHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"0.5\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"hidden\";\r\n        imageUploadArea.style.backgroundColor=\"rgb(236, 236, 236)\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(150, 150, 150)\";\r\n    };\r\n\r\n    //파일을 이미지 영역 위에서 벗어나게 한 경우 - ondragleave\r\n    const imageDragLeaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"visible\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 미리 보기 화면 바꿔주는 함수\r\n\r\n\r\n    //hashtag영역 바꿔주는 함수\r\n    const hashtagHandler = (event) => {\r\n        event.preventDefault();\r\n        const value = event.target.value;\r\n        if(value === \" \"){\r\n            alert(\"1글자 이상의 키워드를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(value[value.length - 1] === \" \"){// 이 경우 \r\n            const tmp = newPostHashtag;\r\n            const input = value.slice(0,-1);\r\n            if(!newPostHashtag.includes(input)){\r\n                tmp.push(input);\r\n                setNewPostHashtag(tmp);\r\n                setHashtag(\"\");\r\n            }\r\n            setHashtag(\"\");\r\n        }\r\n        else{\r\n            setHashtag(value);\r\n        }\r\n    }\r\n\r\n    //hashtag 지우는 함수\r\n    const deleteTag = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostHashtag];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setNewPostHashtag(tmp);\r\n    };\r\n\r\n    //이미지 지우는 함수\r\n    const deleteImage = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostImages];\r\n        tmp.splice(Number(event.target.id), 1);\r\n        setNewPostImages(tmp);\r\n    }\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={uploadNewPostHandler}>\r\n            {/* 드래그 앤 드롭 영역 */}\r\n            <div className={Style.pictureArea}>\r\n                <div className={Style.picture} id=\"imageUploadArea\" onDrop={imageDropHandler} onDragOver={imageDragOverHandler} onDragEnter={imageDragEnterHandler} onDragLeave={imageDragLeaveHandler}>\r\n                    <img src={addImage} className={Style.pictureinnerimage} id=\"imageUploadImage\"/>\r\n                    <p className={Style.pictureinnerword} id=\"imageUploadMent\">업로드할 이미지를 여기로 옮겨주세요.</p>\r\n                </div>\r\n            </div>\r\n            {/* 올린 이미지 미리 보기 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <ImageList deleteImage={deleteImage} newPostImages={newPostImages} />\r\n            </div>\r\n            {/* hashtag label 영역 */}\r\n            <p className={Style.hashtag}>키워드 (띄어쓰기로 분리해주세요)</p>\r\n            {/* hashtag input 영역 */}\r\n            <input \r\n                type=\"text\"\r\n                value={hashtag}\r\n                onChange={hashtagHandler}\r\n                className={Style.hashtagInput}\r\n            />\r\n            {/* hashtag list 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <HashtagList deleteTag={deleteTag} newPostHashtag={newPostHashtag}/>\r\n            </div>\r\n            {/* word label 영역 */}\r\n            <p className={Style.word}>글을 입력해 주세요</p>\r\n            {/* word input 영역 */}\r\n            <textarea \r\n                type=\"text\" \r\n                vaslue={newPostContent}\r\n                onChange={contentHandler}\r\n                className={Style.wordInput} />\r\n            {/* 글 제출 영역 */}\r\n            <div className={Style.area}>\r\n                <button type=\"submit\" className={Style.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default LeftNewPost;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js",["240","241","242","243","244"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js",["245","246","247","248","249","250","251","252","253","254","255","256"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js",["257"],[],"import Style from './newPost.module.css';\r\nimport {useEffect} from 'react';\r\n\r\nconst RightNewPost = ({newPostLikeNotice, setNewPostLikeNotice, newPostCommentNotice, setNewPostCommentNotice, newPostReadPostAuth, setNewPostReadPostAuth, newPostReadCommentAuth, setNewPostReadCommentAuth, newPostWriteCommentAuth, setNewPostWriteCommentAuth, newPostReadLikeAuth, setNewPostReadLikeAuth}) => {\r\n    //초기에 모든 허용을 진하게 만드는 함수\r\n    const firstColoring = () => {\r\n        //좋아요 알림부분 반영\r\n        if(newPostLikeNotice){\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 알림 부분 반영\r\n        if(newPostCommentNotice){\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //읽기 권한 반영\r\n        if(newPostReadPostAuth === \"ALL\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else if(newPostReadPostAuth === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 읽기 반영\r\n        if(newPostReadCommentAuth){\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 쓰기 반영\r\n        if(newPostWriteCommentAuth){\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n        \r\n        //좋아요 읽기 반영\r\n        if(newPostReadLikeAuth){\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(firstColoring, []);\r\n\r\n    //누른 설정을 반영하는 함수\r\n    //좋아요 알림\r\n    const likeNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostLikeNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"likeNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostLikeNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"likeNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostLikeNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 알림\r\n    const commentNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostCommentNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"commentNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostCommentNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"commentNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostCommentNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //읽기 권한 - 얘만 3개다.\r\n    const readPostAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(clicked === \"readPostAuthAllow\"){//허용이 눌린 경우\r\n            if(newPostReadPostAuth !== \"ALL\"){//근데 이미 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"ALL\");//허용으로 변경\r\n            }\r\n        }\r\n        else if(clicked === \"readPostAuthHalfAllow\"){//팔로우만 허용인 경우\r\n            if(newPostReadPostAuth !== \"FOLLOW_ONLY\"){//근데 이미 팔로우만 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"FOLLOW_ONLY\");//팔로우만 허용으로 변경\r\n            }\r\n        }\r\n        else{//거부인 경우\r\n            if(newPostReadPostAuth !== \"NONE\"){//근데 이미 거부로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"NONE\");//거부로 변경\r\n            }\r\n        }\r\n    };\r\n    //댓글 읽기 권한\r\n    const readCommentAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 쓰기 권한\r\n    const writeCommentAuthHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostWriteCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostWriteCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostWriteCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //좋아요 읽기 권한\r\n    const readLikeAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadLikeAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readLikeAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadLikeAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readLikeAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadLikeAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className={Style.WholeCover}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeAllow\" onClick={likeNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeDenial\" onClick={likeNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeAllow\" onClick={commentNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeDenial\" onClick={commentNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthAllow\" onClick={readPostAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthHalfAllow\" onClick={readPostAuthClickHandler}>팔로우 된 사람만 허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthDenial\" onClick={readPostAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthAllow\" onClick={readCommentAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthDenial\" onClick={readCommentAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 쓰기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthAllow\" onClick={writeCommentAuthHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthDenial\" onClick={writeCommentAuthHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthAllow\" onClick={readLikeAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthDenial\" onClick={readLikeAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNewPost;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newChat\\newChat.js",["258","259","260"],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js",["261"],[],"import Style from './friend.module.css';\r\nimport Profile from '../../root/profile';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    getFolloweeListUrl,\r\n    getfollowerListUrl,\r\n    getcurrentProfileUrl,\r\n    getMyUserIdUrl,\r\n} from '../../../../apiUrl';\r\n\r\nconst RenderRightFriend = ({friendList, leftBookChangeHandler}) => {\r\n    return(\r\n        <div className={Style.friendList}>\r\n            {\r\n                friendList.length === 0 ? \r\n                <p className={Style.noFollowee}>친구인 유저가 없습니다.</p>\r\n                :\r\n                friendList.map((data, index) => (\r\n                    <div className={Style.friendProfileCover} key={index}>\r\n                        <Profile img={data.imgUrl} name={data.nickname} userId={data.userId} leftBookChangeHandler={leftBookChangeHandler}/>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst RightFriend = ({leftBookChangeHandler, refreshAccessToken}) => {\r\n    const [followeeList, setFolloweeList] = useState([]);\r\n    const [followerList, setFollowerList] = useState([]);\r\n    const [friendList, setFriendList] = useState([]);\r\n    const [myProfileImage, setMyProfileImage] = useState(\"\");\r\n    const [myProfileName, setMyProfileName] = useState(\"\");\r\n    const [myId, setMyId] = useState(\"\");\r\n\r\n    //화면 렌더링 초기 설정 함수\r\n    const rightFriendPreset = () => {\r\n        axios.get(getFolloweeListUrl)//내가 팔로우 중인 유저 불러오기\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setFolloweeList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getfollowerListUrl)//나를 팔로우 중인 유저 불러오기\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setFollowerList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getcurrentProfileUrl)//내 정보 불러오기\r\n        .then((res) => {\r\n            setMyProfileName(res.data.data.nickname);\r\n            setMyProfileImage(res.data.data.imgUrl);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getMyUserIdUrl)//내 id불러오기\r\n        .then((res) => {\r\n            setMyId(res.data.data.userId);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n    };\r\n    useEffect(rightFriendPreset, []);\r\n\r\n    const friendListSet = () => {\r\n        //follower와 follwee에 동시에 속한 값들은 친구로 저장\r\n        const JSONFollowerList = followerList.map(d => JSON.stringify(d));\r\n        const JSONFolloweeList = followeeList.map(d => JSON.stringify(d));\r\n        const JSONFriendList = JSONFollowerList.filter(x => JSONFolloweeList.includes(x));\r\n        setFriendList(JSONFriendList.map(d => JSON.parse(d)));\r\n    };\r\n    useEffect(friendListSet, [followerList, followeeList]);\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <Profile img={myProfileImage} name={myProfileName} userId={myId} leftBookChangeHandler={leftBookChangeHandler}/>\r\n            </div>\r\n            <RenderRightFriend friendList={friendList} leftBookChangeHandler={leftBookChangeHandler}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightFriend;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js",["262"],[],"//회원가입 부분\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Style from './innerSignUp.module.css';\r\nimport {\r\n    signUpApiUrl,\r\n    emailApiUrl,\r\n    loginApiUrl\r\n} from \"../../../apiUrl\";\r\n\r\nconst SignUp = ({login, toLoginPage}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [ageAgree, setAgeAgree] = useState(false);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [genderAgree, setGenderAgree] = useState(false);\r\n    const [emailAccept, setEmailAccept] = useState(false);\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n    //input변경 처리\r\n    const emailHandler = (event) => {\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n        setPasswordCheck(\"\");\r\n    };\r\n    const passwordCheckHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordCheck(event.target.value);\r\n    };\r\n    const nicknameHandler = (event) => {\r\n        event.preventDefault();\r\n        setNickname(event.target.value);\r\n    };\r\n    const ageHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.value >= 0){\r\n            setAge(event.target.value);\r\n        }\r\n    };\r\n    const ageAgreeHandler = () => {\r\n        setAgeAgree((current)=> !current);\r\n    };\r\n    const genderHandler = (event) => {\r\n        setGender(event.target.id);\r\n    };\r\n    const genderAgreeHandler = () => {\r\n        setGenderAgree((current)=> !current);\r\n    };\r\n\r\n    //비밀번호 유효성 확인 함수\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    }\r\n    //비밀번호 유효성 확인함수 실행부분\r\n    const passwordValid = () => {\r\n        if(passwordValidCheck(password)){\r\n            setPasswordInvalid(true);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(102, 181, 255)\";\r\n        }\r\n        else{\r\n            setPasswordInvalid(false);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(218, 86, 86)\";\r\n        }\r\n    }\r\n    useEffect(passwordValid, [password]);\r\n\r\n    //비밀번호 check확인 함수\r\n    const passwordCheckFunc = () => {\r\n        if(password !== passwordCheck){\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckFunc, [passwordCheck]);\r\n\r\n    //input재클릭 시 자동으로 전체선택 해주는 함수\r\n    const onfocusHandler = (event) => {\r\n        event.target.select();\r\n    };\r\n\r\n    //이메일 인증처리 함수\r\n    const emailSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(emailApiUrl, {\r\n            email: email,\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                alert(\"인증 메일을 보냈습니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = true;\r\n                setEmailAccept(true);\r\n            })\r\n            .catch((res)=> {\r\n                console.log(res);\r\n                alert(\"에러 발생 다시 시도해주십시오\");\r\n                document.querySelector(\"#emailInput\").select();\r\n            });\r\n    };\r\n\r\n    //회원가입 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '' || password === '' || passwordCheck === '' || nickname === '' || age === 0 || gender === ''){\r\n            alert(\"정보를 모두 입력해 주십시오.\")\r\n            return;\r\n        }\r\n        if(password !== passwordCheck) {\r\n            alert(\"비밀번호를 다시 확인해 주십시오.\");\r\n            return;\r\n        }\r\n        if(!emailAccept) {\r\n            alert(\"이메일 인증을 먼저 해주십시오.\");\r\n            return;\r\n        }\r\n        if(!passwordInvalid) { \r\n            alert(\"비밀번호의 조건을 맞춰주십시오.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(signUpApiUrl, {\r\n                email: email,\r\n                password: password,\r\n                nickname: nickname,\r\n                age: age,\r\n                gender: gender,\r\n                ageVisible: ageAgree,\r\n                genderVisible: genderAgree,\r\n        })\r\n        .then((res) => {\r\n            alert(\"회원가입 되셨습니다.\");\r\n            //즉시 로그인 Api호출\r\n            axios.post(loginApiUrl, {\r\n                email: email,\r\n                password: password,\r\n            })\r\n            .then((res) => {\r\n                login(res);\r\n            })\r\n            .catch((res) => {\r\n                alert(\"문제 발생. 다시 로그인 시도해주십시오.\");\r\n                toLoginPage();//로그인화면으로 이동\r\n            });\r\n        })\r\n        .catch((res) =>{\r\n            if(res.response.status === 400){\r\n                alert(\"이미 가입된 이메일입니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = false;\r\n                setEmailAccept(false);\r\n                document.querySelector(\"#emailInput\").select();\r\n            }\r\n            else{\r\n                alert(\"예상치 못한 문제가 발생했습니다.\");\r\n                console.log(res);\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <form className={Style.SignUpCover} onSubmit={submitHandler}>\r\n            {/* 이메일 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"emailInput\">\r\n                    Email\r\n                </label>\r\n            </div>\r\n            {/* 이메일 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"emailInput\"\r\n                            type=\"email\"\r\n                            className={Style.formInput}\r\n                            value={email}\r\n                            onChange={emailHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.emailButton}\r\n                            onClick={emailSubmitHandler}>\r\n                            인증\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 비밀번호 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordInput\">\r\n                    Password  \r\n                </label>\r\n                <p id=\"validPasswordColorWord\" className={Style.smallAlertWord}>  (8~16자리, 소문자, 특수문자를 하나이상 포함.)</p>\r\n            </div>\r\n            {/* 비밀번호 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={password}\r\n                    onChange={passwordHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 비밀번호 확인 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordCheckInput\">\r\n                    Password 확인\r\n                </label>\r\n            </div>\r\n            {/* 비밀번호 확인 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordCheckInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={passwordCheck}\r\n                    onChange={passwordCheckHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 닉네임 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"nicknameInput\">\r\n                    Nickname\r\n                </label>\r\n            </div>\r\n            {/* 닉네임 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"nicknameInput\"\r\n                    type=\"text\"\r\n                    className={Style.formInput}\r\n                    value={nickname}\r\n                    onChange={nicknameHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 나이 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"ageInput\">\r\n                    나이\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 나이 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageInput\"\r\n                            type=\"number\"\r\n                            className={Style.formInput}\r\n                            value={age}\r\n                            onChange={ageHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={ageAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 성별 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}>\r\n                    성별\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 성별 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.genderInputArea}>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"MALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"MALE\" className={Style.genderLabel}>남</label>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"FEMALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"FEMALE\" className={Style.genderLabel}>여</label>\r\n                            </div>\r\n                            <div />\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"genderAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={genderAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.btnArea}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            onClick={toLoginPage}\r\n                            type=\"button\"\r\n                            className={Style.cancelBtn}\r\n                            value=\"0\">\r\n                            취 소\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={Style.submitBtn}>\r\n                            가 입\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js",["263","264"],[],"//로그인의 초기 화면. id, 비번을 쓰는 곳이 있다.\r\nimport { useState } from 'react';\r\nimport Style from './innerMain.module.css';\r\nimport KakaoImg from '../socialImg/Kakao.png';\r\nimport NaverImg from '../socialImg/Naver.png';\r\nimport axios from 'axios';\r\nimport {\r\n    loginApiUrl,\r\n    kakaoLoginUrl,\r\n    NaverLoginUrl,\r\n} from \"../../../apiUrl\";\r\n\r\nconst Main = ({toFindPasswordPage, toSignUpPage, login}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [wrong, setWrong] = useState(\"0\");//가능한 값, clear(문제 없음), not user(이메일이나 비번이 틀린 경우)\r\n\r\n    //input 변경시 반영해주는 함수\r\n    const emailHandler = (event) =>{\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    //로그인 클릭 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(password === '') {\r\n            alert(\"비밀번호를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(loginApiUrl, {\r\n            email: email,\r\n            password: password,\r\n        })\r\n            .then((res) => {\r\n                setWrong(\"clear\");\r\n                login(res);\r\n            })\r\n            .catch((res) => {\r\n                console.log(res);\r\n                setWrong(\"not user\");\r\n            });\r\n    };\r\n\r\n    //카카오 로그인 처리 함수\r\n    const kakaoLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"kakao\");\r\n        window.location.href = kakaoLoginUrl;\r\n    };\r\n\r\n    //네이버 로그인 처리 함수 => 카카오와 내용은 동일하다.\r\n    const naverLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"naver\");\r\n        window.location.href = NaverLoginUrl;\r\n    };\r\n\r\n    return(\r\n        <form className={Style.loginInnerCover} onSubmit={submitHandler}>\r\n            {/* 아이디 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                className={Style.formInput}\r\n                value={email}\r\n                onChange={emailHandler}/>\r\n            </div>\r\n            {/* 비밀번호 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                className={Style.formInput}\r\n                value={password}\r\n                onChange={passwordHandler}/>\r\n            </div>\r\n            {/* 경고문 */}\r\n            <div className={Style.Cover}>\r\n                {wrong === \"not user\" ? <p className={Style.errorMes}>잘못된 이메일 혹은 비밀번호입니다.</p> : null}\r\n            </div>\r\n            {/* 로그인버튼 */}\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.loginbtn}\r\n                    type=\"submit\">\r\n                    로 그 인\r\n                </button>\r\n            </div>\r\n            {/* 찾기와 회원가입 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toFindPasswordPage}>\r\n                            비밀번호 찾기\r\n                        </p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toSignUpPage}>\r\n                            회원 가입\r\n                        </p>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            {/* 소셜 로그인 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={kakaoLoginHandler}>\r\n                            <div id=\"KakaoContainer\" className={Style.kakao}>\r\n                                <img id=\"symbol\" src={KakaoImg} className={Style.kakaoSymbol}/>\r\n                                <span id=\"label\" className={Style.kakaoLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={naverLoginHandler}>\r\n                            <div id=\"NaverContainer\" className={Style.naver}>\r\n                                <img id=\"symbol\" src={NaverImg} className={Style.naverSymbol}/>\r\n                                <span id=\"label\" className={Style.naverLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js",[],[],"C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js",["265","266","267"],[],"import {useState, useEffect} from 'react';\r\nimport Style from './profileSetting.module.css';\r\nimport nullImage from '../../root/anonymous.png';\r\nimport {\r\n    getcurrentProfileUrl,\r\n    submitProfileSettingUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst ProfileSetting = ({refreshAccessToken}) => {\r\n    //api에 보낼 내용 + input에 반영해야하므로 useState로 선언\r\n    const [ps_userImage, setPs_UserImage] = useState(\"\");\r\n    const [ps_userName, setPs_UserName] = useState(\"\");\r\n    const [ps_userAge, setPs_UserAge] = useState(\"\");\r\n    const [ps_userAgeVisible, setPs_UserAgeVisible] = useState(\"\");\r\n    const [ps_userGender, setPs_userGender] = useState(\"\");\r\n    const [ps_userGenderVisible, setPs_UserGenderVisible] = useState(\"\");\r\n    const [ps_userIntroduce, setPs_UserIntroduce] = useState(\"\");\r\n\r\n    //공개 여부 인지 후 색상 변경 함수\r\n    const ageVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userAgeVisible){//나이가 공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(ageVisibleBtnChangeHandler, [ps_userAgeVisible]);\r\n\r\n    const genderVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userGenderVisible){//성별이 공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(genderVisibleBtnChangeHandler, [ps_userGenderVisible]);\r\n\r\n    //초기 상태 명시용 함수\r\n    const profileSettingPreset = () => {\r\n        axios.get(getcurrentProfileUrl)\r\n        .then((res) => {\r\n            console.log(res.data.data);\r\n            setPs_UserImage(res.data.data.imgUrl);//프로필 이미지 설정 없으면 null\r\n            setPs_UserName(res.data.data.nickname);//이름 설정 - api upload\r\n            setPs_UserAge(res.data.data.age);//나이 설정\r\n            setPs_UserAgeVisible(res.data.data.ageVisible);//나이 공개\r\n            if(res.data.data.gender === \"MALE\"){//성별 설정\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            else{\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            setPs_UserGenderVisible(res.data.data.genderVisible);//성별 공개\r\n            if(res.data.data.selfIntroduction === null){//자기소개 설정\r\n                setPs_UserIntroduce(\"\");\r\n            }\r\n            else{\r\n                setPs_UserIntroduce(res.data.data.selfIntroduction);\r\n            }\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n                profileSettingPreset();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        });\r\n    };\r\n    useEffect(profileSettingPreset, []);\r\n\r\n    //submit함수\r\n    const profileSettingSubmitHandler = (event) => {//작성필요\r\n        event.preventDefault();\r\n        axios.post(submitProfileSettingUrl,{\r\n            nickname: ps_userName,\r\n            age: ps_userAge,\r\n            gender: ps_userGender,\r\n            ageVisible: ps_userAgeVisible,\r\n            genderVisible:ps_userGenderVisible,\r\n            imgUrl: ps_userImage,\r\n            selfIntroduction: ps_userIntroduce,\r\n        })\r\n        .then((res) => {\r\n            console.log(res);\r\n            alert(\"설정을 변경했습니다.\");\r\n            //window.location.href = \"/main\";\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제가 발생했습니다.\");\r\n            }\r\n        })\r\n    }\r\n\r\n    //이미지 변경 함수 - ps_nextUserImage를 바꾼다.\r\n    const profileImageChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        const inputImage = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(inputImage);\r\n        reader.onload = (imageData) => {\r\n            setPs_UserImage(imageData.target.result);\r\n        }\r\n    };\r\n\r\n    //값 변경 함수\r\n    const nicknameChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserName(event.target.value);\r\n    };\r\n    const ageChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAge(event.target.value);\r\n    };\r\n    const selfIntroductionChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserIntroduce(event.target.value);\r\n    };\r\n    \r\n    //공개여부 변경 함수\r\n    const ageVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAgeVisible((cur) => !cur);\r\n    };\r\n\r\n    const genderVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserGenderVisible((cur) => !cur);\r\n    };\r\n\r\n\r\n    return(\r\n        <form className={Style.profileSettingCover} onSubmit={profileSettingSubmitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.MyprofileExample}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='UserProfileImage'>\r\n                            {\r\n                                (ps_userImage === undefined || ps_userImage === null)\r\n                                ? \r\n                                <img src={nullImage} className={Style.myprofileImage}/>\r\n                                :\r\n                                <img src={ps_userImage} className={Style.myprofileImage}/>\r\n                            }\r\n                        </label>\r\n                        <input \r\n                            type=\"file\"\r\n                            onChange={profileImageChangeHandler}\r\n                            className={Style.myprofileImageInput}\r\n                            id=\"UserProfileImage\"\r\n                            accept=\"image/*\"\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.myprofileNickname}>{ps_userName}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.profileSettingDetail}>\r\n                    {/* 닉네임 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingUserName\"\r\n                            className={Style.profileSettingLabel}>\r\n                            사용자 이름\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingUserName\"\r\n                            type=\"text\"\r\n                            maxLength={20}\r\n                            value={ps_userName}\r\n                            onChange={nicknameChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div />\r\n                    {/* 나이 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingAge\"\r\n                            className={Style.profileSettingLabel}>\r\n                            나이\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"profileSettingAge\"\r\n                            type=\"number\"\r\n                            value={ps_userAge}\r\n                            onChange={ageChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"ageVisibleBtn\"\r\n                            onClick={ageVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 성별 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.profileSettingLabel}>\r\n                            성별\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        {\r\n                            ps_userGender === \"MALE\" ?\r\n                            <input type=\"text\" value=\"남\" className={Style.profileSettingInput} readOnly />\r\n                            :\r\n                            <input type=\"text\" value=\"여\" className={Style.profileSettingInput} readOnly />\r\n                        }\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"genderVisibleBtn\"\r\n                            onClick={genderVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 자기소개 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"profileSettingIntroduce\"\r\n                            className={Style.profileSettingLabel}>\r\n                            자기소개\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <textarea \r\n                            id=\"profileSettingIntroduce\"\r\n                            type=\"text\"\r\n                            maxLength={120}\r\n                            value={ps_userIntroduce}\r\n                            onChange={selfIntroductionChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                            style={{resize: \"none\", height: \"70%\"}}/>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.submitButton}\r\n                    type=\"submit\">\r\n                    수정\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js",["268"],[],"import Style from './credit.module.css';\r\nimport HongikLogo from './datafile/Logo_of_hongik_university.jpg';\r\n\r\nconst Person = ({name, email, github}) => {\r\n    return(\r\n        <div className={Style.personArea}>\r\n            <p className={Style.name}>{name}</p>\r\n            <p className={Style.email}>{email}</p>\r\n            <a className={Style.github} href={github}>{github}</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Credit = () => {\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <img src={HongikLogo} className={Style.HongikLogo} />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.creditArea}>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711093 / 성의현\" email=\"luckhome1020@gmail.com\" github=\"https://github.com/SungIII\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711142 / 이종찬\" email=\"reljacer@gmail.com\" github=\"https://github.com/Lipeya\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711163 / 임채민\" email=\"chemin9898@gmail.com\" github=\"https://github.com/lacram\" />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Credit;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js",["269","270","271","272","273","274","275"],[],"import Style from './filteringSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentfilterSetting,\r\n    getCurrentNotFilteredUserUrl,\r\n    submitFilteringSetting,\r\n    addNotFilteredUserUrl,\r\n    deleteNotFilteredUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst FilteringSetting = ({refreshAccessToken}) => {\r\n    const [filterAll, setFilterAll] = useState(false);\r\n    const [filterFollower, setFilterFollower] = useState(false);\r\n    const [filterFollowee, setFilterFollowee] = useState(false);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//예외로 설정된 사람들\r\n\r\n    //처음에 필터링 설정정보와 예외로 설정된 유저들의 리스트를 가져와야한다.\r\n    const filterSettingInitialSetting = () => {\r\n        //필터링 설정 정보 가져오기\r\n        axios.get(getCurrentfilterSetting)\r\n        .then((res) => {\r\n            setFilterAll(res.data.data.filterAll);\r\n            setFilterFollower(res.data.data.filterFollower);\r\n            setFilterFollowee(res.data.data.filterFollowee);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n\r\n        //필터링 하지 않을 유저 정보 가져오기\r\n        axios.get(getCurrentNotFilteredUserUrl)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n            alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n    useEffect(filterSettingInitialSetting, []);\r\n\r\n    /* 상단 내용 */\r\n\r\n    //정보에 따라 스타일 변경해주는 함수\r\n    const filterAllStyleHandler = () => {\r\n        if(filterAll){\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterAllStyleHandler, [filterAll]);\r\n\r\n    const filterFollowerStyleHandler = () => {\r\n        if(filterFollower){\r\n            document.querySelector(\"#filterFollowerAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterFollowerDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterFollowerAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterFollowerDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterFollowerStyleHandler, [filterFollower]);\r\n\r\n    const filterFolloweeStyleHandler = () => {\r\n        if(filterFollowee){\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterFolloweeStyleHandler, [filterFollowee]);\r\n\r\n    //input 클릭 handler\r\n    const filterAllClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterAll((cur) => !cur);\r\n    };\r\n\r\n    const filterFollowerClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterFollower((cur) => !cur);\r\n    };\r\n\r\n    const filterFolloweeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterFollowee((cur) => !cur);\r\n    };\r\n\r\n    //설정 submit handler\r\n    const settingSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(submitFilteringSetting,{\r\n            filterAll: filterAll,\r\n            filterFollower: filterFollower,\r\n            filterFollowee: filterFollowee,\r\n        })\r\n        .then((res) =>{\r\n            alert(\"설정을 변경했습니다.\");\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n\r\n    /* 하단 내용 */\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        axios.post(addNotFilteredUserUrl, {\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 추가된 차단 리스트를 불러와서 변경하기\r\n            axios.get(getCurrentNotFilteredUserUrl)\r\n            .then((res) => {\r\n                const tmp = [...res.data.data];\r\n                setAddedUserList(tmp);\r\n            })\r\n            .catch((res) => {\r\n                if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생 - 리스트를 불러오지 못함\");\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생 - 차단 리스트에 추가하지 못함\");\r\n                //window.location.href = '/main';\r\n            }\r\n        })\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        axios.post(deleteNotFilteredUserUrl,{\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 삭제하기.\r\n            console.log(res);\r\n            //AddedList 리스트에서 삭제 event.target.value이용\r\n            const tmp = [...AddedUserList];\r\n            tmp.splice(Number(event.target.value), 1);\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제 발생\");\r\n                //window.location.href=\"/main\"; \r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    }\r\n\r\n    const searchHandler = (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        axios.get(searchUserUrl + userInput)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data]\r\n            setSearchedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.filterSettingArea} onSubmit={settingSubmitHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>전체 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllAllow\" onClick={filterAllClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllDenial\" onClick={filterAllClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>팔로워 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFollowerAllow\" onClick={filterFollowerClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFollowerDenial\" onClick={filterFollowerClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>팔로우 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeAllow\" onClick={filterFolloweeClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeDenial\" onClick={filterFolloweeClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button type=\"submit\" className={Style.submitBtn}>제출</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.searchLabel}\r\n                            htmlFor=\"userIdInput\">\r\n                            필터링 하지 않을 사용자 추가\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"userIdInput\"\r\n                            placeholder='닉네임을 입력하세요'\r\n                            className={Style.searchInput}\r\n                            value={userInput}\r\n                            onChange={userInputChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                searchedUserList.map((person, index) => {\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                AddedUserList.map((person, index) => {\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilteringSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js",["276","277","278","279","280"],[],"import Style from './blockSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentBlockedPersonUrl,\r\n    blockUserCancleUrl,\r\n    blockUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst BlockSetting = ({refreshAccessToken}) => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//차단된 사람들\r\n\r\n    //처음에 차단된 유저들의 리스트를 먼저 가져와야한다.\r\n    const blockSettingInitialSetting = () => {\r\n        axios.get(getCurrentBlockedPersonUrl)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n    useEffect(blockSettingInitialSetting, []);\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        axios.post(blockUserUrl, {\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 추가된 차단 리스트를 불러와서 변경하기\r\n            axios.get(getCurrentBlockedPersonUrl)\r\n            .then((res) => {\r\n                const tmp = [...res.data.data];\r\n                setAddedUserList(tmp);\r\n            })\r\n            .catch((res) => {\r\n                if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생 - 리스트를 불러오지 못함\");\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생 - 차단 리스트에 추가하지 못함\");\r\n                //window.location.href = '/main';\r\n            }\r\n        })\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        axios.post(blockUserCancleUrl,{\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 삭제하기.\r\n            console.log(res);\r\n            //AddedList 리스트에서 삭제 event.target.value이용\r\n            const tmp = [...AddedUserList];\r\n            tmp.splice(Number(event.target.value), 1);\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.stresponse.statusatus === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제 발생\");\r\n                //window.location.href=\"/main\"; \r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    }\r\n\r\n    const searchHandler = (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        axios.get(searchUserUrl + userInput)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data]\r\n            setSearchedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n\r\n    return(\r\n        <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n            <div className={Style.Cover}>\r\n                <label\r\n                    className={Style.searchLabel}\r\n                    htmlFor=\"userIdInput\">\r\n                    차단할 사용자 추가\r\n                </label>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <input \r\n                    id=\"userIdInput\"\r\n                    placeholder='닉네임을 입력하세요'\r\n                    className={Style.searchInput}\r\n                    value={userInput}\r\n                    onChange={userInputChangeHandler}\r\n                />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        searchedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        AddedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default BlockSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js",["281"],[],"import Style from './passwordSetting.module.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {\r\n    passwordCheckForPasswordChangeUrl,\r\n    passwordChangeUrl\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst PasswordSetting = ({refreshAccessToken}) => {\r\n    //useState 선언\r\n    const [previousPassword, setPreviousPassword] = useState(\"\");\r\n    const [passwordChange, setPasswordChange] = useState(\"\");\r\n    const [passwordChangeCheck, setPasswordChangeCheck] = useState(\"\");\r\n    const [passwordCondition, setPasswordCondition] = useState(false);//조건 확인\r\n\r\n    //비밀번호 변경 함수\r\n    const previousPasswordChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPreviousPassword(event.target.value);\r\n    };\r\n    const passwordChangeChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChange(event.target.value);\r\n        setPasswordChangeCheck(\"\");\r\n    };\r\n    const passwordChangeCheckChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChangeCheck(event.target.value);\r\n    };\r\n\r\n    //submit handler\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(previousPassword === passwordChange){\r\n            alert(\"바꾸려는 비밀번호가 동일합니다.\");\r\n            return;\r\n        }\r\n        if(!passwordCondition){\r\n            alert(\"새 비밀번호가 비밀번호 조건에 맞지 않습니다.\");\r\n            return;\r\n        }\r\n        if(passwordChange !== passwordChangeCheck){\r\n            alert(\"새 비밀번호와 새 비밀번호 확인이 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(passwordCheckForPasswordChangeUrl,{\r\n            password: previousPassword,\r\n        })\r\n        .then((res) => {\r\n            axios.post(passwordChangeUrl,{\r\n                password: passwordChange,\r\n            })\r\n            .then((res) => {\r\n                alert(\"비밀번호가 변경되었습니다.\");\r\n                //window.location.href = '/main';\r\n            })\r\n            .catch((res) => {\r\n                if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생\");\r\n                    //window.location.href = '/main';\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                alert(\"기존 비밀번호가 틀립니다.\");\r\n            }\r\n        })\r\n    };\r\n\r\n    //비밀번호 동일한지 확인해서 style바꿔주는 함수\r\n    const passwordCheckSameCheck = () => {\r\n        if(passwordChangeCheck === \"\"){//비어있으면 빨간 선을 없앤다.\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n            return;\r\n        }\r\n        if(passwordChangeCheck !== passwordChange){\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckSameCheck, [passwordChangeCheck]);\r\n\r\n\r\n    //비밀번호 조건확인\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    };\r\n\r\n    //비밀번호 조건확인하는 함수 함수\r\n    const passwordValid = () => {\r\n        setPasswordCondition(passwordValidCheck(passwordChange));\r\n    };\r\n    useEffect(passwordValid, [passwordChange]);\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.formArea}>\r\n                    {/* 현재 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"prevPW\"\r\n                            className={Style.settingLabel}>\r\n                            이전 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"prevPW\"\r\n                            type=\"password\"\r\n                            value={previousPassword}\r\n                            onChange={previousPasswordChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChange'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChange\"\r\n                            type=\"password\"\r\n                            value={passwordChange}\r\n                            onChange={passwordChangeChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 확인 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChangeCheck'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호 확인\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChangeCheck\"\r\n                            type=\"password\"\r\n                            value={passwordChangeCheck}\r\n                            onChange={passwordChangeCheckChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                {passwordCondition ? null : <p className={Style.alertWord}>비밀번호는 8~16자리, 소문자, 특수문자를 하나이상 포함.</p>}\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button type=\"submit\" className={Style.submitButton}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PasswordSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js",["282"],[],"import { useState, useEffect } from 'react';\r\nimport Style from './noticeSetting.module.css';\r\nimport {\r\n    getCurrentNoticeSettingUrl,\r\n    submitCurrentNoticeSettingUrl,\r\n} from \"../../../../apiUrl\";\r\nimport axios from 'axios';\r\n\r\nconst NoticeSetting = ({refreshAccessToken}) => {\r\n    //설정들\r\n    const [notificationFollow, setNotificationFollow] = useState(\"\");\r\n    const [notificationComment, setNotificationComment] = useState(\"\");\r\n    const [notificationLike, setNotificationLike] = useState(\"\");\r\n    const [notificationFollowAccept, setNotificationFollowAccept] = useState(\"\");\r\n    const [notificationChat, setNotificationChat] = useState(\"\");\r\n\r\n    //처음에 설정현황을 불러오는 함수\r\n    const noticeSettingPreset = () => {\r\n        axios.get(getCurrentNoticeSettingUrl)\r\n        .then((res) => {\r\n            setNotificationFollow(res.data.data.notificationFollow);\r\n            setNotificationComment(res.data.data.notificationComment)\r\n            setNotificationLike(res.data.data.notificationLike);\r\n            setNotificationFollowAccept(res.data.data.notificationFollowAccept);\r\n            setNotificationChat(res.data.data.notificationChat);\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        });\r\n    };\r\n    useEffect(noticeSettingPreset, []);\r\n\r\n    //submit function\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(submitCurrentNoticeSettingUrl,{\r\n            notificationFollow: notificationFollow,\r\n            notificationComment: notificationComment,\r\n            notificationLike: notificationLike,\r\n            notificationFollowAccept: notificationFollowAccept,\r\n            notificationChat: notificationChat,\r\n        })\r\n        .then((res) => {\r\n            alert(\"설정을 변경했습니다.\");\r\n        })\r\n        .catch((res) => {\r\n            if(res.response.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러가 발생했습니다.\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n    //각 설정 클릭시 handler\r\n    const notificationFollowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollow((cur) => !cur);\r\n    };\r\n    const notificationCommentClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationCommentAll\"){\r\n            setNotificationComment(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationCommentFollowOnly\"){\r\n            setNotificationComment(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationComment(\"NONE\");\r\n        }\r\n    };\r\n    const notificationLikeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationLikeAll\"){\r\n            setNotificationLike(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationLikeFollowOnly\"){\r\n            setNotificationLike(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationLike(\"NONE\");\r\n        }\r\n    };\r\n    const notificationFollowAcceptClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollowAccept((cur) => !cur);\r\n    };\r\n    const notificationChatClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationChat((cur) => !cur);\r\n    };\r\n\r\n    //각 요소 스타일 변경 handler\r\n    const notificationFollowStyleChanger = () => {\r\n        if(notificationFollow){\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowStyleChanger, [notificationFollow]);\r\n\r\n    const notificationCommentStyleChanger = () => {\r\n        if(notificationComment === \"ALL\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationComment === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationCommentStyleChanger, [notificationComment]);\r\n\r\n    const notificationLikeStyleChanger = () => {\r\n        if(notificationLike === \"ALL\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationLike === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else {\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationLikeStyleChanger, [notificationLike]);\r\n\r\n    const notificationFollowAcceptStyleChanger = () => {\r\n        if(notificationFollowAccept){\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowAcceptStyleChanger, [notificationFollowAccept]);\r\n\r\n    const notificationChatStyleChanger = () => {\r\n        if(notificationChat){\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationChatStyleChanger, [notificationChat]);\r\n\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>팔로우알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowTrue\" onClick={notificationFollowClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowFalse\" onClick={notificationFollowClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 댓글 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentAll\" onClick={notificationCommentClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentFollowOnly\" onClick={notificationCommentClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentNone\" onClick={notificationCommentClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 글 좋아요 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeAll\" onClick={notificationLikeClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeFollowOnly\" onClick={notificationLikeClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeNone\" onClick={notificationLikeClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>상대의 팔로우 수락</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptTrue\" onClick={notificationFollowAcceptClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptFalse\" onClick={notificationFollowAcceptClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>채팅 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatTrue\" onClick={notificationChatClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatFalse\" onClick={notificationChatClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button type=\"submit\" className={Style.submitBtn}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NoticeSetting;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js",["283"],[],"//프로필을 보여주는 JS\r\nimport Style from './profile.module.css';\r\n\r\nconst Profile = ({img, name, userId, leftBookChangeHandler}) => {\r\n    const profileClickHandler = (event) => {\r\n        event.preventDefault();\r\n        leftBookChangeHandler(\"pList/\" + userId);\r\n    }\r\n\r\n    return (\r\n        <div className={Style.friendProfile} onClick={profileClickHandler}>\r\n            <div className={Style.Cover}>\r\n                <img src={img} className={Style.friendProfilePic}/>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <p className={Style.friendProfileName}>{name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\luckh\\OneDrive\\Desktop\\grad\\src\\logo\\Logo.js",["284"],[],"import Style from \"./Logo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = ({preset}) =>{\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img src={logo} className={Style.logo} onClick={preset} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Logo;",{"ruleId":"285","severity":1,"message":"286","line":79,"column":33,"nodeType":"287","endLine":79,"endColumn":35,"suggestions":"288"},{"ruleId":"285","severity":1,"message":"289","line":136,"column":26,"nodeType":"287","endLine":136,"endColumn":28,"suggestions":"290"},{"ruleId":"285","severity":1,"message":"291","line":263,"column":31,"nodeType":"287","endLine":263,"endColumn":62,"suggestions":"292"},{"ruleId":"285","severity":1,"message":"293","line":285,"column":32,"nodeType":"287","endLine":285,"endColumn":34,"suggestions":"294"},{"ruleId":"285","severity":1,"message":"295","line":295,"column":6,"nodeType":"287","endLine":295,"endColumn":19,"suggestions":"296"},{"ruleId":"285","severity":1,"message":"297","line":316,"column":6,"nodeType":"287","endLine":316,"endColumn":21,"suggestions":"298"},{"ruleId":"299","severity":1,"message":"300","line":334,"column":17,"nodeType":"301","endLine":334,"endColumn":103},{"ruleId":"299","severity":1,"message":"300","line":341,"column":17,"nodeType":"301","endLine":341,"endColumn":105},{"ruleId":"299","severity":1,"message":"300","line":351,"column":17,"nodeType":"301","endLine":351,"endColumn":112},{"ruleId":"299","severity":1,"message":"300","line":361,"column":17,"nodeType":"301","endLine":361,"endColumn":104},{"ruleId":"299","severity":1,"message":"300","line":368,"column":17,"nodeType":"301","endLine":368,"endColumn":108},{"ruleId":"299","severity":1,"message":"300","line":20,"column":13,"nodeType":"301","endLine":20,"endColumn":121},{"ruleId":"302","severity":1,"message":"303","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":17},{"ruleId":"302","severity":1,"message":"306","line":4,"column":8,"nodeType":"304","messageId":"305","endLine":4,"endColumn":17},{"ruleId":"299","severity":1,"message":"300","line":106,"column":17,"nodeType":"301","endLine":106,"endColumn":120},{"ruleId":"299","severity":1,"message":"300","line":112,"column":21,"nodeType":"301","endLine":112,"endColumn":71},{"ruleId":"285","severity":1,"message":"307","line":147,"column":30,"nodeType":"287","endLine":147,"endColumn":52,"suggestions":"308"},{"ruleId":"285","severity":1,"message":"309","line":175,"column":41,"nodeType":"287","endLine":175,"endColumn":49,"suggestions":"310"},{"ruleId":"285","severity":1,"message":"311","line":183,"column":41,"nodeType":"287","endLine":183,"endColumn":49,"suggestions":"312"},{"ruleId":"285","severity":1,"message":"313","line":294,"column":8,"nodeType":"287","endLine":294,"endColumn":19,"suggestions":"314"},{"ruleId":"299","severity":1,"message":"300","line":313,"column":25,"nodeType":"301","endLine":313,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":319,"column":29,"nodeType":"301","endLine":319,"endColumn":78},{"ruleId":"285","severity":1,"message":"315","line":427,"column":33,"nodeType":"287","endLine":427,"endColumn":35,"suggestions":"316"},{"ruleId":"285","severity":1,"message":"317","line":461,"column":32,"nodeType":"287","endLine":461,"endColumn":40,"suggestions":"318"},{"ruleId":"285","severity":1,"message":"319","line":487,"column":33,"nodeType":"287","endLine":487,"endColumn":45,"suggestions":"320"},{"ruleId":"299","severity":1,"message":"300","line":644,"column":41,"nodeType":"301","endLine":644,"endColumn":120},{"ruleId":"299","severity":1,"message":"300","line":652,"column":25,"nodeType":"301","endLine":652,"endColumn":109},{"ruleId":"299","severity":1,"message":"300","line":653,"column":25,"nodeType":"301","endLine":653,"endColumn":111},{"ruleId":"299","severity":1,"message":"300","line":660,"column":29,"nodeType":"301","endLine":660,"endColumn":118},{"ruleId":"299","severity":1,"message":"300","line":668,"column":33,"nodeType":"301","endLine":668,"endColumn":131},{"ruleId":"285","severity":1,"message":"321","line":55,"column":35,"nodeType":"287","endLine":55,"endColumn":48,"suggestions":"322"},{"ruleId":"299","severity":1,"message":"300","line":67,"column":25,"nodeType":"301","endLine":67,"endColumn":75},{"ruleId":"285","severity":1,"message":"323","line":109,"column":35,"nodeType":"287","endLine":109,"endColumn":43,"suggestions":"324"},{"ruleId":"299","severity":1,"message":"300","line":120,"column":21,"nodeType":"301","endLine":120,"endColumn":136},{"ruleId":"285","severity":1,"message":"325","line":152,"column":33,"nodeType":"287","endLine":152,"endColumn":48,"suggestions":"326"},{"ruleId":"285","severity":1,"message":"327","line":176,"column":35,"nodeType":"287","endLine":176,"endColumn":49,"suggestions":"328"},{"ruleId":"299","severity":1,"message":"300","line":272,"column":17,"nodeType":"301","endLine":272,"endColumn":69},{"ruleId":"299","severity":1,"message":"300","line":277,"column":21,"nodeType":"301","endLine":281,"endColumn":23},{"ruleId":"299","severity":1,"message":"300","line":287,"column":25,"nodeType":"301","endLine":287,"endColumn":116},{"ruleId":"302","severity":1,"message":"329","line":8,"column":8,"nodeType":"304","messageId":"305","endLine":8,"endColumn":20},{"ruleId":"285","severity":1,"message":"330","line":34,"column":33,"nodeType":"287","endLine":34,"endColumn":45,"suggestions":"331"},{"ruleId":"299","severity":1,"message":"300","line":44,"column":37,"nodeType":"301","endLine":44,"endColumn":120},{"ruleId":"299","severity":1,"message":"300","line":57,"column":25,"nodeType":"301","endLine":57,"endColumn":142},{"ruleId":"299","severity":1,"message":"300","line":58,"column":25,"nodeType":"301","endLine":58,"endColumn":145},{"ruleId":"299","severity":1,"message":"300","line":82,"column":33,"nodeType":"301","endLine":82,"endColumn":105},{"ruleId":"299","severity":1,"message":"300","line":88,"column":33,"nodeType":"301","endLine":88,"endColumn":89},{"ruleId":"299","severity":1,"message":"300","line":96,"column":33,"nodeType":"301","endLine":96,"endColumn":85},{"ruleId":"285","severity":1,"message":"332","line":139,"column":33,"nodeType":"287","endLine":139,"endColumn":48,"suggestions":"333"},{"ruleId":"285","severity":1,"message":"334","line":147,"column":33,"nodeType":"287","endLine":147,"endColumn":41,"suggestions":"335"},{"ruleId":"302","severity":1,"message":"336","line":12,"column":10,"nodeType":"304","messageId":"305","endLine":12,"endColumn":14},{"ruleId":"299","severity":1,"message":"300","line":39,"column":16,"nodeType":"301","endLine":39,"endColumn":113},{"ruleId":"285","severity":1,"message":"337","line":100,"column":8,"nodeType":"287","endLine":100,"endColumn":21,"suggestions":"338"},{"ruleId":"285","severity":1,"message":"339","line":111,"column":8,"nodeType":"287","endLine":111,"endColumn":21,"suggestions":"340"},{"ruleId":"285","severity":1,"message":"341","line":138,"column":8,"nodeType":"287","endLine":138,"endColumn":22,"suggestions":"342"},{"ruleId":"343","severity":1,"message":"344","line":150,"column":46,"nodeType":"345","messageId":"346","endLine":150,"endColumn":48},{"ruleId":"285","severity":1,"message":"347","line":168,"column":39,"nodeType":"287","endLine":168,"endColumn":55,"suggestions":"348"},{"ruleId":"285","severity":1,"message":"349","line":199,"column":36,"nodeType":"287","endLine":199,"endColumn":57,"suggestions":"350"},{"ruleId":"285","severity":1,"message":"351","line":224,"column":8,"nodeType":"287","endLine":224,"endColumn":16,"suggestions":"352"},{"ruleId":"285","severity":1,"message":"353","line":45,"column":30,"nodeType":"287","endLine":45,"endColumn":39,"suggestions":"354"},{"ruleId":"285","severity":1,"message":"355","line":53,"column":27,"nodeType":"287","endLine":53,"endColumn":35,"suggestions":"356"},{"ruleId":"299","severity":1,"message":"300","line":65,"column":11,"nodeType":"301","endLine":72,"endColumn":13},{"ruleId":"299","severity":1,"message":"300","line":24,"column":21,"nodeType":"301","endLine":24,"endColumn":116},{"ruleId":"343","severity":1,"message":"344","line":50,"column":29,"nodeType":"345","messageId":"346","endLine":50,"endColumn":31},{"ruleId":"343","severity":1,"message":"344","line":59,"column":43,"nodeType":"345","messageId":"346","endLine":59,"endColumn":45},{"ruleId":"299","severity":1,"message":"300","line":164,"column":21,"nodeType":"301","endLine":164,"endColumn":100},{"ruleId":"285","severity":1,"message":"357","line":19,"column":29,"nodeType":"287","endLine":19,"endColumn":31,"suggestions":"358"},{"ruleId":"299","severity":1,"message":"300","line":79,"column":21,"nodeType":"301","endLine":79,"endColumn":106},{"ruleId":"299","severity":1,"message":"300","line":88,"column":21,"nodeType":"301","endLine":88,"endColumn":113},{"ruleId":"285","severity":1,"message":"359","line":127,"column":27,"nodeType":"287","endLine":127,"endColumn":40,"suggestions":"360"},{"ruleId":"285","severity":1,"message":"361","line":135,"column":29,"nodeType":"287","endLine":135,"endColumn":37,"suggestions":"362"},{"ruleId":"299","severity":1,"message":"300","line":21,"column":21,"nodeType":"301","endLine":21,"endColumn":113},{"ruleId":"299","severity":1,"message":"300","line":26,"column":25,"nodeType":"301","endLine":26,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":29,"column":25,"nodeType":"301","endLine":29,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":35,"column":25,"nodeType":"301","endLine":35,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":36,"column":25,"nodeType":"301","endLine":36,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":37,"column":25,"nodeType":"301","endLine":37,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":43,"column":25,"nodeType":"301","endLine":43,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":44,"column":25,"nodeType":"301","endLine":44,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":45,"column":25,"nodeType":"301","endLine":45,"endColumn":119},{"ruleId":"299","severity":1,"message":"300","line":46,"column":25,"nodeType":"301","endLine":46,"endColumn":119},{"ruleId":"285","severity":1,"message":"327","line":83,"column":39,"nodeType":"287","endLine":83,"endColumn":54,"suggestions":"363"},{"ruleId":"299","severity":1,"message":"300","line":103,"column":25,"nodeType":"301","endLine":103,"endColumn":108},{"ruleId":"285","severity":1,"message":"364","line":74,"column":30,"nodeType":"287","endLine":74,"endColumn":32,"suggestions":"365"},{"ruleId":"299","severity":1,"message":"300","line":31,"column":21,"nodeType":"301","endLine":31,"endColumn":74},{"ruleId":"285","severity":1,"message":"327","line":87,"column":42,"nodeType":"287","endLine":87,"endColumn":44,"suggestions":"366"},{"ruleId":"285","severity":1,"message":"367","line":122,"column":46,"nodeType":"287","endLine":122,"endColumn":64,"suggestions":"368"},{"ruleId":"285","severity":1,"message":"327","line":102,"column":34,"nodeType":"287","endLine":102,"endColumn":36,"suggestions":"369"},{"ruleId":"285","severity":1,"message":"370","line":85,"column":34,"nodeType":"287","endLine":85,"endColumn":49,"suggestions":"371"},{"ruleId":"299","severity":1,"message":"300","line":134,"column":33,"nodeType":"301","endLine":134,"endColumn":96},{"ruleId":"299","severity":1,"message":"300","line":142,"column":33,"nodeType":"301","endLine":142,"endColumn":96},{"ruleId":"285","severity":1,"message":"372","line":76,"column":37,"nodeType":"287","endLine":76,"endColumn":39,"suggestions":"373"},{"ruleId":"299","severity":1,"message":"300","line":153,"column":33,"nodeType":"301","endLine":153,"endColumn":88},{"ruleId":"299","severity":1,"message":"300","line":155,"column":33,"nodeType":"301","endLine":155,"endColumn":91},{"ruleId":"299","severity":1,"message":"300","line":18,"column":17,"nodeType":"301","endLine":18,"endColumn":70},{"ruleId":"285","severity":1,"message":"327","line":60,"column":44,"nodeType":"287","endLine":60,"endColumn":46,"suggestions":"374"},{"ruleId":"343","severity":1,"message":"344","line":336,"column":70,"nodeType":"345","messageId":"346","endLine":336,"endColumn":72},{"ruleId":"299","severity":1,"message":"300","line":340,"column":49,"nodeType":"301","endLine":340,"endColumn":104},{"ruleId":"299","severity":1,"message":"300","line":346,"column":49,"nodeType":"301","endLine":346,"endColumn":237},{"ruleId":"343","severity":1,"message":"344","line":357,"column":67,"nodeType":"345","messageId":"346","endLine":357,"endColumn":69},{"ruleId":"299","severity":1,"message":"300","line":361,"column":49,"nodeType":"301","endLine":361,"endColumn":104},{"ruleId":"299","severity":1,"message":"300","line":367,"column":49,"nodeType":"301","endLine":367,"endColumn":249},{"ruleId":"285","severity":1,"message":"327","line":37,"column":43,"nodeType":"287","endLine":37,"endColumn":45,"suggestions":"375"},{"ruleId":"299","severity":1,"message":"300","line":179,"column":41,"nodeType":"301","endLine":179,"endColumn":96},{"ruleId":"299","severity":1,"message":"300","line":185,"column":41,"nodeType":"301","endLine":185,"endColumn":229},{"ruleId":"299","severity":1,"message":"300","line":200,"column":41,"nodeType":"301","endLine":200,"endColumn":96},{"ruleId":"299","severity":1,"message":"300","line":206,"column":41,"nodeType":"301","endLine":206,"endColumn":241},{"ruleId":"285","severity":1,"message":"376","line":92,"column":39,"nodeType":"287","endLine":92,"endColumn":60,"suggestions":"377"},{"ruleId":"285","severity":1,"message":"327","line":38,"column":36,"nodeType":"287","endLine":38,"endColumn":38,"suggestions":"378"},{"ruleId":"299","severity":1,"message":"300","line":13,"column":17,"nodeType":"301","endLine":13,"endColumn":68},{"ruleId":"299","severity":1,"message":"300","line":8,"column":13,"nodeType":"301","endLine":8,"endColumn":71},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getUserIdANdOpenSSEHandler', 'isLogin', and 'logoutFunc'. Either include them or remove the dependency array.","ArrayExpression",["379"],"React Hook useEffect has a missing dependency: 'loginFunc'. Either include it or remove the dependency array.",["380"],"React Hook useEffect has a missing dependency: 'goBack'. Either include it or remove the dependency array.",["381"],"React Hook useEffect has missing dependencies: 'noticeCount' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["382"],"React Hook useEffect has a missing dependency: 'noticeEventSource'. Either include it or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'stompClient'. Either include it or remove the dependency array.",["384"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'moreStuff' is defined but never used.","Identifier","unusedVar","'reportBtn' is defined but never used.","React Hook useEffect has missing dependencies: 'groupId' and 'setLoadCommentOfComment'. Either include them or remove the dependency array. If 'setLoadCommentOfComment' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["385"],"React Hook useEffect has missing dependencies: 'commentOfCommentList', 'commentOfCommentStartId', 'groupId', 'pageId', and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["386"],"React Hook useEffect has missing dependencies: 'isLastCommentOfComment' and 'loadThisCommentOfComment'. Either include them or remove the dependency array.",["387"],"React Hook useEffect has a missing dependency: 'presetComment'. Either include it or remove the dependency array. If 'presetComment' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["388"],"React Hook useEffect has missing dependencies: 'pageId' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["389"],"React Hook useEffect has missing dependencies: 'isLastComment' and 'presetComment'. Either include them or remove the dependency array.",["390"],"React Hook useEffect has a missing dependency: 'postedImageList.length'. Either include it or remove the dependency array.",["391"],"React Hook useEffect has missing dependencies: 'refreshAccessToken' and 'setted'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["392"],"React Hook useEffect has missing dependencies: 'loadedUserId', 'pageStartId', 'refreshAccessToken', 'setted', and 'userPageList'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["393"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'refreshAccessToken'. Either include it or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["395"],"'heartFillBtn' is defined but never used.","React Hook useEffect has missing dependencies: 'imgList.length' and 'pageIndex'. Either include them or remove the dependency array.",["396"],"React Hook useEffect has missing dependencies: 'pageList', 'pageStartId', and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["397"],"React Hook useEffect has missing dependencies: 'isLoadFinish' and 'loadPageListFunc'. Either include them or remove the dependency array.",["398"],"'data' is defined but never used.","React Hook useEffect has a missing dependency: 'chattingRoomId'. Either include it or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'chattingList'. Either include it or remove the dependency array.",["400"],"React Hook useEffect has missing dependencies: 'currentScrollHeight' and 'needScroll'. Either include them or remove the dependency array.",["401"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'refreshAccessToken' and 'socketConnect'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["402"],"React Hook useEffect has missing dependencies: 'chattingList', 'chattingListStartId', 'chattingRoomId', and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["403"],"React Hook useEffect has missing dependencies: 'gettingChattingList' and 'noMoreChat'. Either include them or remove the dependency array.",["404"],"React Hook useEffect has missing dependencies: 'hashTagPageList' and 'hashTagPageStartId'. Either include them or remove the dependency array.",["405"],"React Hook useEffect has missing dependencies: 'isFinished' and 'loadHashtagPage'. Either include them or remove the dependency array.",["406"],"React Hook useEffect has missing dependencies: 'checked' and 'notificationId'. Either include them or remove the dependency array.",["407"],"React Hook useEffect has missing dependencies: 'noticeList', 'noticeStartId', and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["408"],"React Hook useEffect has missing dependencies: 'NoticeRead' and 'noMoreNotice'. Either include them or remove the dependency array.",["409"],["410"],"React Hook useEffect has missing dependencies: 'newPostCommentNotice', 'newPostLikeNotice', 'newPostReadCommentAuth', 'newPostReadLikeAuth', 'newPostReadPostAuth', and 'newPostWriteCommentAuth'. Either include them or remove the dependency array.",["411"],["412"],"React Hook useEffect has a missing dependency: 'wholeFriendList'. Either include it or remove the dependency array.",["413"],["414"],"React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.",["415"],"React Hook useEffect has missing dependencies: 'profileSettingPreset' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["416"],["417"],["418"],"React Hook useEffect has a missing dependency: 'passwordChange'. Either include it or remove the dependency array.",["419"],["420"],{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"487","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"487","fix":"496"},{"desc":"487","fix":"497"},{"desc":"498","fix":"499"},{"desc":"487","fix":"500"},"Update the dependencies array to be: [getUserIdANdOpenSSEHandler, isLogin, logoutFunc]",{"range":"501","text":"502"},"Update the dependencies array to be: [loginFunc]",{"range":"503","text":"504"},"Update the dependencies array to be: [rightBookState, leftBookState, goBack]",{"range":"505","text":"506"},"Update the dependencies array to be: [noticeCount, refreshAccessToken]",{"range":"507","text":"508"},"Update the dependencies array to be: [noticeCount, noticeEventSource]",{"range":"509","text":"510"},"Update the dependencies array to be: [leftBookState, stompClient]",{"range":"511","text":"512"},"Update the dependencies array to be: [groupId, loadCommentOfComment, setLoadCommentOfComment]",{"range":"513","text":"514"},"Update the dependencies array to be: [commentOfCommentList, commentOfCommentStartId, groupId, pageId, refreshAccessToken, toggle]",{"range":"515","text":"516"},"Update the dependencies array to be: [InView, isLastCommentOfComment, loadThisCommentOfComment]",{"range":"517","text":"518"},"Update the dependencies array to be: [isDeleted, presetComment]",{"range":"519","text":"520"},"Update the dependencies array to be: [pageId, refreshAccessToken]",{"range":"521","text":"522"},"Update the dependencies array to be: [inView, isLastComment, presetComment]",{"range":"523","text":"524"},"Update the dependencies array to be: [imageIndex, postedImageList.length]",{"range":"525","text":"526"},"Update the dependencies array to be: [bottomStuff, refreshAccessToken, setted]",{"range":"527","text":"528"},"Update the dependencies array to be: [loadedUserId, pageStartId, refreshAccessToken, setted, triger, userPageList]",{"range":"529","text":"530"},"Update the dependencies array to be: [leftBookState, userId]",{"range":"531","text":"532"},"Update the dependencies array to be: [loadedUserId, refreshAccessToken]",{"range":"533","text":"534"},"Update the dependencies array to be: [imageIndex, imgList.length, pageIndex]",{"range":"535","text":"536"},"Update the dependencies array to be: [leftBookState, pageList, pageStartId, refreshAccessToken]",{"range":"537","text":"538"},"Update the dependencies array to be: [inView, isLoadFinish, loadPageListFunc]",{"range":"539","text":"540"},"Update the dependencies array to be: [chattingRoomId, stompClient]",{"range":"541","text":"542"},"Update the dependencies array to be: [chattingList, newChatting]",{"range":"543","text":"544"},"Update the dependencies array to be: [chattingList, currentScrollHeight, needScroll]",{"range":"545","text":"546"},"Update the dependencies array to be: [chattingRoomId, refreshAccessToken, socketConnect]",{"range":"547","text":"548"},"Update the dependencies array to be: [chattingList, chattingListStartId, chattingRoomId, chattingroomInfoSet, refreshAccessToken]",{"range":"549","text":"550"},"Update the dependencies array to be: [gettingChattingList, inView, noMoreChat]",{"range":"551","text":"552"},"Update the dependencies array to be: [hashTag, hashTagPageList, hashTagPageStartId]",{"range":"553","text":"554"},"Update the dependencies array to be: [InView, isFinished, loadHashtagPage]",{"range":"555","text":"556"},"Update the dependencies array to be: [checked, notificationId]",{"range":"557","text":"558"},"Update the dependencies array to be: [noticeCount, noticeList, noticeStartId, refreshAccessToken]",{"range":"559","text":"560"},"Update the dependencies array to be: [NoticeRead, inView, noMoreNotice]",{"range":"561","text":"562"},"Update the dependencies array to be: [leftBookState, refreshAccessToken]",{"range":"563","text":"564"},"Update the dependencies array to be: [newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",{"range":"565","text":"566"},"Update the dependencies array to be: [refreshAccessToken]",{"range":"567","text":"568"},"Update the dependencies array to be: [chosenFriendList, wholeFriendList]",{"range":"569","text":"570"},{"range":"571","text":"568"},"Update the dependencies array to be: [password, passwordCheck]",{"range":"572","text":"573"},"Update the dependencies array to be: [profileSettingPreset, refreshAccessToken]",{"range":"574","text":"575"},{"range":"576","text":"568"},{"range":"577","text":"568"},"Update the dependencies array to be: [passwordChange, passwordChangeCheck]",{"range":"578","text":"579"},{"range":"580","text":"568"},[2791,2793],"[getUserIdANdOpenSSEHandler, isLogin, logoutFunc]",[4725,4727],"[loginFunc]",[8981,9012],"[rightBookState, leftBookState, goBack]",[9603,9605],"[noticeCount, refreshAccessToken]",[9900,9913],"[noticeCount, noticeEventSource]",[10599,10614],"[leftBookState, stompClient]",[6070,6092],"[groupId, loadCommentOfComment, setLoadCommentOfComment]",[7146,7154],"[commentOfCommentList, commentOfCommentStartId, groupId, pageId, refreshAccessToken, toggle]",[7458,7466],"[InView, isLastCommentOfComment, loadThisCommentOfComment]",[11500,11511],"[isDeleted, presetComment]",[18187,18189],"[pageId, refreshAccessToken]",[19431,19439],"[inView, isLastComment, presetComment]",[20315,20327],"[imageIndex, postedImageList.length]",[1650,1663],"[bottomStuff, refreshAccessToken, setted]",[3562,3570],"[loadedUserId, pageStartId, refreshAccessToken, setted, triger, userPageList]",[5595,5610],"[leftBookState, userId]",[6496,6510],"[loadedUserId, refreshAccessToken]",[1215,1227],"[imageIndex, imgList.length, pageIndex]",[5987,6002],"[leftBookState, pageList, pageStartId, refreshAccessToken]",[6228,6236],"[inView, isLoadFinish, loadPageListFunc]",[4554,4567],"[chattingRoomId, stompClient]",[4818,4831],"[chattingList, newChatting]",[5999,6013],"[chattingList, currentScrollHeight, needScroll]",[7158,7174],"[chattingRoomId, refreshAccessToken, socketConnect]",[8221,8242],"[chattingList, chattingListStartId, chattingRoomId, chattingroomInfoSet, refreshAccessToken]",[9034,9042],"[gettingChattingList, inView, noMoreChat]",[1578,1587],"[hashTag, hashTagPageList, hashTagPageStartId]",[1762,1770],"[InView, isFinished, loadHashtagPage]",[733,735],"[checked, notificationId]",[5123,5136],"[noticeCount, noticeList, noticeStartId, refreshAccessToken]",[5364,5372],"[NoticeRead, inView, noMoreNotice]",[3787,3802],"[leftBookState, refreshAccessToken]",[3632,3634],"[newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",[3347,3349],"[refreshAccessToken]",[5083,5101],"[chosenFriendList, wholeFriendList]",[3405,3407],[2848,2863],"[password, passwordCheck]",[3101,3103],"[profileSettingPreset, refreshAccessToken]",[2151,2153],[1280,1282],[3180,3201],"[passwordChange, passwordChangeCheck]",[1525,1527]]