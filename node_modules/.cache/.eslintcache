[{"C:\\Users\\성의현\\Desktop\\grad\\src\\index.js":"1","C:\\Users\\성의현\\Desktop\\grad\\src\\App.js":"2","C:\\Users\\성의현\\Desktop\\grad\\src\\apiUrl.js":"3","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js":"4","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js":"5","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\mainInnerStuff.js":"6","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js":"7","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\loginLogo.js":"8","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\mainLogo.js":"9","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js":"10","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\detailPage.js":"11","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js":"12","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js":"13","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js":"14","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js":"15","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js":"16","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js":"17","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js":"18","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js":"19","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js":"20","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js":"21","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js":"22","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js":"23","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js":"24","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js":"25","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js":"26","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js":"27","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js":"28","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js":"29","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js":"30","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js":"31"},{"size":197,"mtime":1662350852278,"results":"32","hashOfConfig":"33"},{"size":3774,"mtime":1663760076847,"results":"34","hashOfConfig":"33"},{"size":4684,"mtime":1663985884488,"results":"35","hashOfConfig":"33"},{"size":970,"mtime":1662821982232,"results":"36","hashOfConfig":"33"},{"size":12590,"mtime":1663991980059,"results":"37","hashOfConfig":"33"},{"size":1108,"mtime":1662350852299,"results":"38","hashOfConfig":"33"},{"size":663,"mtime":1663672998284,"results":"39","hashOfConfig":"33"},{"size":524,"mtime":1662803158670,"results":"40","hashOfConfig":"33"},{"size":527,"mtime":1662803155794,"results":"41","hashOfConfig":"33"},{"size":310,"mtime":1663859446413,"results":"42","hashOfConfig":"33"},{"size":10693,"mtime":1663943231309,"results":"43","hashOfConfig":"33"},{"size":117,"mtime":1663672998268,"results":"44","hashOfConfig":"33"},{"size":8057,"mtime":1663245667412,"results":"45","hashOfConfig":"33"},{"size":1130,"mtime":1663672998277,"results":"46","hashOfConfig":"33"},{"size":2602,"mtime":1663240479172,"results":"47","hashOfConfig":"33"},{"size":98,"mtime":1662350852287,"results":"48","hashOfConfig":"33"},{"size":17334,"mtime":1663249865216,"results":"49","hashOfConfig":"33"},{"size":3893,"mtime":1663760076853,"results":"50","hashOfConfig":"33"},{"size":1655,"mtime":1663859446409,"results":"51","hashOfConfig":"33"},{"size":8020,"mtime":1663991802699,"results":"52","hashOfConfig":"33"},{"size":10145,"mtime":1663985165816,"results":"53","hashOfConfig":"33"},{"size":2604,"mtime":1662816499174,"results":"54","hashOfConfig":"33"},{"size":14199,"mtime":1662818387887,"results":"55","hashOfConfig":"33"},{"size":5698,"mtime":1662878365688,"results":"56","hashOfConfig":"33"},{"size":11184,"mtime":1663760076852,"results":"57","hashOfConfig":"33"},{"size":6854,"mtime":1663760076852,"results":"58","hashOfConfig":"33"},{"size":8814,"mtime":1663760076850,"results":"59","hashOfConfig":"33"},{"size":13661,"mtime":1663760076851,"results":"60","hashOfConfig":"33"},{"size":723,"mtime":1663760076855,"results":"61","hashOfConfig":"33"},{"size":16915,"mtime":1663760076851,"results":"62","hashOfConfig":"33"},{"size":1466,"mtime":1663485740364,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"18q8ntq",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"67"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"67"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"67"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"67"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"67"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"67"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"67"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"67"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"67"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"67"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"67"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"67"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"67"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"67"},"C:\\Users\\성의현\\Desktop\\grad\\src\\index.js",[],[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\App.js",["175"],[],"import axios from 'axios';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport Home from \"./routes/Home/root/HomeMain\";\r\nimport Login from \"./routes/Login/root/LoginMain\";\r\nimport { logoutApiUrl, KakaoTokenUrl, NaverTokenUrl, refreshNewAccessTokenUrl } from './apiUrl';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n\r\n  //로그인시 refresh token을 local Storage에 저장하는 기능 앞에 Bearer 가 붙어있다.\r\n  const loginFunc = (res) => {\r\n    console.log(res);\r\n    //alert(\"Welcome\");\r\n    localStorage.setItem(\"rft\", res.headers.authorization);\r\n    window.location.href=\"/main\";\r\n  };\r\n\r\n  //Access token이 만료되었을 수 있는 상황에서 refresh Token을 통해 다시 발급받는다.\r\n  const refreshAccessToken = () => {\r\n    axios.get(refreshNewAccessTokenUrl, {\r\n      headers:{\r\n        \"REFRESH-TOKEN\": localStorage.getItem(\"rft\")\r\n      }\r\n    })\r\n    .then((res) => {\r\n      console.log(\"토큰 재발급\");\r\n      //reDoApiCall();\r\n    })\r\n    .catch((res) =>{\r\n      console.log(res);\r\n      alert(\"장시간 로그인되어, 자동 로그아웃되었습니다. 다시 로그인해주세요.\");\r\n      //logoutFunc(); //정상작동 확인되면 앞 주석 지우기\r\n    })\r\n  };\r\n\r\n  //로그아웃 함수\r\n  const logoutFunc = () => {\r\n    axios.get(logoutApiUrl)\r\n    .then((res) => {\r\n      console.log(res);\r\n      alert(\"logout success\");\r\n      localStorage.removeItem(\"rft\");//refresh token 지우기\r\n      window.location.href=\"/\";\r\n    })\r\n    .catch((res)=>{\r\n      console.log(\"error\")\r\n      console.log(res);\r\n    });\r\n  };\r\n\r\n  //카카오 로그인 시 토큰을 프론트로 받게 되는 경우 처리하는 함수\r\n  const socialLogin = () => {\r\n    if(localStorage.getItem(\"rft\") === \"kakao\"){//소셜 처리중인 경우\r\n      const params = new URL(window.location.href).searchParams;\r\n      const code = params.get(\"code\");\r\n      console.log(code);\r\n      axios.post(KakaoTokenUrl + code)\r\n      .then((res) => {//문제가 없는 경우이므로, 로그인 해준다.\r\n        console.log(res);\r\n        loginFunc(res);\r\n      })\r\n      .catch((res) => {\r\n        console.log(res);\r\n        alert(\"소셜 로그인에 문제가 발생했습니다.\");\r\n        localStorage.removeItem(\"rft\");//소셜 상태를 종료한다.\r\n        window.location.href = \"/\";//다시 원래의 로그인 url로 이동한다.\r\n      });\r\n    }\r\n    else if(localStorage.getItem(\"rft\") === \"naver\"){//소셜 처리중인 경우\r\n      const params = new URL(window.location.href).searchParams;\r\n      const code = params.get(\"code\");\r\n      console.log(code);\r\n      axios.post(NaverTokenUrl + code)\r\n      .then((res) => {//문제가 없는 경우이므로, 로그인 해준다.\r\n        console.log(res);\r\n        loginFunc(res);\r\n      })\r\n      .catch((res) => {\r\n        console.log(res);\r\n        alert(\"소셜 로그인에 문제가 발생했습니다.\");\r\n        localStorage.removeItem(\"rft\");//소셜 상태를 종료한다.\r\n        window.location.href = \"/\";//다시 원래의 로그인 url로 이동한다.\r\n      });\r\n    }\r\n  };\r\n  useEffect(socialLogin, []);\r\n\r\n  return (\r\n    <Router>\r\n      {/*localStorage.getItem(\"rft\") === null ? <Redirect to='/' /> : null*/}\r\n      {/*localStorage.getItem(\"rft\") !== \"social\" && localStorage.getItem(\"rft\") !== null ?\r\n        <Redirect to=\"/main\" /> : null \r\n      */}\r\n      <Switch>\r\n        <Route path=\"/main\">\r\n          <Home logout={logoutFunc} refreshAccessToken={refreshAccessToken}/>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Login login={loginFunc} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\성의현\\Desktop\\grad\\src\\apiUrl.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js",["176","177","178","179","180","181","182"],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\mainInnerStuff.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\loginLogo.js",["183"],[],"import Style from \"./loginLogo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = () =>{\r\n    const clickHandler = (event) => {\r\n        event.preventDefault();\r\n        window.location.href= '/';\r\n    }\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img src={logo} className={Style.logo} onClick={clickHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\mainLogo.js",["184"],[],"import Style from \"./mainLogo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = () =>{\r\n    const clickHandler = (event) => {\r\n        event.preventDefault();\r\n        window.location.href= '/main';\r\n    }\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img className={Style.logo} src={logo} onClick={clickHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\detailPage.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],[],"//가운데에 띄우는 화면\r\nimport Style from './detailPage.module.css';\r\nimport moreStuff from './moreStuff.png';\r\nimport heartImg from './heart_outline.png';\r\nimport heartImgFill from './heart_fill.png';\r\nimport newCommentImg from './tagImages/message.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    LoadDetailPageUrl,\r\n\r\n} from './../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst RenderCommentOfComment = ({commentId}) => {\r\n    let CommentofCommentstartId = 987654321;\r\n    return (\r\n        <div className={Style.CommentBox} style={{width:\"80%\"}}>\r\n                                <div className={Style.CommentProfileArea}>\r\n                                    <img className={Style.UserImage} />\r\n                                    <p className={Style.UserNickname}>아아아아아아아아아아아아아아</p>\r\n                                    <img src={moreStuff} className={Style.UserSetting} />\r\n                                </div>\r\n                                <p className={Style.commentText}>대댓글 내용이 오는 공간입니다.ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ</p>\r\n                                <div className={Style.commentbtnArea}>\r\n                                    <img src={heartImg} className={Style.buttonImg} />\r\n                                    <p className={Style.likeandCommentCount}>좋아요111개</p>\r\n                                    <img src={newCommentImg} className={Style.buttonImg} />\r\n                                    <p className={Style.likeandCommentCount}>답글 더보기</p>\r\n                                </div>\r\n                            </div>\r\n\r\n    );\r\n}\r\n\r\nconst RenderComment = ({commentList}) => {\r\n    return(\r\n        <div className={Style.CommentArea}>\r\n            {\r\n            commentList.map((data, index) => (\r\n                <div className={Style.singleCommentArea}>\r\n                    <div className={Style.CommentBox} style={{width:\"100%\"}}>\r\n                            <div className={Style.CommentProfileArea}>\r\n                                <img className={Style.UserImage} />\r\n                                <p className={Style.UserNickname}>아아아아아아아아아아아아아아</p>\r\n                                <img src={moreStuff} className={Style.UserSetting} />\r\n                            </div>\r\n                            <p className={Style.commentText}>글 내용이 오는 공간입니다.ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ</p>\r\n                            <div className={Style.commentbtnArea}>\r\n                                <img src={heartImg} className={Style.buttonImg} />\r\n                                <p className={Style.likeandCommentCount}>좋아요1111개</p>\r\n                                <img src={newCommentImg} className={Style.buttonImg} />\r\n                                <p className={Style.likeandCommentCount}>답글 더보기</p>\r\n                            </div>\r\n                    </div>\r\n                    <RenderCommentOfComment commentId={data.commentId}/>\r\n                </div>\r\n            ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DetailPage = ({pageId, refreshAccessToken}) => {//pageId가 -1이 되면 DetailPage가 사라진다.\r\n    const [postedImageList, setPostedImageList] = useState([]);//올린 이미지 list\r\n    const [postedPersonImage, setPostedPersonImage] = useState(\"\");//올린 사람의 이미지\r\n    const [postedPersonNickname, setPostedPersonNickname] = useState(\"\");//올린 사람의 닉네임\r\n    const [postedWord, setPostedWord] = useState(\"\"); //올린 글의 내용\r\n    const [likeNumber, setLikeNumber] = useState(0); //좋아요 개수\r\n    const [postedTime, setPostedTime] = useState(\"\");//업로드 시간(n분전같은 글로 저장)\r\n    const [commentList, setCommentList] = useState([]); //업로드된 댓글\r\n    let CommentstartId = 987654321;\r\n\r\n    //초기 화면 로드 - 글 내용\r\n    const presetDetailPage = () => {\r\n        if(pageId === -1) return;\r\n        axios.get(LoadDetailPageUrl + \"/\" + pageId.toString() + \"/detail\")\r\n        .then((res) => {\r\n            setPostedImageList(res.data.data.imgUrlList);\r\n            setPostedPersonImage(res.data.data.pageDto.userDto.imgUrl);\r\n            setPostedPersonNickname(res.data.data.pageDto.userDto.nickname);\r\n            setPostedWord(res.data.data.pageDto.content);\r\n            setLikeNumber(res.data.data.pageDto.likeCount);\r\n            const now = new Date();\r\n            const postedTime = new Date(res.data.data.pageDto.createdDate);\r\n            const timeCal = (now - postedTime) / 1000;//초단위로 계산\r\n            if(timeCal < 1){//1초보다 더 빨리 이전에 올린 경우\r\n                setPostedTime(\"방금전\");\r\n            }\r\n            else{//1초 이상인 경우\r\n                if(timeCal < 60){//1초부터 59초의 경우\r\n                    setPostedTime((Math.floor(timeCal)).toString() + \"초전\");\r\n                }\r\n                else{//60초 이상인 경우\r\n                    timeCal /= 60; //분단위로 계산\r\n                    if(timeCal < 60){//1분부터 59분의 경우\r\n                        setPostedTime((Math.floor(timeCal)).toString() + \"분전\");\r\n                    }\r\n                    else{//60분 이상인 경우\r\n                        timeCal /= 60; //시간단위로 계산\r\n                        if(timeCal < 24){//1시간부터 23시간의 경우\r\n                            setPostedTime((Math.floor(timeCal)).toString() + \"시간전\");\r\n                        }\r\n                        else{//24시간이상의 경우\r\n                            timeCal /= 24; //일단위로 계산\r\n                            if(timeCal < 365){//1일부터 364일의 경우\r\n                                setPostedTime((Math.floor(timeCal)).toString() + \"일전\");\r\n                            }\r\n                            else{//그 이상의 경우\r\n                                timeCal /= 365;\r\n                                setPostedTime((Math.floor(timeCal)).toString() + \"년전\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"글을 불러오지 못했습니다.\")\r\n            }\r\n        });\r\n    };\r\n    useEffect(presetDetailPage, []);\r\n\r\n    //초기 화면 로드 - 댓글\r\n    const presetComment = () => {\r\n        if(pageId === -1) return;\r\n        axios.get(LoadDetailPageUrl + \"/\" + pageId.toString() + \"comment?startId=\" +CommentstartId.toString())\r\n        .then((res) => {\r\n            setCommentList(res.data.data);\r\n            CommentstartId = res.data.startId;\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"댓글을 불러오지 못했습니다.\")\r\n            }\r\n        });\r\n    };\r\n    useEffect(presetComment, []);\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.ImageAndScriptCover}>\r\n                <div className={Style.imageArea}>\r\n\r\n                </div>\r\n                <div className={Style.ScriptArea}>\r\n                    {/* 글 영역 */}\r\n                    <div className={Style.pageScriptArea}>\r\n                        <div className={Style.postPersonProfileArea}>\r\n                            <img className={Style.UserImage} />\r\n                            <p className={Style.UserNickname}>아아아아아앙아아아아아아아</p>\r\n                            <img src={moreStuff} className={Style.UserSetting} />\r\n                        </div>\r\n                        <div className={Style.postPersonSettingArea}>\r\n\r\n                        </div>\r\n                        <div className={Style.contentArea}>\r\n                            <p className={Style.content}>\r\n                                글 내용이 오는 공간입니다.ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ\r\n                            </p>\r\n                        </div>\r\n                        <div className={Style.likeTimeArea}>\r\n                            <div className={Style.cover}>\r\n                                <img src={heartImg} className={Style.buttonImg} />\r\n                                <p className={Style.likeandCommentCount}>좋아요2222개</p>\r\n                            </div>\r\n                            <p className={Style.time}>3초전</p>\r\n                        </div>\r\n                    </div>\r\n                    {/* 댓글 영역 */}\r\n                    <RenderComment commentList={commentList}/>\r\n                    {/* 댓글 입력 영역 */}\r\n                    <div className={Style.userCommentArea}>\r\n                        <div className={Style.cover}>\r\n                            <textarea type=\"text\" className={Style.userComment} placeholder=\"댓글을 입력하세요...\"/>\r\n                        </div>\r\n                        <div className={Style.cover}>\r\n                            <button className={Style.commentSubmitBtn}>게시</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailPage;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js",["210","211","212","213"],[],"import Style from './newPost.module.css';\r\nimport { useState } from 'react';\r\nimport addImage from '../../root/tagImages/add.png';\r\n\r\nconst HashtagList = ({deleteTag, newPostHashtag}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostHashtag.map((data, index) =>(\r\n                    <button className={Style.singleHashTag} onClick={deleteTag} key={index} value={index}>\r\n                        #{data} \r\n                    </button>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ImageList = ({deleteImage, newPostImages}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostImages.map((data, index) =>(\r\n                    <img className={Style.singlepicture} src={data} key={index} id={index} onClick={deleteImage} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeftNewPost = ({ newPostImages, setNewPostImages, newPostHashtag, setNewPostHashtag, newPostContent, setNewPostContent, uploadNewPostHandler }) => {\r\n    const [hashtag, setHashtag] = useState(\"\");//임시로 입력되는 값 변경하는 State.\r\n\r\n    //글 내용 변경 함수\r\n    const contentHandler = (event) => {\r\n        event.preventDefault();\r\n        setNewPostContent(event.target.value);\r\n    }\r\n\r\n    //받은 파일리스트가 유효한지 검사하는 함수\r\n    const ImageValid = (data) => {\r\n        let answer = true;\r\n        //먼저 받은 데이터가 1개인지 확인\r\n        if(data.length !== 1){\r\n            alert(\"한 번에 하나의 이미지를 드랍해주십시오.\");\r\n            return false;\r\n        }\r\n\r\n        //받은 input들에 대해서 이미지 여부, 용량 여부(5메가 이하),\r\n        data.map((d, index) => {\r\n            if(!(d.type === 'image/png' || d.type === 'image/jpg' || d.type === 'image/jpeg')){\r\n                alert(`이미지 파일만 업로드 가능합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            if(d.size > 1024 * 1024 * 50){\r\n                alert(`50MB 이상의 이미지는 업로드 불가합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            newPostImages.map((cd, index) => {\r\n                if(cd.name === d.name){\r\n                    alert(`같은 이름의 파일이 이미 업로드 되어있습니다.\\n${d.name}`);\r\n                    answer = false;\r\n                }\r\n            });\r\n        });\r\n        return answer;\r\n    };\r\n\r\n    //이미지 영역에 파일을 드랍한 경우 - ondrop\r\n    const imageDropHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const inputFile = [...event.dataTransfer?.files];//지금 들어온 파일이다.\r\n        if(ImageValid(inputFile)){//유효한 파일인 경우 집어넣는다.\r\n            //이미지를 랜더링 해서 집어넣는다.\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(inputFile[0]);\r\n            reader.onload = (imageData) => {\r\n                const curPreview = [...newPostImages];\r\n                curPreview.push(imageData.target.result);\r\n                setNewPostImages(curPreview);\r\n            }\r\n        }\r\n\r\n        //CSS는 반드시 실행된다.\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 영역 위에 파일을 올려놓은 경우 - ondragover(이게 있어야 ondrop이 활성화 된다.)\r\n    const imageDragOverHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    //파일을 이미지 영역 위로 최초 진입한 경우 - ondragenter\r\n    const imageDragEnterHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"0.5\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"hidden\";\r\n        imageUploadArea.style.backgroundColor=\"rgb(236, 236, 236)\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(150, 150, 150)\";\r\n    };\r\n\r\n    //파일을 이미지 영역 위에서 벗어나게 한 경우 - ondragleave\r\n    const imageDragLeaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"visible\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 미리 보기 화면 바꿔주는 함수\r\n\r\n\r\n    //hashtag영역 바꿔주는 함수\r\n    const hashtagHandler = (event) => {\r\n        event.preventDefault();\r\n        const value = event.target.value;\r\n        if(value === \" \"){\r\n            alert(\"1글자 이상의 키워드를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(value[value.length - 1] === \" \"){// 이 경우 \r\n            const tmp = newPostHashtag;\r\n            const input = value.slice(0,-1);\r\n            if(!newPostHashtag.includes(input)){\r\n                tmp.push(input);\r\n                setNewPostHashtag(tmp);\r\n                setHashtag(\"\");\r\n            }\r\n            setHashtag(\"\");\r\n        }\r\n        else{\r\n            setHashtag(value);\r\n        }\r\n    }\r\n\r\n    //hashtag 지우는 함수\r\n    const deleteTag = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostHashtag];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setNewPostHashtag(tmp);\r\n    };\r\n\r\n    //이미지 지우는 함수\r\n    const deleteImage = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostImages];\r\n        tmp.splice(Number(event.target.id), 1);\r\n        setNewPostImages(tmp);\r\n    }\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={uploadNewPostHandler}>\r\n            {/* 드래그 앤 드롭 영역 */}\r\n            <div className={Style.pictureArea}>\r\n                <div className={Style.picture} id=\"imageUploadArea\" onDrop={imageDropHandler} onDragOver={imageDragOverHandler} onDragEnter={imageDragEnterHandler} onDragLeave={imageDragLeaveHandler}>\r\n                    <img src={addImage} className={Style.pictureinnerimage} id=\"imageUploadImage\"/>\r\n                    <p className={Style.pictureinnerword} id=\"imageUploadMent\">업로드할 이미지를 여기로 옮겨주세요.</p>\r\n                </div>\r\n            </div>\r\n            {/* 올린 이미지 미리 보기 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <ImageList deleteImage={deleteImage} newPostImages={newPostImages} />\r\n            </div>\r\n            {/* hashtag label 영역 */}\r\n            <p className={Style.hashtag}>키워드 (띄어쓰기로 분리해주세요)</p>\r\n            {/* hashtag input 영역 */}\r\n            <input \r\n                type=\"text\"\r\n                value={hashtag}\r\n                onChange={hashtagHandler}\r\n                className={Style.hashtagInput}\r\n            />\r\n            {/* hashtag list 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <HashtagList deleteTag={deleteTag} newPostHashtag={newPostHashtag}/>\r\n            </div>\r\n            {/* word label 영역 */}\r\n            <p className={Style.word}>글을 입력해 주세요</p>\r\n            {/* word input 영역 */}\r\n            <input \r\n                type=\"text\" \r\n                vaslue={newPostContent}\r\n                onChange={contentHandler}\r\n                className={Style.wordInput} />\r\n            {/* 글 제출 영역 */}\r\n            <div className={Style.area}>\r\n                <button type=\"submit\" className={Style.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default LeftNewPost;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js",["214"],[],"import Style from './newPost.module.css';\r\nimport {useEffect} from 'react';\r\n\r\nconst RightNewPost = ({newPostLikeNotice, setNewPostLikeNotice, newPostCommentNotice, setNewPostCommentNotice, newPostReadPostAuth, setNewPostReadPostAuth, newPostReadCommentAuth, setNewPostReadCommentAuth, newPostWriteCommentAuth, setNewPostWriteCommentAuth, newPostReadLikeAuth, setNewPostReadLikeAuth}) => {\r\n    //초기에 모든 허용을 진하게 만드는 함수\r\n    const firstColoring = () => {\r\n        //좋아요 알림부분 반영\r\n        if(newPostLikeNotice){\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 알림 부분 반영\r\n        if(newPostCommentNotice){\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //읽기 권한 반영\r\n        if(newPostReadPostAuth === \"ALL\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else if(newPostReadPostAuth === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 읽기 반영\r\n        if(newPostReadCommentAuth){\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 쓰기 반영\r\n        if(newPostWriteCommentAuth){\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n        \r\n        //좋아요 읽기 반영\r\n        if(newPostReadLikeAuth){\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(firstColoring, []);\r\n\r\n    //누른 설정을 반영하는 함수\r\n    //좋아요 알림\r\n    const likeNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostLikeNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"likeNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostLikeNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"likeNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostLikeNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 알림\r\n    const commentNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostCommentNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"commentNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostCommentNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"commentNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostCommentNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //읽기 권한 - 얘만 3개다.\r\n    const readPostAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(clicked === \"readPostAuthAllow\"){//허용이 눌린 경우\r\n            if(newPostReadPostAuth !== \"ALL\"){//근데 이미 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"ALL\");//허용으로 변경\r\n            }\r\n        }\r\n        else if(clicked === \"readPostAuthHalfAllow\"){//팔로우만 허용인 경우\r\n            if(newPostReadPostAuth !== \"FOLLOW_ONLY\"){//근데 이미 팔로우만 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"FOLLOW_ONLY\");//팔로우만 허용으로 변경\r\n            }\r\n        }\r\n        else{//거부인 경우\r\n            if(newPostReadPostAuth !== \"NONE\"){//근데 이미 거부로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"NONE\");//거부로 변경\r\n            }\r\n        }\r\n    };\r\n    //댓글 읽기 권한\r\n    const readCommentAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 쓰기 권한\r\n    const writeCommentAuthHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostWriteCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostWriteCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostWriteCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //좋아요 읽기 권한\r\n    const readLikeAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadLikeAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readLikeAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadLikeAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readLikeAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadLikeAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className={Style.WholeCover}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeAllow\" onClick={likeNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeDenial\" onClick={likeNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeAllow\" onClick={commentNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeDenial\" onClick={commentNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthAllow\" onClick={readPostAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthHalfAllow\" onClick={readPostAuthClickHandler}>팔로우 된 사람만 허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthDenial\" onClick={readPostAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthAllow\" onClick={readCommentAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthDenial\" onClick={readCommentAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 쓰기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthAllow\" onClick={writeCommentAuthHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthDenial\" onClick={writeCommentAuthHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthAllow\" onClick={readLikeAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthDenial\" onClick={readLikeAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNewPost;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js",["215","216"],[],"import Style from './friend.module.css';\r\nimport Profile from '../../root/profile';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    getFolloweeListUrl,\r\n    getfollowerListUrl,\r\n    getcurrentProfileUrl,\r\n    getMyUserIdUrl,\r\n} from '../../../../apiUrl';\r\n\r\nconst RenderRightFriend = ({followeeList, leftBookChangeHandler}) => {\r\n    return(\r\n        <div className={Style.friendList}>\r\n            {\r\n                followeeList.length === 0 ? \r\n                <p className={Style.noFollowee}>팔로우 중인 유저가 없습니다.</p>\r\n                :\r\n                followeeList.map((data, index) => (\r\n                    <div className={Style.friendProfileCover} key={index}>\r\n                        <Profile img={data.imgUrl} name={data.nickname} userId={data.userId} leftBookChangeHandler={leftBookChangeHandler}/>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst RightFriend = ({leftBookChangeHandler, refreshAccessToken}) => {\r\n    const [followeeList, setFolloweeList] = useState([]);\r\n    const [followerList, setFollowerList] = useState([]);\r\n    const [myProfileImage, setMyProfileImage] = useState(\"\");\r\n    const [myProfileName, setMyProfileName] = useState(\"\");\r\n    const [myId, setMyId] = useState(\"\");\r\n\r\n    //화면 렌더링 초기 설정 함수\r\n    const rightFriendPreset = () => {\r\n        axios.get(getFolloweeListUrl)//내가 팔로우 중인 유저 불러오기\r\n        .then((res) => {\r\n            setFolloweeList(res.data.data);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getfollowerListUrl)//나를 팔로우 중인 유저 불러오기\r\n        .then((res) => {\r\n            setFollowerList(res.data.data);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getcurrentProfileUrl)//내 정보 불러오기\r\n        .then((res) => {\r\n            setMyProfileName(res.data.data.nickname);\r\n            setMyProfileImage(res.data.data.imgUrl);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n\r\n        axios.get(getMyUserIdUrl)//내 id불러오기\r\n        .then((res) => {\r\n            setMyId(res.data.data.userId);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            }\r\n        });\r\n    };\r\n    useEffect(rightFriendPreset, []);\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <Profile img={myProfileImage} name={myProfileName} userId={myId} leftBookChangeHandler={leftBookChangeHandler}/>\r\n            </div>\r\n            <RenderRightFriend followeeList={followeeList} leftBookChangeHandler={leftBookChangeHandler}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightFriend;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js",["217"],[],"//피드 여러개 띄우는 화면\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport axios from 'axios';\r\nimport Style from './page.module.css';\r\nimport {\r\n    pageloadUrl,\r\n} from \"../../../../apiUrl\";\r\n\r\nlet pageList = [1,2,3,4,5];\r\nlet currentStartId = 987654321;\r\n\r\nconst Pages = ({ obj, lastRef }) => {\r\n    return(\r\n        <div className={Style.singlePageCover}>\r\n            {\r\n                obj.map((data, index) => (\r\n                    index === (obj.length - 1) ? \r\n                    <p key={index} ref={lastRef}>last obj</p>\r\n                    :\r\n                    <p key={index}>{data}</p>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst LeftPage = ({refreshAccessToken}) => {\r\n    const [ref, inView] = useInView();//ref를 {ref}로 설정한요소가 화면에 보이는 상황이면 true가 나오고, 아닌 경우 false이다.\r\n\r\n    const pageLoadFunc = () => {\r\n        if(inView){\r\n            axios.get(pageloadUrl + \"?startId=\" + currentStartId)\r\n            .then((res) => {\r\n                console.log(\"데이터 추가\");\r\n                pageList = [...res.data.data];//추가 데이터 저장\r\n                currentStartId = res.startId;\r\n            })\r\n            .catch((res) => {\r\n                console.log(\"더이상 글이 없습니다.\");\r\n                console.log(res);\r\n            })\r\n        }\r\n    };\r\n    useEffect(pageLoadFunc, [inView]);\r\n    return(\r\n        <div className={Style.pageCover}>\r\n            <Pages obj={pageList} lastRef={ref}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPage;\r\n\r\n","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js",["240","241","242","243","244","245","246","247"],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js",["248"],[],"//회원가입 부분\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Style from './innerSignUp.module.css';\r\nimport {\r\n    signUpApiUrl,\r\n    emailApiUrl,\r\n    loginApiUrl\r\n} from \"../../../apiUrl\";\r\n\r\nconst SignUp = ({login, toLoginPage}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [ageAgree, setAgeAgree] = useState(false);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [genderAgree, setGenderAgree] = useState(false);\r\n    const [emailAccept, setEmailAccept] = useState(false);\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n    //input변경 처리\r\n    const emailHandler = (event) => {\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n        setPasswordCheck(\"\");\r\n    };\r\n    const passwordCheckHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordCheck(event.target.value);\r\n    };\r\n    const nicknameHandler = (event) => {\r\n        event.preventDefault();\r\n        setNickname(event.target.value);\r\n    };\r\n    const ageHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.value >= 0){\r\n            setAge(event.target.value);\r\n        }\r\n    };\r\n    const ageAgreeHandler = () => {\r\n        setAgeAgree((current)=> !current);\r\n    };\r\n    const genderHandler = (event) => {\r\n        setGender(event.target.id);\r\n    };\r\n    const genderAgreeHandler = () => {\r\n        setGenderAgree((current)=> !current);\r\n    };\r\n\r\n    //비밀번호 유효성 확인 함수\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    }\r\n    //비밀번호 유효성 확인함수 실행부분\r\n    const passwordValid = () => {\r\n        if(passwordValidCheck(password)){\r\n            setPasswordInvalid(true);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(102, 181, 255)\";\r\n        }\r\n        else{\r\n            setPasswordInvalid(false);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(218, 86, 86)\";\r\n        }\r\n    }\r\n    useEffect(passwordValid, [password]);\r\n\r\n    //비밀번호 check확인 함수\r\n    const passwordCheckFunc = () => {\r\n        if(password !== passwordCheck){\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckFunc, [passwordCheck]);\r\n\r\n    //input재클릭 시 자동으로 전체선택 해주는 함수\r\n    const onfocusHandler = (event) => {\r\n        event.target.select();\r\n    };\r\n\r\n    //이메일 인증처리 함수\r\n    const emailSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(emailApiUrl, {\r\n            email: email,\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                alert(\"인증 메일을 보냈습니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = true;\r\n                setEmailAccept(true);\r\n            })\r\n            .catch((res)=> {\r\n                console.log(res);\r\n                alert(\"에러 발생 다시 시도해주십시오\");\r\n                document.querySelector(\"#emailInput\").select();\r\n            });\r\n    };\r\n\r\n    //회원가입 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '' || password === '' || passwordCheck === '' || nickname === '' || age === 0 || gender === ''){\r\n            alert(\"정보를 모두 입력해 주십시오.\")\r\n            return;\r\n        }\r\n        if(password !== passwordCheck) {\r\n            alert(\"비밀번호를 다시 확인해 주십시오.\");\r\n            return;\r\n        }\r\n        if(!emailAccept) {\r\n            alert(\"이메일 인증을 먼저 해주십시오.\");\r\n            return;\r\n        }\r\n        if(!passwordInvalid) { \r\n            alert(\"비밀번호의 조건을 맞춰주십시오.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(signUpApiUrl, {\r\n                email: email,\r\n                password: password,\r\n                nickname: nickname,\r\n                age: age,\r\n                gender: gender,\r\n                ageVisible: ageAgree,\r\n                genderVisible: genderAgree,\r\n        })\r\n        .then((res) => {\r\n            alert(\"회원가입 되셨습니다.\");\r\n            //즉시 로그인 Api호출\r\n            axios.post(loginApiUrl, {\r\n                email: email,\r\n                password: password,\r\n            })\r\n            .then((res) => {\r\n                login(res);\r\n                window.location.href=\"/main\";\r\n            })\r\n            .catch((res) => {\r\n                alert(\"문제 발생. 다시 로그인 시도해주십시오.\");\r\n                toLoginPage();//로그인화면으로 이동\r\n            });\r\n        })\r\n        .catch((res) =>{\r\n            if(res.response.status === 400){\r\n                alert(\"이미 가입된 이메일입니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = false;\r\n                setEmailAccept(false);\r\n                document.querySelector(\"#emailInput\").select();\r\n            }\r\n            else{\r\n                console.log(\"error\");\r\n                console.log(res);\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <form className={Style.SignUpCover} onSubmit={submitHandler}>\r\n            {/* 이메일 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"emailInput\">\r\n                    Email\r\n                </label>\r\n            </div>\r\n            {/* 이메일 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"emailInput\"\r\n                            type=\"email\"\r\n                            className={Style.formInput}\r\n                            value={email}\r\n                            onChange={emailHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.emailButton}\r\n                            onClick={emailSubmitHandler}>\r\n                            인증\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 비밀번호 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordInput\">\r\n                    Password  \r\n                </label>\r\n                <p id=\"validPasswordColorWord\" className={Style.smallAlertWord}>  (8~16자리, 소문자, 특수문자를 하나이상 포함.)</p>\r\n            </div>\r\n            {/* 비밀번호 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={password}\r\n                    onChange={passwordHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 비밀번호 확인 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordCheckInput\">\r\n                    Password 확인\r\n                </label>\r\n            </div>\r\n            {/* 비밀번호 확인 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordCheckInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={passwordCheck}\r\n                    onChange={passwordCheckHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 닉네임 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"nicknameInput\">\r\n                    Nickname\r\n                </label>\r\n            </div>\r\n            {/* 닉네임 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"nicknameInput\"\r\n                    type=\"text\"\r\n                    className={Style.formInput}\r\n                    value={nickname}\r\n                    onChange={nicknameHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 나이 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"ageInput\">\r\n                    나이\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 나이 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageInput\"\r\n                            type=\"number\"\r\n                            className={Style.formInput}\r\n                            value={age}\r\n                            onChange={ageHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={ageAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 성별 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}>\r\n                    성별\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 성별 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.genderInputArea}>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"MALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"MALE\" className={Style.genderLabel}>남</label>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"FEMALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"FEMALE\" className={Style.genderLabel}>여</label>\r\n                            </div>\r\n                            <div />\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"genderAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={genderAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.btnArea}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            onClick={toLoginPage}\r\n                            type=\"button\"\r\n                            className={Style.cancelBtn}\r\n                            value=\"0\">\r\n                            취 소\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={Style.submitBtn}>\r\n                            가 입\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js",["249","250"],[],"//로그인의 초기 화면. id, 비번을 쓰는 곳이 있다.\r\nimport { useState } from 'react';\r\nimport Style from './innerMain.module.css';\r\nimport KakaoImg from '../socialImg/Kakao.png';\r\nimport NaverImg from '../socialImg/Naver.png';\r\nimport axios from 'axios';\r\nimport {\r\n    loginApiUrl,\r\n    kakaoLoginUrl,\r\n    NaverLoginUrl,\r\n} from \"../../../apiUrl\";\r\n\r\nconst Main = ({toFindPasswordPage, toSignUpPage, login}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [wrong, setWrong] = useState(\"0\");//가능한 값, clear(문제 없음), not user(이메일이나 비번이 틀린 경우)\r\n\r\n    //input 변경시 반영해주는 함수\r\n    const emailHandler = (event) =>{\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    //로그인 클릭 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(password === '') {\r\n            alert(\"비밀번호를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(loginApiUrl, {\r\n            email: email,\r\n            password: password,\r\n        })\r\n            .then((res) => {\r\n                setWrong(\"clear\");\r\n                login(res);\r\n                window.location.href=\"/main\";\r\n            })\r\n            .catch((res) => {\r\n                console.log(res);\r\n                setWrong(\"not user\");\r\n            });\r\n    };\r\n\r\n    //카카오 로그인 처리 함수\r\n    const kakaoLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"kakao\");\r\n        window.location.href = kakaoLoginUrl;\r\n    };\r\n\r\n    //네이버 로그인 처리 함수 => 카카오와 내용은 동일하다.\r\n    const naverLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"naver\");\r\n        window.location.href = NaverLoginUrl;\r\n    };\r\n\r\n    return(\r\n        <form className={Style.loginInnerCover} onSubmit={submitHandler}>\r\n            {/* 아이디 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                className={Style.formInput}\r\n                value={email}\r\n                onChange={emailHandler}/>\r\n            </div>\r\n            {/* 비밀번호 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                className={Style.formInput}\r\n                value={password}\r\n                onChange={passwordHandler}/>\r\n            </div>\r\n            {/* 경고문 */}\r\n            <div className={Style.Cover}>\r\n                {wrong === \"not user\" ? <p className={Style.errorMes}>잘못된 이메일 혹은 비밀번호입니다.</p> : null}\r\n            </div>\r\n            {/* 로그인버튼 */}\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.loginbtn}\r\n                    type=\"submit\">\r\n                    로 그 인\r\n                </button>\r\n            </div>\r\n            {/* 찾기와 회원가입 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toFindPasswordPage}>\r\n                            비밀번호 찾기\r\n                        </p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toSignUpPage}>\r\n                            회원 가입\r\n                        </p>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            {/* 소셜 로그인 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={kakaoLoginHandler}>\r\n                            <div id=\"KakaoContainer\" className={Style.kakao}>\r\n                                <img id=\"symbol\" src={KakaoImg} className={Style.kakaoSymbol}/>\r\n                                <span id=\"label\" className={Style.kakaoLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={naverLoginHandler}>\r\n                            <div id=\"NaverContainer\" className={Style.naver}>\r\n                                <img id=\"symbol\" src={NaverImg} className={Style.naverSymbol}/>\r\n                                <span id=\"label\" className={Style.naverLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js",["251","252","253"],[],"import {useState, useEffect} from 'react';\r\nimport Style from './profileSetting.module.css';\r\nimport nullImage from '../../root/anonymous.png';\r\nimport {\r\n    getcurrentProfileUrl,\r\n    submitProfileSettingUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst ProfileSetting = ({refreshAccessToken}) => {\r\n    //api에 보낼 내용 + input에 반영해야하므로 useState로 선언\r\n    const [ps_userImage, setPs_UserImage] = useState(\"\");\r\n    const [ps_userName, setPs_UserName] = useState(\"\");\r\n    const [ps_userAge, setPs_UserAge] = useState(\"\");\r\n    const [ps_userAgeVisible, setPs_UserAgeVisible] = useState(\"\");\r\n    const [ps_userGender, setPs_userGender] = useState(\"\");\r\n    const [ps_userGenderVisible, setPs_UserGenderVisible] = useState(\"\");\r\n    const [ps_userIntroduce, setPs_UserIntroduce] = useState(\"\");\r\n\r\n    //공개 여부 인지 후 색상 변경 함수\r\n    const ageVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userAgeVisible){//나이가 공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(ageVisibleBtnChangeHandler, [ps_userAgeVisible]);\r\n\r\n    const genderVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userGenderVisible){//성별이 공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(genderVisibleBtnChangeHandler, [ps_userGenderVisible]);\r\n\r\n    //초기 상태 명시용 함수\r\n    const profileSettingPreset = () => {\r\n        axios.get(getcurrentProfileUrl)\r\n        .then((res) => {\r\n            console.log(res.data.data);\r\n            setPs_UserImage(res.data.data.imgUrl);//프로필 이미지 설정 없으면 null\r\n            setPs_UserName(res.data.data.nickname);//이름 설정 - api upload\r\n            setPs_UserAge(res.data.data.age);//나이 설정\r\n            setPs_UserAgeVisible(res.data.data.ageVisible);//나이 공개\r\n            if(res.data.data.gender === \"MALE\"){//성별 설정\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            else{\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            setPs_UserGenderVisible(res.data.data.genderVisible);//성별 공개\r\n            if(res.data.data.selfIntroduction === null){//자기소개 설정\r\n                setPs_UserIntroduce(\"\");\r\n            }\r\n            else{\r\n                setPs_UserIntroduce(res.data.data.selfIntroduction);\r\n            }\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n                profileSettingPreset();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        });\r\n    };\r\n    useEffect(profileSettingPreset, []);\r\n\r\n    //submit함수\r\n    const profileSettingSubmitHandler = (event) => {//작성필요\r\n        event.preventDefault();\r\n        axios.post(submitProfileSettingUrl,{\r\n            nickname: ps_userName,\r\n            age: ps_userAge,\r\n            gender: ps_userGender,\r\n            ageVisible: ps_userAgeVisible,\r\n            genderVisible:ps_userGenderVisible,\r\n            imgUrl: ps_userImage,\r\n            selfIntroduction: ps_userIntroduce,\r\n        })\r\n        .then((res) => {\r\n            console.log(res);\r\n            alert(\"설정을 변경했습니다.\");\r\n            //window.location.href = \"/main\";\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제가 발생했습니다.\");\r\n            }\r\n        })\r\n    }\r\n\r\n    //이미지 변경 함수 - ps_nextUserImage를 바꾼다.\r\n    const profileImageChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        const inputImage = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(inputImage);\r\n        reader.onload = (imageData) => {\r\n            setPs_UserImage(imageData.target.result);\r\n        }\r\n    };\r\n\r\n    //값 변경 함수\r\n    const nicknameChageHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const ageChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAge(event.target.value);\r\n    };\r\n    const selfIntroductionChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserIntroduce(event.target.value);\r\n    };\r\n    \r\n    //공개여부 변경 함수\r\n    const ageVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAgeVisible((cur) => !cur);\r\n    };\r\n\r\n    const genderVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserGenderVisible((cur) => !cur);\r\n    };\r\n\r\n\r\n    return(\r\n        <form className={Style.profileSettingCover} onSubmit={profileSettingSubmitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.MyprofileExample}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='UserProfileImage'>\r\n                            {\r\n                                (ps_userImage === undefined || ps_userImage === null)\r\n                                ? \r\n                                <img src={nullImage} className={Style.myprofileImage}/>\r\n                                :\r\n                                <img src={ps_userImage} className={Style.myprofileImage}/>\r\n                            }\r\n                        </label>\r\n                        <input \r\n                            type=\"file\"\r\n                            onChange={profileImageChangeHandler}\r\n                            className={Style.myprofileImageInput}\r\n                            id=\"UserProfileImage\"\r\n                            accept=\"image/*\"\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.myprofileNickname}>{ps_userName}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.profileSettingDetail}>\r\n                    {/* 닉네임 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingUserName\"\r\n                            className={Style.profileSettingLabel}>\r\n                            사용자 이름\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingUserName\"\r\n                            type=\"text\"\r\n                            maxLength={14}\r\n                            value={ps_userName}\r\n                            onChange={nicknameChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div />\r\n                    {/* 나이 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingAge\"\r\n                            className={Style.profileSettingLabel}>\r\n                            나이\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"profileSettingAge\"\r\n                            type=\"number\"\r\n                            value={ps_userAge}\r\n                            onChange={ageChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"ageVisibleBtn\"\r\n                            onClick={ageVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 성별 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.profileSettingLabel}>\r\n                            성별\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        {\r\n                            ps_userGender === \"MALE\" ?\r\n                            <input type=\"text\" value=\"남\" className={Style.profileSettingInput} readOnly />\r\n                            :\r\n                            <input type=\"text\" value=\"여\" className={Style.profileSettingInput} readOnly />\r\n                        }\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"genderVisibleBtn\"\r\n                            onClick={genderVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 자기소개 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"profileSettingIntroduce\"\r\n                            className={Style.profileSettingLabel}>\r\n                            자기소개\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingIntroduce\"\r\n                            type=\"text\"\r\n                            maxLength={30}\r\n                            value={ps_userIntroduce}\r\n                            onChange={selfIntroductionChageHandler}\r\n                            className={Style.profileSettingInput} />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.submitButton}\r\n                    type=\"submit\">\r\n                    수정\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js",["254"],[],"import Style from './passwordSetting.module.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {\r\n    passwordCheckForPasswordChangeUrl,\r\n    passwordChangeUrl\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst PasswordSetting = ({refreshAccessToken}) => {\r\n    //useState 선언\r\n    const [previousPassword, setPreviousPassword] = useState(\"\");\r\n    const [passwordChange, setPasswordChange] = useState(\"\");\r\n    const [passwordChangeCheck, setPasswordChangeCheck] = useState(\"\");\r\n    const [passwordCondition, setPasswordCondition] = useState(false);//조건 확인\r\n\r\n    //비밀번호 변경 함수\r\n    const previousPasswordChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPreviousPassword(event.target.value);\r\n    };\r\n    const passwordChangeChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChange(event.target.value);\r\n        setPasswordChangeCheck(\"\");\r\n    };\r\n    const passwordChangeCheckChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChangeCheck(event.target.value);\r\n    };\r\n\r\n    //submit handler\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(previousPassword === passwordChange){\r\n            alert(\"바꾸려는 비밀번호가 동일합니다.\");\r\n            return;\r\n        }\r\n        if(!passwordCondition){\r\n            alert(\"새 비밀번호가 비밀번호 조건에 맞지 않습니다.\");\r\n            return;\r\n        }\r\n        if(passwordChange !== passwordChangeCheck){\r\n            alert(\"새 비밀번호와 새 비밀번호 확인이 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(passwordCheckForPasswordChangeUrl,{\r\n            password: previousPassword,\r\n        })\r\n        .then((res) => {\r\n            axios.post(passwordChangeUrl,{\r\n                password: passwordChange,\r\n            })\r\n            .then((res) => {\r\n                alert(\"비밀번호가 변경되었습니다.\");\r\n                //window.location.href = '/main';\r\n            })\r\n            .catch((res) => {\r\n                if(res.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생\");\r\n                    //window.location.href = '/main';\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                alert(\"기존 비밀번호가 틀립니다.\");\r\n            }\r\n        })\r\n    };\r\n\r\n    //비밀번호 동일한지 확인해서 style바꿔주는 함수\r\n    const passwordCheckSameCheck = () => {\r\n        if(passwordChangeCheck === \"\"){//비어있으면 빨간 선을 없앤다.\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n            return;\r\n        }\r\n        if(passwordChangeCheck !== passwordChange){\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckSameCheck, [passwordChangeCheck]);\r\n\r\n\r\n    //비밀번호 조건확인\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    };\r\n\r\n    //비밀번호 조건확인하는 함수 함수\r\n    const passwordValid = () => {\r\n        setPasswordCondition(passwordValidCheck(passwordChange));\r\n    };\r\n    useEffect(passwordValid, [passwordChange]);\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.formArea}>\r\n                    {/* 현재 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"prevPW\"\r\n                            className={Style.settingLabel}>\r\n                            이전 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"prevPW\"\r\n                            type=\"password\"\r\n                            value={previousPassword}\r\n                            onChange={previousPasswordChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChange'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChange\"\r\n                            type=\"password\"\r\n                            value={passwordChange}\r\n                            onChange={passwordChangeChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 확인 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChangeCheck'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호 확인\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChangeCheck\"\r\n                            type=\"password\"\r\n                            value={passwordChangeCheck}\r\n                            onChange={passwordChangeCheckChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                {passwordCondition ? null : <p className={Style.alertWord}>비밀번호는 8~16자리, 소문자, 특수문자를 하나이상 포함.</p>}\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button type=\"submit\" className={Style.submitButton}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PasswordSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js",["255","256","257","258","259"],[],"import Style from './blockSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentBlockedPersonUrl,\r\n    blockUserCancleUrl,\r\n    blockUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst BlockSetting = ({refreshAccessToken}) => {\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//차단된 사람들\r\n\r\n    //처음에 차단된 유저들의 리스트를 먼저 가져와야한다.\r\n    const blockSettingInitialSetting = () => {\r\n        axios.get(getCurrentBlockedPersonUrl)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n    useEffect(blockSettingInitialSetting, []);\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        axios.post(blockUserUrl, {\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 추가된 차단 리스트를 불러와서 변경하기\r\n            axios.get(getCurrentBlockedPersonUrl)\r\n            .then((res) => {\r\n                const tmp = [...res.data.data];\r\n                setAddedUserList(tmp);\r\n            })\r\n            .catch((res) => {\r\n                if(res.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생 - 리스트를 불러오지 못함\");\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생 - 차단 리스트에 추가하지 못함\");\r\n                //window.location.href = '/main';\r\n            }\r\n        })\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        axios.post(blockUserCancleUrl,{\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 삭제하기.\r\n            console.log(res);\r\n            //AddedList 리스트에서 삭제 event.target.value이용\r\n            const tmp = [...AddedUserList];\r\n            tmp.splice(Number(event.target.value), 1);\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제 발생\");\r\n                //window.location.href=\"/main\"; \r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    }\r\n\r\n    const searchHandler = (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        axios.get(searchUserUrl + userInput)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data]\r\n            setSearchedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n\r\n    return(\r\n        <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n            <div className={Style.Cover}>\r\n                <label\r\n                    className={Style.searchLabel}\r\n                    htmlFor=\"userIdInput\">\r\n                    차단할 사용자 추가\r\n                </label>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <input \r\n                    id=\"userIdInput\"\r\n                    placeholder='닉네임을 입력하세요'\r\n                    className={Style.searchInput}\r\n                    value={userInput}\r\n                    onChange={userInputChangeHandler}\r\n                />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        searchedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.userListArea}>\r\n                    {\r\n                        AddedUserList.map((person, index) => (\r\n                            <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                <div className={Style.userdetail}>\r\n                                    <div className={Style.userImageArea}>\r\n                                        <img src={person.imgUrl} className={Style.userImage} />\r\n                                    </div>\r\n                                    <div className={Style.userNicknameArea}>\r\n                                        <p className={Style.userNickname}>{person.nickname}</p>\r\n                                    </div>\r\n                                    <div className={Style.userButtonImgArea}>\r\n                                        <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default BlockSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js",["260"],[],"import { useState, useEffect } from 'react';\r\nimport Style from './noticeSetting.module.css';\r\nimport {\r\n    getCurrentNoticeSettingUrl,\r\n    submitCurrentNoticeSettingUrl,\r\n} from \"../../../../apiUrl\";\r\nimport axios from 'axios';\r\n\r\nconst NoticeSetting = ({refreshAccessToken}) => {\r\n    //설정들\r\n    const [notificationFollow, setNotificationFollow] = useState(\"\");\r\n    const [notificationComment, setNotificationComment] = useState(\"\");\r\n    const [notificationLike, setNotificationLike] = useState(\"\");\r\n    const [notificationFollowAccept, setNotificationFollowAccept] = useState(\"\");\r\n    const [notificationChat, setNotificationChat] = useState(\"\");\r\n\r\n    //처음에 설정현황을 불러오는 함수\r\n    const noticeSettingPreset = () => {\r\n        axios.get(getCurrentNoticeSettingUrl)\r\n        .then((res) => {\r\n            setNotificationFollow(res.data.data.notificationFollow);\r\n            setNotificationComment(res.data.data.notificationComment)\r\n            setNotificationLike(res.data.data.notificationLike);\r\n            setNotificationFollowAccept(res.data.data.notificationFollowAccept);\r\n            setNotificationChat(res.data.data.notificationChat);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        });\r\n    };\r\n    useEffect(noticeSettingPreset, []);\r\n\r\n    //submit function\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(submitCurrentNoticeSettingUrl,{\r\n            notificationFollow: notificationFollow,\r\n            notificationComment: notificationComment,\r\n            notificationLike: notificationLike,\r\n            notificationFollowAccept: notificationFollowAccept,\r\n            notificationChat: notificationChat,\r\n        })\r\n        .then((res) => {\r\n            alert(\"설정을 변경했습니다.\");\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러가 발생했습니다.\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n    //각 설정 클릭시 handler\r\n    const notificationFollowClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollow((cur) => !cur);\r\n    };\r\n    const notificationCommentClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationCommentAll\"){\r\n            setNotificationComment(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationCommentFollowOnly\"){\r\n            setNotificationComment(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationComment(\"NONE\");\r\n        }\r\n    };\r\n    const notificationLikeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.id === \"notificationLikeAll\"){\r\n            setNotificationLike(\"ALL\");\r\n        }\r\n        else if(event.target.id === \"notificationLikeFollowOnly\"){\r\n            setNotificationLike(\"FOLLOW_ONLY\");\r\n        }\r\n        else{\r\n            setNotificationLike(\"NONE\");\r\n        }\r\n    };\r\n    const notificationFollowAcceptClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationFollowAccept((cur) => !cur);\r\n    };\r\n    const notificationChatClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setNotificationChat((cur) => !cur);\r\n    };\r\n\r\n    //각 요소 스타일 변경 handler\r\n    const notificationFollowStyleChanger = () => {\r\n        if(notificationFollow){\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowStyleChanger, [notificationFollow]);\r\n\r\n    const notificationCommentStyleChanger = () => {\r\n        if(notificationComment === \"ALL\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationComment === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationCommentAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationCommentNone\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationCommentStyleChanger, [notificationComment]);\r\n\r\n    const notificationLikeStyleChanger = () => {\r\n        if(notificationLike === \"ALL\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else if(notificationLike === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"400\";\r\n        }\r\n        else {\r\n            document.querySelector(\"#notificationLikeAll\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeFollowOnly\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationLikeNone\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationLikeStyleChanger, [notificationLike]);\r\n\r\n    const notificationFollowAcceptStyleChanger = () => {\r\n        if(notificationFollowAccept){\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationFollowAcceptTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationFollowAcceptFalse\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(notificationFollowAcceptStyleChanger, [notificationFollowAccept]);\r\n\r\n    const notificationChatStyleChanger = () => {\r\n        if(notificationChat){\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#notificationChatTrue\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#notificationChatFalse\").style.fontWeight = \"600\";\r\n        }\r\n\r\n    };\r\n    useEffect(notificationChatStyleChanger, [notificationChat]);\r\n\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>팔로우알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowTrue\" onClick={notificationFollowClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowFalse\" onClick={notificationFollowClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 댓글 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentAll\" onClick={notificationCommentClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentFollowOnly\" onClick={notificationCommentClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationCommentNone\" onClick={notificationCommentClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>내가 쓴 글 좋아요 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeAll\" onClick={notificationLikeClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeFollowOnly\" onClick={notificationLikeClickHandler}>팔로우 된 사람만 허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationLikeNone\" onClick={notificationLikeClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>상대의 팔로우 수락</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptTrue\" onClick={notificationFollowAcceptClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationFollowAcceptFalse\" onClick={notificationFollowAcceptClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingLabelInputSplit}>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.settingLabel}>채팅 알림</p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSettingLabelArea}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatTrue\" onClick={notificationChatClickHandler}>허용</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingInput} id=\"notificationChatFalse\" onClick={notificationChatClickHandler}>거부</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button type=\"submit\" className={Style.submitBtn}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NoticeSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js",["261"],[],"//프로필을 보여주는 JS\r\nimport Style from './profile.module.css';\r\n\r\nconst Profile = ({img, name, userId, leftBookChangeHandler}) => {\r\n    const profileClickHandler = (event) => {\r\n        event.preventDefault();\r\n        //console.log(userId);\r\n        leftBookChangeHandler(\"pageList/\" + userId);\r\n    }\r\n\r\n    return (\r\n        <div className={Style.friendProfile} onClick={profileClickHandler}>\r\n            <div className={Style.Cover}>\r\n                <img src={img} className={Style.friendProfilePic}/>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <p className={Style.friendProfileName}>{name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js",["262","263","264","265","266","267","268"],[],"import Style from './filteringSetting.module.css';\r\nimport addBtn from './datafile/add.png';\r\nimport addBtnHover from './datafile/add_hover.png';\r\nimport deleteBtn from './datafile/delete.png';\r\nimport deleteBtnHover from './datafile/delete_hover.png';\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    getCurrentfilterSetting,\r\n    getCurrentNotFilteredUserUrl,\r\n    submitFilteringSetting,\r\n    addNotFilteredUserUrl,\r\n    deleteNotFilteredUserUrl,\r\n    searchUserUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst FilteringSetting = ({refreshAccessToken}) => {\r\n    const [filterAll, setFilterAll] = useState(false);\r\n    const [filterFollower, setFilterFollower] = useState(false);\r\n    const [filterFollowee, setFilterFollowee] = useState(false);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [searchedUserList, setSearchedUserList] = useState([]);//검색된 사람들\r\n    const [AddedUserList, setAddedUserList] = useState([]);//예외로 설정된 사람들\r\n\r\n    //처음에 필터링 설정정보와 예외로 설정된 유저들의 리스트를 가져와야한다.\r\n    const filterSettingInitialSetting = () => {\r\n        //필터링 설정 정보 가져오기\r\n        axios.get(getCurrentfilterSetting)\r\n        .then((res) => {\r\n            setFilterAll(res.data.data.filterAll);\r\n            setFilterFollower(res.data.data.filterFollower);\r\n            setFilterFollowee(res.data.data.filterFollowee);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n\r\n        //필터링 하지 않을 유저 정보 가져오기\r\n        axios.get(getCurrentNotFilteredUserUrl)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data];\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n            alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n    useEffect(filterSettingInitialSetting, []);\r\n\r\n    /* 상단 내용 */\r\n\r\n    //정보에 따라 스타일 변경해주는 함수\r\n    const filterAllStyleHandler = () => {\r\n        if(filterAll){\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterAllAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterAllDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterAllStyleHandler, [filterAll]);\r\n\r\n    const filterFollowerStyleHandler = () => {\r\n        if(filterFollower){\r\n            document.querySelector(\"#filterFollowerAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterFollowerDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterFollowerAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterFollowerDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterFollowerStyleHandler, [filterFollower]);\r\n\r\n    const filterFolloweeStyleHandler = () => {\r\n        if(filterFollowee){\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#filterFolloweeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#filterFolloweeDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(filterFolloweeStyleHandler, [filterFollowee]);\r\n\r\n    //input 클릭 handler\r\n    const filterAllClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterAll((cur) => !cur);\r\n    };\r\n\r\n    const filterFollowerClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterFollower((cur) => !cur);\r\n    };\r\n\r\n    const filterFolloweeClickHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterFollowee((cur) => !cur);\r\n    };\r\n\r\n    //설정 submit handler\r\n    const settingSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        axios.post(submitFilteringSetting,{\r\n            filterAll: filterAll,\r\n            filterFollower: filterFollower,\r\n            filterFollowee: filterFollowee,\r\n        })\r\n        .then((res) =>{\r\n            alert(\"설정을 변경했습니다.\");\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n            }\r\n        })\r\n    };\r\n\r\n    /* 하단 내용 */\r\n\r\n    //유저 내용 입력 Handler\r\n    const userInputChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setUserInput(event.target.value);\r\n    };\r\n\r\n    //유저 추가 버튼 클릭 처리 Handler\r\n    const addUserClickhandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단하는 api호출 event.target.id이용\r\n        axios.post(addNotFilteredUserUrl, {\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 추가된 차단 리스트를 불러와서 변경하기\r\n            axios.get(getCurrentNotFilteredUserUrl)\r\n            .then((res) => {\r\n                const tmp = [...res.data.data];\r\n                setAddedUserList(tmp);\r\n            })\r\n            .catch((res) => {\r\n                if(res.status === 401){//access token이 만료된 경우이다.\r\n                    refreshAccessToken();\r\n                }\r\n                else{\r\n                    console.log(res);\r\n                    alert(\"에러 발생 - 리스트를 불러오지 못함\");\r\n                }\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생 - 차단 리스트에 추가하지 못함\");\r\n                //window.location.href = '/main';\r\n            }\r\n        })\r\n    };\r\n\r\n    //유저 삭제 버튼 클릭 처리 Handler\r\n    const deleteUserClickHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        //차단 취소하는 api호출 event.target.id이용\r\n        axios.post(deleteNotFilteredUserUrl,{\r\n            targetUserId: event.target.id,\r\n        })\r\n        .then((res) => {//문제가 없는 상황이므로 삭제하기.\r\n            console.log(res);\r\n            //AddedList 리스트에서 삭제 event.target.value이용\r\n            const tmp = [...AddedUserList];\r\n            tmp.splice(Number(event.target.value), 1);\r\n            setAddedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"문제 발생\");\r\n                //window.location.href=\"/main\"; \r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const addUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtnHover;\r\n    };\r\n\r\n    //유저 추가 버튼 마우스 내렸을 때 이미지 스타일 복구 Handler\r\n    const addUserMouseOuthandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = addBtn;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOverHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtnHover;\r\n    };\r\n\r\n    //유저 삭제 버튼 마우스 올렸을 때 이미지 스타일 변경 Handler\r\n    const deleteUserMouseOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.target.src = deleteBtn;\r\n    }\r\n\r\n    const searchHandler = (event) => {//제출 시, 차단할 유저를 api에 넘기고, 블록된 사람들을 다시 불러온다.\r\n        event.preventDefault();\r\n\r\n        axios.get(searchUserUrl + userInput)\r\n        .then((res) => {\r\n            const tmp = [...res.data.data]\r\n            setSearchedUserList(tmp);\r\n        })\r\n        .catch((res) => {\r\n            if(res.status === 401){//access token이 만료된 경우이다.\r\n                refreshAccessToken();\r\n            }\r\n            else{\r\n                console.log(res);\r\n                alert(\"에러 발생\");\r\n                //window.location.href = \"/main\";\r\n            }\r\n        })\r\n    };\r\n\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.filterSettingArea} onSubmit={settingSubmitHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>전체 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllAllow\" onClick={filterAllClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterAllDenial\" onClick={filterAllClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>팔로워 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFollowerAllow\" onClick={filterFollowerClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFollowerDenial\" onClick={filterFollowerClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingArea} style={{borderBottom: \"1px solid rgb(216, 216, 216)\"}}>\r\n                            <div className={Style.Cover}>\r\n                                <p className={Style.settingLabel}>팔로우 필터링</p>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.inputArea}>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeAllow\" onClick={filterFolloweeClickHandler}>허용</p>\r\n                                    </div>\r\n                                    <div className={Style.Cover}>\r\n                                        <p className={Style.settingInput} id=\"filterFolloweeDenial\" onClick={filterFolloweeClickHandler}>거부</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button type=\"submit\" className={Style.submitBtn}>제출</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <form className={Style.searchAndAddArea} onSubmit={searchHandler}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.searchLabel}\r\n                            htmlFor=\"userIdInput\">\r\n                            필터링 하지 않을 사용자 추가\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"userIdInput\"\r\n                            placeholder='닉네임을 입력하세요'\r\n                            className={Style.searchInput}\r\n                            value={userInput}\r\n                            onChange={userInputChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                searchedUserList.map((person, index) => {\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"white\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={addBtn} className={Style.userButtonImg} onClick={addUserClickhandler} value={index} id={person.userId} onMouseOver={addUserMouseOverHandler} onMouseOut={addUserMouseOuthandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.userListArea}>\r\n                            {\r\n                                AddedUserList.map((person, index) => {\r\n                                    <div className={Style.userArea} key={index} style={{backgroundColor: \"#F4DEDE\"}}>\r\n                                        <div className={Style.userdetail}>\r\n                                            <div className={Style.userImageArea}>\r\n                                                <img src={person.imgUrl} className={Style.userImage} />\r\n                                            </div>\r\n                                            <div className={Style.userNicknameArea}>\r\n                                                <p className={Style.userNickname}>{person.nickname}</p>\r\n                                            </div>\r\n                                            <div className={Style.userButtonImgArea}>\r\n                                                <img src={deleteBtn} className={Style.userButtonImg} onClick={deleteUserClickHandler} value={index} id={person.userId} onMouseOver={deleteUserMouseOverHandler} onMouseOut={deleteUserMouseOutHandler}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilteringSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js",["269"],[],"import Style from './credit.module.css';\r\nimport HongikLogo from './datafile/Logo_of_hongik_university.jpg';\r\n\r\nconst Person = ({name, email, github}) => {\r\n    return(\r\n        <div className={Style.personArea}>\r\n            <p className={Style.name}>{name}</p>\r\n            <p className={Style.email}>{email}</p>\r\n            <a className={Style.github} href={github}>{github}</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Credit = () => {\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <img src={HongikLogo} className={Style.HongikLogo} />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.creditArea}>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711093 / 성의현\" email=\"luckhome1020@gmail.com\" github=\"https://github.com/SungIII\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711142 / 이종찬\" email=\"reljacer@gmail.com\" github=\"https://github.com/Lipeya\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711163 / 임채민\" email=\"chemin9898@gmail.com\" github=\"https://github.com/lacram\" />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Credit;",{"ruleId":"270","severity":1,"message":"271","line":6,"column":3,"nodeType":"272","messageId":"273","endLine":6,"endColumn":11},{"ruleId":"270","severity":1,"message":"274","line":171,"column":22,"nodeType":"272","messageId":"273","endLine":171,"endColumn":35},{"ruleId":"275","severity":1,"message":"276","line":200,"column":34,"nodeType":"277","endLine":200,"endColumn":50,"suggestions":"278"},{"ruleId":"279","severity":1,"message":"280","line":222,"column":17,"nodeType":"281","endLine":222,"endColumn":103},{"ruleId":"279","severity":1,"message":"280","line":229,"column":17,"nodeType":"281","endLine":229,"endColumn":105},{"ruleId":"279","severity":1,"message":"280","line":239,"column":17,"nodeType":"281","endLine":239,"endColumn":112},{"ruleId":"279","severity":1,"message":"280","line":249,"column":17,"nodeType":"281","endLine":249,"endColumn":104},{"ruleId":"279","severity":1,"message":"280","line":256,"column":17,"nodeType":"281","endLine":256,"endColumn":108},{"ruleId":"279","severity":1,"message":"280","line":12,"column":13,"nodeType":"281","endLine":12,"endColumn":77},{"ruleId":"279","severity":1,"message":"280","line":12,"column":13,"nodeType":"281","endLine":12,"endColumn":77},{"ruleId":"270","severity":1,"message":"282","line":5,"column":8,"nodeType":"272","messageId":"273","endLine":5,"endColumn":20},{"ruleId":"270","severity":1,"message":"283","line":15,"column":9,"nodeType":"272","messageId":"273","endLine":15,"endColumn":32},{"ruleId":"279","severity":1,"message":"280","line":19,"column":37,"nodeType":"281","endLine":19,"endColumn":72},{"ruleId":"279","severity":1,"message":"280","line":21,"column":37,"nodeType":"281","endLine":21,"endColumn":90},{"ruleId":"279","severity":1,"message":"280","line":25,"column":37,"nodeType":"281","endLine":25,"endColumn":87},{"ruleId":"279","severity":1,"message":"280","line":27,"column":37,"nodeType":"281","endLine":27,"endColumn":92},{"ruleId":"279","severity":1,"message":"280","line":43,"column":33,"nodeType":"281","endLine":43,"endColumn":68},{"ruleId":"279","severity":1,"message":"280","line":45,"column":33,"nodeType":"281","endLine":45,"endColumn":86},{"ruleId":"279","severity":1,"message":"280","line":49,"column":33,"nodeType":"281","endLine":49,"endColumn":83},{"ruleId":"279","severity":1,"message":"280","line":51,"column":33,"nodeType":"281","endLine":51,"endColumn":88},{"ruleId":"270","severity":1,"message":"284","line":64,"column":12,"nodeType":"272","messageId":"273","endLine":64,"endColumn":27},{"ruleId":"270","severity":1,"message":"285","line":65,"column":12,"nodeType":"272","messageId":"273","endLine":65,"endColumn":29},{"ruleId":"270","severity":1,"message":"286","line":66,"column":12,"nodeType":"272","messageId":"273","endLine":66,"endColumn":32},{"ruleId":"270","severity":1,"message":"287","line":67,"column":12,"nodeType":"272","messageId":"273","endLine":67,"endColumn":22},{"ruleId":"270","severity":1,"message":"288","line":68,"column":12,"nodeType":"272","messageId":"273","endLine":68,"endColumn":22},{"ruleId":"270","severity":1,"message":"289","line":69,"column":12,"nodeType":"272","messageId":"273","endLine":69,"endColumn":22},{"ruleId":"290","severity":1,"message":"291","line":94,"column":21,"nodeType":"272","messageId":"292","endLine":94,"endColumn":28},{"ruleId":"290","severity":1,"message":"291","line":99,"column":25,"nodeType":"272","messageId":"292","endLine":99,"endColumn":32},{"ruleId":"290","severity":1,"message":"291","line":104,"column":29,"nodeType":"272","messageId":"292","endLine":104,"endColumn":36},{"ruleId":"290","severity":1,"message":"291","line":109,"column":33,"nodeType":"272","messageId":"292","endLine":109,"endColumn":40},{"ruleId":"275","severity":1,"message":"293","line":127,"column":33,"nodeType":"277","endLine":127,"endColumn":35,"suggestions":"294"},{"ruleId":"275","severity":1,"message":"295","line":135,"column":30,"nodeType":"296","endLine":135,"endColumn":46},{"ruleId":"279","severity":1,"message":"280","line":159,"column":29,"nodeType":"281","endLine":159,"endColumn":64},{"ruleId":"279","severity":1,"message":"280","line":161,"column":29,"nodeType":"281","endLine":161,"endColumn":82},{"ruleId":"279","severity":1,"message":"280","line":173,"column":33,"nodeType":"281","endLine":173,"endColumn":83},{"ruleId":"279","severity":1,"message":"280","line":24,"column":21,"nodeType":"281","endLine":24,"endColumn":116},{"ruleId":"297","severity":1,"message":"298","line":50,"column":29,"nodeType":"299","messageId":"300","endLine":50,"endColumn":31},{"ruleId":"297","severity":1,"message":"298","line":59,"column":43,"nodeType":"299","messageId":"300","endLine":59,"endColumn":45},{"ruleId":"279","severity":1,"message":"280","line":164,"column":21,"nodeType":"281","endLine":164,"endColumn":100},{"ruleId":"275","severity":1,"message":"301","line":74,"column":30,"nodeType":"277","endLine":74,"endColumn":32,"suggestions":"302"},{"ruleId":"270","severity":1,"message":"303","line":31,"column":12,"nodeType":"272","messageId":"273","endLine":31,"endColumn":24},{"ruleId":"275","severity":1,"message":"276","line":99,"column":34,"nodeType":"277","endLine":99,"endColumn":36,"suggestions":"304"},{"ruleId":"270","severity":1,"message":"305","line":3,"column":10,"nodeType":"272","messageId":"273","endLine":3,"endColumn":18},{"ruleId":"270","severity":1,"message":"306","line":4,"column":8,"nodeType":"272","messageId":"273","endLine":4,"endColumn":20},{"ruleId":"270","severity":1,"message":"307","line":8,"column":5,"nodeType":"272","messageId":"273","endLine":8,"endColumn":23},{"ruleId":"270","severity":1,"message":"308","line":14,"column":9,"nodeType":"272","messageId":"273","endLine":14,"endColumn":20},{"ruleId":"270","severity":1,"message":"309","line":15,"column":12,"nodeType":"272","messageId":"273","endLine":15,"endColumn":20},{"ruleId":"270","severity":1,"message":"310","line":15,"column":22,"nodeType":"272","messageId":"273","endLine":15,"endColumn":33},{"ruleId":"279","severity":1,"message":"280","line":42,"column":17,"nodeType":"281","endLine":42,"endColumn":50},{"ruleId":"279","severity":1,"message":"280","line":46,"column":17,"nodeType":"281","endLine":46,"endColumn":50},{"ruleId":"279","severity":1,"message":"280","line":50,"column":17,"nodeType":"281","endLine":50,"endColumn":50},{"ruleId":"279","severity":1,"message":"280","line":54,"column":17,"nodeType":"281","endLine":54,"endColumn":50},{"ruleId":"279","severity":1,"message":"280","line":58,"column":17,"nodeType":"281","endLine":58,"endColumn":50},{"ruleId":"279","severity":1,"message":"280","line":62,"column":17,"nodeType":"281","endLine":62,"endColumn":50},{"ruleId":"270","severity":1,"message":"311","line":71,"column":9,"nodeType":"272","messageId":"273","endLine":71,"endColumn":20},{"ruleId":"270","severity":1,"message":"312","line":72,"column":12,"nodeType":"272","messageId":"273","endLine":72,"endColumn":24},{"ruleId":"270","severity":1,"message":"313","line":72,"column":26,"nodeType":"272","messageId":"273","endLine":72,"endColumn":41},{"ruleId":"270","severity":1,"message":"314","line":131,"column":23,"nodeType":"272","messageId":"273","endLine":131,"endColumn":35},{"ruleId":"270","severity":1,"message":"315","line":132,"column":26,"nodeType":"272","messageId":"273","endLine":132,"endColumn":41},{"ruleId":"275","severity":1,"message":"316","line":157,"column":35,"nodeType":"277","endLine":157,"endColumn":37,"suggestions":"317"},{"ruleId":"279","severity":1,"message":"280","line":180,"column":21,"nodeType":"281","endLine":180,"endColumn":73},{"ruleId":"279","severity":1,"message":"280","line":184,"column":25,"nodeType":"281","endLine":184,"endColumn":80},{"ruleId":"279","severity":1,"message":"280","line":186,"column":25,"nodeType":"281","endLine":186,"endColumn":51},{"ruleId":"279","severity":1,"message":"280","line":190,"column":25,"nodeType":"281","endLine":190,"endColumn":48},{"ruleId":"279","severity":1,"message":"280","line":192,"column":25,"nodeType":"281","endLine":192,"endColumn":48},{"ruleId":"275","severity":1,"message":"318","line":20,"column":29,"nodeType":"277","endLine":20,"endColumn":31,"suggestions":"319"},{"ruleId":"279","severity":1,"message":"280","line":74,"column":21,"nodeType":"281","endLine":74,"endColumn":106},{"ruleId":"279","severity":1,"message":"280","line":83,"column":21,"nodeType":"281","endLine":83,"endColumn":113},{"ruleId":"279","severity":1,"message":"280","line":89,"column":21,"nodeType":"281","endLine":89,"endColumn":106},{"ruleId":"279","severity":1,"message":"280","line":98,"column":21,"nodeType":"281","endLine":98,"endColumn":113},{"ruleId":"275","severity":1,"message":"320","line":146,"column":32,"nodeType":"321","endLine":146,"endColumn":36},{"ruleId":"275","severity":1,"message":"322","line":154,"column":23,"nodeType":"296","endLine":154,"endColumn":39},{"ruleId":"275","severity":1,"message":"323","line":177,"column":29,"nodeType":"277","endLine":177,"endColumn":37,"suggestions":"324"},{"ruleId":"275","severity":1,"message":"325","line":85,"column":34,"nodeType":"277","endLine":85,"endColumn":49,"suggestions":"326"},{"ruleId":"279","severity":1,"message":"280","line":134,"column":33,"nodeType":"281","endLine":134,"endColumn":96},{"ruleId":"279","severity":1,"message":"280","line":142,"column":33,"nodeType":"281","endLine":142,"endColumn":96},{"ruleId":"275","severity":1,"message":"327","line":76,"column":37,"nodeType":"277","endLine":76,"endColumn":39,"suggestions":"328"},{"ruleId":"279","severity":1,"message":"280","line":152,"column":33,"nodeType":"281","endLine":152,"endColumn":88},{"ruleId":"279","severity":1,"message":"280","line":154,"column":33,"nodeType":"281","endLine":154,"endColumn":91},{"ruleId":"275","severity":1,"message":"329","line":92,"column":39,"nodeType":"277","endLine":92,"endColumn":60,"suggestions":"330"},{"ruleId":"275","severity":1,"message":"276","line":37,"column":43,"nodeType":"277","endLine":37,"endColumn":45,"suggestions":"331"},{"ruleId":"279","severity":1,"message":"280","line":179,"column":41,"nodeType":"281","endLine":179,"endColumn":96},{"ruleId":"279","severity":1,"message":"280","line":185,"column":41,"nodeType":"281","endLine":185,"endColumn":229},{"ruleId":"279","severity":1,"message":"280","line":200,"column":41,"nodeType":"281","endLine":200,"endColumn":96},{"ruleId":"279","severity":1,"message":"280","line":206,"column":41,"nodeType":"281","endLine":206,"endColumn":241},{"ruleId":"275","severity":1,"message":"276","line":38,"column":36,"nodeType":"277","endLine":38,"endColumn":38,"suggestions":"332"},{"ruleId":"279","severity":1,"message":"280","line":14,"column":17,"nodeType":"281","endLine":14,"endColumn":68},{"ruleId":"275","severity":1,"message":"276","line":60,"column":44,"nodeType":"277","endLine":60,"endColumn":46,"suggestions":"333"},{"ruleId":"297","severity":1,"message":"298","line":336,"column":70,"nodeType":"299","messageId":"300","endLine":336,"endColumn":72},{"ruleId":"279","severity":1,"message":"280","line":340,"column":49,"nodeType":"281","endLine":340,"endColumn":104},{"ruleId":"279","severity":1,"message":"280","line":346,"column":49,"nodeType":"281","endLine":346,"endColumn":237},{"ruleId":"297","severity":1,"message":"298","line":357,"column":67,"nodeType":"299","messageId":"300","endLine":357,"endColumn":69},{"ruleId":"279","severity":1,"message":"280","line":361,"column":49,"nodeType":"281","endLine":361,"endColumn":104},{"ruleId":"279","severity":1,"message":"280","line":367,"column":49,"nodeType":"281","endLine":367,"endColumn":249},{"ruleId":"279","severity":1,"message":"280","line":18,"column":17,"nodeType":"281","endLine":18,"endColumn":70},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'setChatNumber' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshAccessToken'. Either include it or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["334"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'heartImgFill' is defined but never used.","'CommentofCommentstartId' is assigned a value but never used.","'postedImageList' is assigned a value but never used.","'postedPersonImage' is assigned a value but never used.","'postedPersonNickname' is assigned a value but never used.","'postedWord' is assigned a value but never used.","'likeNumber' is assigned a value but never used.","'postedTime' is assigned a value but never used.","no-const-assign","'timeCal' is constant.","const","React Hook useEffect has missing dependencies: 'pageId' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["335"],"Assignments to the 'CommentstartId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'newPostCommentNotice', 'newPostLikeNotice', 'newPostReadCommentAuth', 'newPostReadLikeAuth', 'newPostReadPostAuth', and 'newPostWriteCommentAuth'. Either include them or remove the dependency array.",["336"],"'followerList' is assigned a value but never used.",["337"],"'useState' is defined but never used.","'followAftImg' is defined but never used.","'getUserPageListUrl' is defined but never used.","'userStartId' is assigned a value but never used.","'userList' is assigned a value but never used.","'setUserList' is assigned a value but never used.","'pageStartId' is assigned a value but never used.","'userPageList' is assigned a value but never used.","'setUserPageList' is assigned a value but never used.","'setUserImage' is assigned a value but never used.","'setUserNickname' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'leftBookState' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["338"],"React Hook useEffect has missing dependencies: 'checked' and 'notificationId'. Either include them or remove the dependency array.",["339"],"Assignments to the 'noMoreNotice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'startId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'NoticeRead' and 'noMoreNotice'. Either include them or remove the dependency array.",["340"],"React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.",["341"],"React Hook useEffect has missing dependencies: 'profileSettingPreset' and 'refreshAccessToken'. Either include them or remove the dependency array. If 'refreshAccessToken' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["342"],"React Hook useEffect has a missing dependency: 'passwordChange'. Either include it or remove the dependency array.",["343"],["344"],["345"],["346"],{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"353","fix":"367"},{"desc":"353","fix":"368"},{"desc":"353","fix":"369"},"Update the dependencies array to be: [refreshAccessToken, rightBookState]",{"range":"370","text":"371"},"Update the dependencies array to be: [pageId, refreshAccessToken]",{"range":"372","text":"373"},"Update the dependencies array to be: [newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",{"range":"374","text":"375"},"Update the dependencies array to be: [refreshAccessToken]",{"range":"376","text":"377"},"Update the dependencies array to be: [leftBookState, refreshAccessToken]",{"range":"378","text":"379"},"Update the dependencies array to be: [checked, notificationId]",{"range":"380","text":"381"},"Update the dependencies array to be: [NoticeRead, inView, noMoreNotice]",{"range":"382","text":"383"},"Update the dependencies array to be: [password, passwordCheck]",{"range":"384","text":"385"},"Update the dependencies array to be: [profileSettingPreset, refreshAccessToken]",{"range":"386","text":"387"},"Update the dependencies array to be: [passwordChange, passwordChangeCheck]",{"range":"388","text":"389"},{"range":"390","text":"377"},{"range":"391","text":"377"},{"range":"392","text":"377"},[6385,6401],"[refreshAccessToken, rightBookState]",[6111,6113],"[pageId, refreshAccessToken]",[3632,3634],"[newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",[3253,3255],"[refreshAccessToken]",[4922,4924],"[leftBookState, refreshAccessToken]",[719,721],"[checked, notificationId]",[6842,6850],"[NoticeRead, inView, noMoreNotice]",[2848,2863],"[password, passwordCheck]",[3092,3094],"[profileSettingPreset, refreshAccessToken]",[3162,3183],"[passwordChange, passwordChangeCheck]",[1271,1273],[1516,1518],[2133,2135]]