[{"C:\\Users\\성의현\\Desktop\\grad\\src\\index.js":"1","C:\\Users\\성의현\\Desktop\\grad\\src\\App.js":"2","C:\\Users\\성의현\\Desktop\\grad\\src\\apiUrl.js":"3","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js":"4","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js":"5","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js":"6","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js":"7","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\mainInnerStuff.js":"8","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\mainLogo.js":"9","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\loginLogo.js":"10","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js":"11","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js":"12","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js":"13","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js":"14","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js":"15","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js":"16","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js":"17","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js":"18","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js":"19","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js":"20","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js":"21","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js":"22","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js":"23","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js":"24","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js":"25","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js":"26","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js":"27","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js":"28","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js":"29","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js":"30"},{"size":197,"mtime":1662350852278,"results":"31","hashOfConfig":"32"},{"size":3092,"mtime":1662810117141,"results":"33","hashOfConfig":"32"},{"size":2091,"mtime":1663484957429,"results":"34","hashOfConfig":"32"},{"size":9653,"mtime":1663167033278,"results":"35","hashOfConfig":"32"},{"size":970,"mtime":1662821982232,"results":"36","hashOfConfig":"32"},{"size":462,"mtime":1662553106338,"results":"37","hashOfConfig":"32"},{"size":298,"mtime":1662553106337,"results":"38","hashOfConfig":"32"},{"size":1108,"mtime":1662350852299,"results":"39","hashOfConfig":"32"},{"size":527,"mtime":1662803155794,"results":"40","hashOfConfig":"32"},{"size":524,"mtime":1662803158670,"results":"41","hashOfConfig":"32"},{"size":1595,"mtime":1662789236113,"results":"42","hashOfConfig":"32"},{"size":109,"mtime":1662350852284,"results":"43","hashOfConfig":"32"},{"size":97,"mtime":1662350852281,"results":"44","hashOfConfig":"32"},{"size":1189,"mtime":1662350852290,"results":"45","hashOfConfig":"32"},{"size":1642,"mtime":1662350852288,"results":"46","hashOfConfig":"32"},{"size":98,"mtime":1662350852287,"results":"47","hashOfConfig":"32"},{"size":17334,"mtime":1663249865216,"results":"48","hashOfConfig":"32"},{"size":915,"mtime":1663240479171,"results":"49","hashOfConfig":"32"},{"size":8057,"mtime":1663245667412,"results":"50","hashOfConfig":"32"},{"size":2602,"mtime":1663240479172,"results":"51","hashOfConfig":"32"},{"size":5698,"mtime":1662878365688,"results":"52","hashOfConfig":"32"},{"size":14199,"mtime":1662818387887,"results":"53","hashOfConfig":"32"},{"size":2604,"mtime":1662816499174,"results":"54","hashOfConfig":"32"},{"size":484,"mtime":1662553106338,"results":"55","hashOfConfig":"32"},{"size":6431,"mtime":1663396662407,"results":"56","hashOfConfig":"32"},{"size":13254,"mtime":1663411453269,"results":"57","hashOfConfig":"32"},{"size":122,"mtime":1662350852284,"results":"58","hashOfConfig":"32"},{"size":2212,"mtime":1663485053215,"results":"59","hashOfConfig":"32"},{"size":10770,"mtime":1663245504787,"results":"60","hashOfConfig":"32"},{"size":1468,"mtime":1663401878922,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"18q8ntq",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"65"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"65"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"65"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"65"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"65"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"65"},"C:\\Users\\성의현\\Desktop\\grad\\src\\index.js",[],[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\App.js",["165"],[],"import axios from 'axios';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport Home from \"./routes/Home/root/HomeMain\";\r\nimport Login from \"./routes/Login/root/LoginMain\";\r\nimport { logoutApiUrl, KakaoTokenUrl, NaverTokenUrl } from './apiUrl';\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction App() {\r\n\r\n  //로그인시 refresh token을 local Storage에 저장하는 기능 앞에 Bearer 가 붙어있다.\r\n  const loginFunc = (res) => {\r\n    console.log(res);\r\n    //alert(\"Welcome\");\r\n    localStorage.setItem(\"rft\", res.headers.authorization);\r\n    window.location.href=\"/main\";\r\n  };\r\n\r\n  //로그아웃 함수\r\n  const logoutFunc = () => {\r\n    axios.get(logoutApiUrl)\r\n    .then((res) => {\r\n      console.log(res);\r\n      alert(\"logout success\");\r\n      localStorage.removeItem(\"rft\");//refresh token 지우기\r\n      window.location.href=\"/\";\r\n    })\r\n    .catch((res)=>{\r\n      console.log(\"error\")\r\n      console.log(res);\r\n    });\r\n  };\r\n\r\n  //카카오 로그인 시 토큰을 프론트로 받게 되는 경우 처리하는 함수\r\n  const socialLogin = () => {\r\n    if(localStorage.getItem(\"rft\") === \"kakao\"){//소셜 처리중인 경우\r\n      const params = new URL(window.location.href).searchParams;\r\n      const code = params.get(\"code\");\r\n      console.log(code);\r\n      axios.post(KakaoTokenUrl + code)\r\n      .then((res) => {//문제가 없는 경우이므로, 로그인 해준다.\r\n        console.log(res);\r\n        loginFunc(res);\r\n      })\r\n      .catch((res) => {\r\n        console.log(res);\r\n        alert(\"소셜 로그인에 문제가 발생했습니다.\");\r\n        localStorage.removeItem(\"rft\");//소셜 상태를 종료한다.\r\n        window.location.href = \"/\";//다시 원래의 로그인 url로 이동한다.\r\n      });\r\n    }\r\n    else if(localStorage.getItem(\"rft\") === \"naver\"){//소셜 처리중인 경우\r\n      const params = new URL(window.location.href).searchParams;\r\n      const code = params.get(\"code\");\r\n      console.log(code);\r\n      axios.post(NaverTokenUrl + code)\r\n      .then((res) => {//문제가 없는 경우이므로, 로그인 해준다.\r\n        console.log(res);\r\n        loginFunc(res);\r\n      })\r\n      .catch((res) => {\r\n        console.log(res);\r\n        alert(\"소셜 로그인에 문제가 발생했습니다.\");\r\n        localStorage.removeItem(\"rft\");//소셜 상태를 종료한다.\r\n        window.location.href = \"/\";//다시 원래의 로그인 url로 이동한다.\r\n      });\r\n    }\r\n  };\r\n  useEffect(socialLogin, []);\r\n\r\n  return (\r\n    <Router>\r\n      {/*localStorage.getItem(\"rft\") === null ? <Redirect to='/' /> : null*/}\r\n      {/*localStorage.getItem(\"rft\") !== \"social\" && localStorage.getItem(\"rft\") !== null ?\r\n        <Redirect to=\"/main\" /> : null \r\n      */}\r\n      <Switch>\r\n        <Route path=\"/main\">\r\n          <Home logout={logoutFunc} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Login login={loginFunc} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\성의현\\Desktop\\grad\\src\\apiUrl.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\HomeMain.js",["166","167","168","169","170","171","172"],[],"import { useState, useEffect } from 'react';\r\nimport Style from \"./HomeMain.module.css\";\r\nimport Logo from \"../../../logo/mainLogo\";\r\nimport SearchBar from \"./searchBar\";\r\nimport NumberNotice from \"./numberNotice\";\r\n\r\nimport LeftPage from \"../leftInner/page/page\";\r\nimport LeftPageList from \"../leftInner/pageList/pageList\";\r\nimport LeftChat from \"../leftInner/chat/chat\";\r\nimport LeftNewPost from \"../leftInner/newPost/newPost\";\r\nimport LeftSetting from \"../leftInner/setting/settingMain\";\r\n\r\nimport RightNewPost from \"../rightInner/newPost/newPost\";\r\nimport RightChat from \"../rightInner/chat/chat\";\r\nimport RightNotice from \"../rightInner/notice/notice\";\r\nimport RightFriend from \"../rightInner/friend/friend\";\r\nimport RightSetting from \"../rightInner/setting/setting\";\r\n\r\nimport addTagImg from \"./tagImages/add.png\";\r\nimport messageTagImg from \"./tagImages/message.png\";\r\nimport notificationTagImg from \"./tagImages/notification.png\";\r\nimport settingTagImg from \"./tagImages/settings.png\";\r\nimport userTagImg from \"./tagImages/user.png\";\r\n\r\nimport {\r\n  newPostUrl\r\n} from \"../../../apiUrl\";\r\nimport axios from 'axios';\r\n\r\nconst Home = ({ logout }) => {\r\n  //오른쪽 책의 내용을 바꿔주는 state => newPost // chat // notice // friend // setting\r\n  const [rightBookState, setRightBookState] = useState(\"friend\");\r\n  //왼쪽 책의 내용을 바꿔주는 state => page(글) // pageList //chat // newPost // setting\r\n  const [leftBookState, setLeftBookState] = useState(\"page\");\r\n  //setting의 내용을 바꿔주는 state => initial(클릭 없음) // profile // Snotice // password // filtering // block\r\n  const [settingState, setSettingState] = useState(\"initial\");\r\n\r\n  /* 새 글을 올리는 기능을 위한 부분 */\r\n  /* 좌, 우로 나뉘어져있는 정보를 추합해서 서버에 보내야 하기 때문에 상위 요소에서 작성 */\r\n  //아래는 좌측 페이지로 이동할 정보\r\n  //이미지 리스트\r\n  const [newPostImages, setNewPostImages] = useState([]);\r\n  //해시태그 리스트\r\n  const [newPostHashtag, setNewPostHashtag] = useState([]);\r\n  //글\r\n  const [newPostContent, setNewPostContent] = useState(\"\");\r\n\r\n  //아래는 우측 페이지로 이동할 정보\r\n  //좋아요 알림\r\n  const [newPostLikeNotice, setNewPostLikeNotice] = useState(true);\r\n  //댓글 알림\r\n  const [newPostCommentNotice, setNewPostCommentNotice] = useState(true);\r\n  //읽기 권한\r\n  const [newPostReadPostAuth, setNewPostReadPostAuth] = useState(\"ALL\");\r\n  //댓글 읽기 권한\r\n  const [newPostReadCommentAuth, setNewPostReadCommentAuth] = useState(true);\r\n  //댓글 쓰기 권한\r\n  const [newPostWriteCommentAuth, setNewPostWriteCommentAuth] = useState(true);\r\n  //좋아요 읽기 권한\r\n  const [newPostReadLikeAuth, setNewPostReadLikeAuth] = useState(true);\r\n\r\n  //글 올리는 함수 => 좌측 페이지로 넘어가야한다.\r\n  const uploadNewPostHandler = (event) => {\r\n    event.preventDefault();\r\n    if(newPostImages.length === 0){\r\n      alert(\"이미지를 하나 이상 업로드 해주세요.\");\r\n      return;\r\n    }\r\n    if(newPostContent.length === 0){\r\n      alert(\"글을 입력해 주세요/.\");\r\n      return;\r\n    }\r\n\r\n    axios.post(newPostUrl, {\r\n      content: newPostContent,\r\n      pageSetting : {\r\n        notificationLike: newPostLikeNotice,\r\n        notificationComment: newPostCommentNotice,\r\n        readAuth: newPostReadPostAuth,\r\n        commentReadAuth: newPostReadCommentAuth,\r\n        commentWriteAuth: newPostWriteCommentAuth,\r\n        likeReadAuth: newPostReadLikeAuth,\r\n      },\r\n      imgUrlList: newPostImages,\r\n      pageHashtagList: newPostHashtag,\r\n    })\r\n    .then((res) => {\r\n      alert(\"업로드 되었습니다.\");\r\n      //window.location.href = \"/main\";\r\n    })\r\n    .catch((res) => {\r\n      console.log(\"잘못된 양식입니다.\");\r\n      console.log(res);\r\n      alert(\"문제 발생\");\r\n      //window.location.href = \"/main\";\r\n    })\r\n  };\r\n\r\n\r\n  //첫 render시 친구 tag를 칠해준다.\r\n  const firstRender = () => {\r\n    document.querySelector(\"#friend\").style.backgroundColor = \"rgb(145, 145, 145)\";\r\n  };\r\n  useEffect(firstRender, []);\r\n\r\n  //우측 태그 클릭 hander\r\n  const tagClickHandler = (event) =>{\r\n    event.preventDefault();\r\n    const targetID = event.target.id;//누른 위치\r\n    if(targetID === rightBookState) return; //같은 태그를 여러번 누르는 경우 아무 변화도 주지 않는다.\r\n    \r\n    //태그 색상 변경\r\n    document.querySelector(`#${targetID}`).style.backgroundColor = \"rgb(145, 145, 145)\";//누른 버튼 어둡게 변경\r\n    document.querySelector(`#${rightBookState}`).style.backgroundColor = \"rgb(190, 190, 190)\";//원래 눌려있던 버튼 밝게 변경\r\n\r\n    if(targetID === \"setting\" || targetID === 'newPost'){\r\n      setRightBookState(targetID);\r\n      setLeftBookState(targetID);\r\n    }\r\n    else{\r\n      if(leftBookState === 'setting' || leftBookState === 'newPost') setLeftBookState(\"page\");\r\n      setRightBookState(targetID);\r\n    }\r\n\r\n    if(settingState !== 'initial'){//다른 태그 클릭 시 설정을 다시 원래대로 돌린다.\r\n      setSettingState('initial');\r\n    }\r\n  };\r\n\r\n  //우측 내용 클릭시 좌측 내용 변화 함수\r\n  //채팅, 알림, 친구의 경우 이 함수를 사용해야 좌측이 달라진다.\r\n  const leftChange = (val) => {\r\n    setLeftBookState(val);\r\n  };\r\n\r\n  //setting 변경 함수\r\n  const SettingChangeHandler = (val) => {\r\n    setSettingState(val);\r\n  }\r\n\r\n  return(\r\n    <div className={Style.pageCover}>\r\n      {/* 좌 상단 - 로고와 검색창 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.leftHeader}>\r\n          <Logo />\r\n          <div />\r\n          <SearchBar />\r\n        </div>\r\n      </div>\r\n      {/* 우 상단 - 태그 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.tagArea}>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"newPost\">\r\n              <div className={Style.Cover}>\r\n                <img src={addTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"newPost\"/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"chat\">\r\n              <div className={Style.Cover}>\r\n                <img src={messageTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"chat\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"notice\">\r\n              <div className={Style.Cover}>\r\n                <img src={notificationTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"notice\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"friend\">\r\n              <div className={Style.Cover}>\r\n                <img src={userTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"friend\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={Style.Cover}>\r\n            <div className={Style.tag} id=\"setting\">\r\n              <div className={Style.Cover}>\r\n                <img src={settingTagImg} className={Style.tagImg} onClick={tagClickHandler} id=\"setting\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 좌측 페이지 */}\r\n      <div className={Style.Cover}>\r\n        <div className={Style.bookCover}>\r\n          <div className={Style.leftbook}>\r\n            <div className={Style.Cover}>\r\n                {leftBookState === \"page\" ? <LeftPage /> : null}\r\n                {leftBookState === \"pageList\" ? <LeftPageList /> : null}\r\n                {leftBookState === \"chat\" ? <LeftChat /> : null}\r\n                {leftBookState === \"newPost\" ? <LeftNewPost newPostImages={newPostImages} setNewPostImages={setNewPostImages} newPostHashtag={newPostHashtag} setNewPostHashtag={setNewPostHashtag} newPostContent={newPostContent} setNewPostContent={setNewPostContent} uploadNewPostHandler={uploadNewPostHandler} /> : null}\r\n                {leftBookState === \"setting\" ? <LeftSetting settingState={settingState} /> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 우측 페이지 */}\r\n      <div className={Style.Cover}>\r\n      <div className={Style.bookCover}>\r\n          <div className={Style.rightbook}>\r\n            <div className={Style.Cover}>\r\n              { rightBookState === \"newPost\" ? <RightNewPost newPostLikeNotice={newPostLikeNotice} setNewPostLikeNotice={setNewPostLikeNotice} newPostCommentNotice={newPostCommentNotice} setNewPostCommentNotice={setNewPostCommentNotice} newPostReadPostAuth={newPostReadPostAuth} setNewPostReadPostAuth={setNewPostReadPostAuth} newPostReadCommentAuth={newPostReadCommentAuth} setNewPostReadCommentAuth={setNewPostReadCommentAuth} newPostWriteCommentAuth={newPostWriteCommentAuth} setNewPostWriteCommentAuth={setNewPostWriteCommentAuth} newPostReadLikeAuth={newPostReadLikeAuth} setNewPostReadLikeAuth={setNewPostReadLikeAuth} /> :  null}\r\n              { rightBookState === \"chat\" ? <RightChat /> : null}\r\n              { rightBookState === \"notice\" ? <RightNotice /> : null}\r\n              { rightBookState === \"friend\" ? <RightFriend /> : null}\r\n              { rightBookState === \"setting\" ? <RightSetting settingState={settingState} SettingChangeHandler={SettingChangeHandler} logout={logout} /> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default Home;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\LoginMain.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\searchBar.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\numberNotice.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\root\\mainInnerStuff.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\mainLogo.js",["173"],[],"import Style from \"./mainLogo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = () =>{\r\n    const clickHandler = (event) => {\r\n        event.preventDefault();\r\n        window.location.href= '/main';\r\n    }\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img className={Style.logo} src={logo} onClick={clickHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","C:\\Users\\성의현\\Desktop\\grad\\src\\logo\\loginLogo.js",["174"],[],"import Style from \"./loginLogo.module.css\";\r\nimport logo from \"./logo.png\";\r\n\r\n//나중에 a안에 이미지로 변경하기. 그 이미지 스타일도 만들어야함 반응형으로 만들면 좋을듯\r\nconst Logo = () =>{\r\n    const clickHandler = (event) => {\r\n        event.preventDefault();\r\n        window.location.href= '/';\r\n    }\r\n    return(\r\n        <div className={Style.logoCover}>\r\n            <img src={logo} className={Style.logo} onClick={clickHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\page\\page.js",["175","176","177"],[],"import { useState, useEffect } from 'react';\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport axios from 'axios';\r\nimport Style from './page.module.css';\r\nimport {\r\n    pageloadUrl,\r\n} from \"../../../../apiUrl\";\r\n\r\nconst pageList = [1,2,3,4,5];\r\nconst currentStartId = 987654321;\r\n\r\nconst Pages = ({ obj, lastRef }) => {\r\n    return(\r\n        <div className={Style.singlePageCover}>\r\n            {\r\n                obj.map((data, index) => (\r\n                    index === (obj.length - 1) ? \r\n                    <p key={index} ref={lastRef}>last obj</p>\r\n                    :\r\n                    <p key={index}>{data}</p>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst LeftPage = () => {\r\n    const [ref, inView] = useInView();//ref를 {ref}로 설정한요소가 화면에 보이는 상황이면 true가 나오고, 아닌 경우 false이다.\r\n\r\n    const pageLoadFunc = () => {\r\n        if(inView){\r\n            axios.get(pageloadUrl + \"?startId=\" + currentStartId)\r\n            .then((res) => {\r\n                console.log(\"데이터 추가\");\r\n                pageList = [...res.data];//추가 데이터 저장\r\n                currentStartId = res.startId;\r\n            })\r\n            .catch((res) => {\r\n                console.log(\"더이상 글이 없습니다.\");\r\n                console.log(res);\r\n            })\r\n        }\r\n    };\r\n    useEffect(pageLoadFunc, [inView]);\r\n    return(\r\n        <div className={Style.pageCover}>\r\n            <Pages obj={pageList} lastRef={ref}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPage;\r\n\r\n","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\pageList\\pageList.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\chat\\chat.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\notice\\notice.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\friend\\friend.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\chat\\chat.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\newPost\\newPost.js",["178"],[],"import Style from './newPost.module.css';\r\nimport {useEffect} from 'react';\r\n\r\nconst RightNewPost = ({newPostLikeNotice, setNewPostLikeNotice, newPostCommentNotice, setNewPostCommentNotice, newPostReadPostAuth, setNewPostReadPostAuth, newPostReadCommentAuth, setNewPostReadCommentAuth, newPostWriteCommentAuth, setNewPostWriteCommentAuth, newPostReadLikeAuth, setNewPostReadLikeAuth}) => {\r\n    //초기에 모든 허용을 진하게 만드는 함수\r\n    const firstColoring = () => {\r\n        //좋아요 알림부분 반영\r\n        if(newPostLikeNotice){\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 알림 부분 반영\r\n        if(newPostCommentNotice){\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //읽기 권한 반영\r\n        if(newPostReadPostAuth === \"ALL\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else if(newPostReadPostAuth === \"FOLLOW_ONLY\"){\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 읽기 반영\r\n        if(newPostReadCommentAuth){\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n\r\n        //댓글 쓰기 반영\r\n        if(newPostWriteCommentAuth){\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n        \r\n        //좋아요 읽기 반영\r\n        if(newPostReadLikeAuth){\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";\r\n            document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";\r\n        }\r\n    };\r\n    useEffect(firstColoring, []);\r\n\r\n    //누른 설정을 반영하는 함수\r\n    //좋아요 알림\r\n    const likeNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostLikeNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"likeNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostLikeNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"likeNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#likeNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#likeNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostLikeNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 알림\r\n    const commentNoticeClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostCommentNotice){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"commentNoticeDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostCommentNotice(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"commentNoticeAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#commentNoticeAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#commentNoticeDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostCommentNotice(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //읽기 권한 - 얘만 3개다.\r\n    const readPostAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(clicked === \"readPostAuthAllow\"){//허용이 눌린 경우\r\n            if(newPostReadPostAuth !== \"ALL\"){//근데 이미 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"ALL\");//허용으로 변경\r\n            }\r\n        }\r\n        else if(clicked === \"readPostAuthHalfAllow\"){//팔로우만 허용인 경우\r\n            if(newPostReadPostAuth !== \"FOLLOW_ONLY\"){//근데 이미 팔로우만 허용으로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"FOLLOW_ONLY\");//팔로우만 허용으로 변경\r\n            }\r\n        }\r\n        else{//거부인 경우\r\n            if(newPostReadPostAuth !== \"NONE\"){//근데 이미 거부로 되어있지 않은 경우\r\n                document.querySelector(\"#readPostAuthAllow\").style.fontWeight = \"400\";//허용을 누른다.\r\n                document.querySelector(\"#readPostAuthHalfAllow\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                document.querySelector(\"#readPostAuthDenial\").style.fontWeight = \"600\";//거부를 없앤다.\r\n                setNewPostReadPostAuth(\"NONE\");//거부로 변경\r\n            }\r\n        }\r\n    };\r\n    //댓글 읽기 권한\r\n    const readCommentAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //댓글 쓰기 권한\r\n    const writeCommentAuthHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostWriteCommentAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostWriteCommentAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"writeCommentAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#writeCommentAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#writeCommentAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostWriteCommentAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n    //좋아요 읽기 권한\r\n    const readLikeAuthClickHandler = (event) => {\r\n        const clicked = event.target.id;\r\n        if(newPostReadLikeAuth){//지금 허용이 눌려있는 상황\r\n            if(clicked === \"readLikeAuthDenial\"){//근데 거부를 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"400\";//허용을 없앤다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"600\";//거부를 누른다.\r\n                setNewPostReadLikeAuth(false);//거부로 변경\r\n            }\r\n        }\r\n        else{//거부가 눌려있는 상황\r\n            if(clicked === \"readLikeAuthAllow\"){//근데 허용을 누른 경우\r\n                document.querySelector(\"#readLikeAuthAllow\").style.fontWeight = \"600\";//허용을 누른다.\r\n                document.querySelector(\"#readLikeAuthDenial\").style.fontWeight = \"400\";//거부를 없앤다.\r\n                setNewPostReadLikeAuth(true);//허용으로 설정\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className={Style.WholeCover}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeAllow\" onClick={likeNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"likeNoticeDenial\" onClick={likeNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 알림</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeAllow\" onClick={commentNoticeClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"commentNoticeDenial\" onClick={commentNoticeClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.threeSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthAllow\" onClick={readPostAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthHalfAllow\" onClick={readPostAuthClickHandler}>팔로우 된 사람만 허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readPostAuthDenial\" onClick={readPostAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthAllow\" onClick={readCommentAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readCommentAuthDenial\" onClick={readCommentAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover} style={{borderBottom:\"1px solid rgb(216, 216, 216)\"}}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>댓글 쓰기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthAllow\" onClick={writeCommentAuthHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"writeCommentAuthDenial\" onClick={writeCommentAuthHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.settingCover}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.settingName}>좋아요 읽기 권한</div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.twoSetting}>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthAllow\" onClick={readLikeAuthClickHandler}>허용</div>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <div className={Style.settingTag} id=\"readLikeAuthDenial\" onClick={readLikeAuthClickHandler}>거부</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNewPost;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\settingMain.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\newPost\\newPost.js",["179","180","181","182"],[],"import Style from './newPost.module.css';\r\nimport { useState } from 'react';\r\nimport addImage from '../../root/tagImages/add.png';\r\n\r\nconst HashtagList = ({deleteTag, newPostHashtag}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostHashtag.map((data, index) =>(\r\n                    <button className={Style.singleHashTag} onClick={deleteTag} key={index} value={index}>\r\n                        #{data} \r\n                    </button>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ImageList = ({deleteImage, newPostImages}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                newPostImages.map((data, index) =>(\r\n                    <img className={Style.singlepicture} src={data} key={index} id={index} onClick={deleteImage} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeftNewPost = ({ newPostImages, setNewPostImages, newPostHashtag, setNewPostHashtag, newPostContent, setNewPostContent, uploadNewPostHandler }) => {\r\n    const [hashtag, setHashtag] = useState(\"\");//임시로 입력되는 값 변경하는 State.\r\n\r\n    //글 내용 변경 함수\r\n    const contentHandler = (event) => {\r\n        event.preventDefault();\r\n        setNewPostContent(event.target.value);\r\n    }\r\n\r\n    //받은 파일리스트가 유효한지 검사하는 함수\r\n    const ImageValid = (data) => {\r\n        let answer = true;\r\n        //먼저 받은 데이터가 1개인지 확인\r\n        if(data.length !== 1){\r\n            alert(\"한 번에 하나의 이미지를 드랍해주십시오.\");\r\n            return false;\r\n        }\r\n\r\n        //받은 input들에 대해서 이미지 여부, 용량 여부(5메가 이하),\r\n        data.map((d, index) => {\r\n            if(!(d.type === 'image/png' || d.type === 'image/jpg' || d.type === 'image/jpeg')){\r\n                alert(`이미지 파일만 업로드 가능합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            if(d.size > 1024 * 1024 * 50){\r\n                alert(`50MB 이상의 이미지는 업로드 불가합니다.\\n${d.name}`);\r\n                answer = false;\r\n            }\r\n            newPostImages.map((cd, index) => {\r\n                if(cd.name === d.name){\r\n                    alert(`같은 이름의 파일이 이미 업로드 되어있습니다.\\n${d.name}`);\r\n                    answer = false;\r\n                }\r\n            });\r\n        });\r\n        return answer;\r\n    };\r\n\r\n    //이미지 영역에 파일을 드랍한 경우 - ondrop\r\n    const imageDropHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const inputFile = [...event.dataTransfer?.files];//지금 들어온 파일이다.\r\n        if(ImageValid(inputFile)){//유효한 파일인 경우 집어넣는다.\r\n            //이미지를 랜더링 해서 집어넣는다.\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(inputFile[0]);\r\n            reader.onload = (imageData) => {\r\n                const curPreview = [...newPostImages];\r\n                curPreview.push(imageData.target.result);\r\n                setNewPostImages(curPreview);\r\n            }\r\n        }\r\n\r\n        //CSS는 반드시 실행된다.\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 영역 위에 파일을 올려놓은 경우 - ondragover(이게 있어야 ondrop이 활성화 된다.)\r\n    const imageDragOverHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    //파일을 이미지 영역 위로 최초 진입한 경우 - ondragenter\r\n    const imageDragEnterHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"0.5\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"hidden\";\r\n        imageUploadArea.style.backgroundColor=\"rgb(236, 236, 236)\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(150, 150, 150)\";\r\n    };\r\n\r\n    //파일을 이미지 영역 위에서 벗어나게 한 경우 - ondragleave\r\n    const imageDragLeaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const imageUploadArea = document.querySelector(\"#imageUploadArea\");\r\n        document.querySelector(\"#imageUploadImage\").style.opacity=\"1\";\r\n        document.querySelector(\"#imageUploadMent\").style.visibility=\"visible\";\r\n        imageUploadArea.style.backgroundColor=\"white\";\r\n        imageUploadArea.style.border=\"5px dashed rgb(190, 190, 190)\";\r\n    };\r\n\r\n    //이미지 미리 보기 화면 바꿔주는 함수\r\n\r\n\r\n    //hashtag영역 바꿔주는 함수\r\n    const hashtagHandler = (event) => {\r\n        event.preventDefault();\r\n        const value = event.target.value;\r\n        if(value === \" \"){\r\n            alert(\"1글자 이상의 키워드를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(value[value.length - 1] === \" \"){// 이 경우 \r\n            const tmp = newPostHashtag;\r\n            const input = value.slice(0,-1);\r\n            if(!newPostHashtag.includes(input)){\r\n                tmp.push(input);\r\n                setNewPostHashtag(tmp);\r\n                setHashtag(\"\");\r\n            }\r\n            setHashtag(\"\");\r\n        }\r\n        else{\r\n            setHashtag(value);\r\n        }\r\n    }\r\n\r\n    //hashtag 지우는 함수\r\n    const deleteTag = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostHashtag];\r\n        tmp.splice(Number(event.target.value), 1);\r\n        setNewPostHashtag(tmp);\r\n    };\r\n\r\n    //이미지 지우는 함수\r\n    const deleteImage = (event) => {\r\n        event.preventDefault();\r\n        const tmp = [...newPostImages];\r\n        tmp.splice(Number(event.target.id), 1);\r\n        setNewPostImages(tmp);\r\n    }\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={uploadNewPostHandler}>\r\n            {/* 드래그 앤 드롭 영역 */}\r\n            <div className={Style.pictureArea}>\r\n                <div className={Style.picture} id=\"imageUploadArea\" onDrop={imageDropHandler} onDragOver={imageDragOverHandler} onDragEnter={imageDragEnterHandler} onDragLeave={imageDragLeaveHandler}>\r\n                    <img src={addImage} className={Style.pictureinnerimage} id=\"imageUploadImage\"/>\r\n                    <p className={Style.pictureinnerword} id=\"imageUploadMent\">업로드할 이미지를 여기로 옮겨주세요.</p>\r\n                </div>\r\n            </div>\r\n            {/* 올린 이미지 미리 보기 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <ImageList deleteImage={deleteImage} newPostImages={newPostImages} />\r\n            </div>\r\n            {/* hashtag label 영역 */}\r\n            <p className={Style.hashtag}>키워드 (띄어쓰기로 분리해주세요)</p>\r\n            {/* hashtag input 영역 */}\r\n            <input \r\n                type=\"text\"\r\n                value={hashtag}\r\n                onChange={hashtagHandler}\r\n                className={Style.hashtagInput}\r\n            />\r\n            {/* hashtag list 영역 */}\r\n            <div className={Style.ListArea}>\r\n                <HashtagList deleteTag={deleteTag} newPostHashtag={newPostHashtag}/>\r\n            </div>\r\n            {/* word label 영역 */}\r\n            <p className={Style.word}>글을 입력해 주세요</p>\r\n            {/* word input 영역 */}\r\n            <input \r\n                type=\"text\" \r\n                vaslue={newPostContent}\r\n                onChange={contentHandler}\r\n                className={Style.wordInput} />\r\n            {/* 글 제출 영역 */}\r\n            <div className={Style.area}>\r\n                <button type=\"submit\" className={Style.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default LeftNewPost;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\rightInner\\setting\\setting.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerMain.js",["183","184"],[],"//로그인의 초기 화면. id, 비번을 쓰는 곳이 있다.\r\nimport { useState } from 'react';\r\nimport Style from './innerMain.module.css';\r\nimport KakaoImg from '../socialImg/Kakao.png';\r\nimport NaverImg from '../socialImg/Naver.png';\r\nimport axios from 'axios';\r\nimport {\r\n    loginApiUrl,\r\n    kakaoLoginUrl,\r\n    NaverLoginUrl,\r\n} from \"../../../apiUrl\";\r\n\r\nconst Main = ({toFindPasswordPage, toSignUpPage, login}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [wrong, setWrong] = useState(\"0\");//가능한 값, clear(문제 없음), not user(이메일이나 비번이 틀린 경우)\r\n\r\n    //input 변경시 반영해주는 함수\r\n    const emailHandler = (event) =>{\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    //로그인 클릭 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(password === '') {\r\n            alert(\"비밀번호를 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(loginApiUrl, {\r\n            email: email,\r\n            password: password,\r\n        })\r\n            .then((res) => {\r\n                setWrong(\"clear\");\r\n                login(res);\r\n                window.location.href=\"/main\";\r\n            })\r\n            .catch((res) => {\r\n                console.log(res);\r\n                setWrong(\"not user\");\r\n            });\r\n    };\r\n\r\n    //카카오 로그인 처리 함수\r\n    const kakaoLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"kakao\");\r\n        window.location.href = kakaoLoginUrl;\r\n    };\r\n\r\n    //네이버 로그인 처리 함수 => 카카오와 내용은 동일하다.\r\n    const naverLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        localStorage.setItem(\"rft\", \"naver\");\r\n        window.location.href = NaverLoginUrl;\r\n    };\r\n\r\n    return(\r\n        <form className={Style.loginInnerCover} onSubmit={submitHandler}>\r\n            {/* 아이디 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                className={Style.formInput}\r\n                value={email}\r\n                onChange={emailHandler}/>\r\n            </div>\r\n            {/* 비밀번호 */}\r\n            <div className={Style.Cover}>\r\n            <input \r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                className={Style.formInput}\r\n                value={password}\r\n                onChange={passwordHandler}/>\r\n            </div>\r\n            {/* 경고문 */}\r\n            <div className={Style.Cover}>\r\n                {wrong === \"not user\" ? <p className={Style.errorMes}>잘못된 이메일 혹은 비밀번호입니다.</p> : null}\r\n            </div>\r\n            {/* 로그인버튼 */}\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.loginbtn}\r\n                    type=\"submit\">\r\n                    로 그 인\r\n                </button>\r\n            </div>\r\n            {/* 찾기와 회원가입 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toFindPasswordPage}>\r\n                            비밀번호 찾기\r\n                        </p>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p\r\n                            className={Style.word}\r\n                            onClick={toSignUpPage}>\r\n                            회원 가입\r\n                        </p>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            {/* 소셜 로그인 */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitCover}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={kakaoLoginHandler}>\r\n                            <div id=\"KakaoContainer\" className={Style.kakao}>\r\n                                <img id=\"symbol\" src={KakaoImg} className={Style.kakaoSymbol}/>\r\n                                <span id=\"label\" className={Style.kakaoLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button className={Style.Socialbtn} onClick={naverLoginHandler}>\r\n                            <div id=\"NaverContainer\" className={Style.naver}>\r\n                                <img id=\"symbol\" src={NaverImg} className={Style.naverSymbol}/>\r\n                                <span id=\"label\" className={Style.naverLabel}>로그인</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerSignUp.js",["185"],[],"//회원가입 부분\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Style from './innerSignUp.module.css';\r\nimport {\r\n    signUpApiUrl,\r\n    emailApiUrl,\r\n    loginApiUrl\r\n} from \"../../../apiUrl\";\r\n\r\nconst SignUp = ({login, toLoginPage}) => {\r\n    //변수 선언\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [age, setAge] = useState(0);\r\n    const [ageAgree, setAgeAgree] = useState(false);\r\n    const [gender, setGender] = useState(\"\");\r\n    const [genderAgree, setGenderAgree] = useState(false);\r\n    const [emailAccept, setEmailAccept] = useState(false);\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n    //input변경 처리\r\n    const emailHandler = (event) => {\r\n        event.preventDefault();\r\n        setEmail(event.target.value);\r\n    };\r\n    const passwordHandler = (event) => {\r\n        event.preventDefault();\r\n        setPassword(event.target.value);\r\n        setPasswordCheck(\"\");\r\n    };\r\n    const passwordCheckHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordCheck(event.target.value);\r\n    };\r\n    const nicknameHandler = (event) => {\r\n        event.preventDefault();\r\n        setNickname(event.target.value);\r\n    };\r\n    const ageHandler = (event) => {\r\n        event.preventDefault();\r\n        if(event.target.value >= 0){\r\n            setAge(event.target.value);\r\n        }\r\n    };\r\n    const ageAgreeHandler = () => {\r\n        setAgeAgree((current)=> !current);\r\n    };\r\n    const genderHandler = (event) => {\r\n        setGender(event.target.id);\r\n    };\r\n    const genderAgreeHandler = () => {\r\n        setGenderAgree((current)=> !current);\r\n    };\r\n\r\n    //비밀번호 유효성 확인 함수\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    }\r\n    //비밀번호 유효성 확인함수 실행부분\r\n    const passwordValid = () => {\r\n        if(passwordValidCheck(password)){\r\n            setPasswordInvalid(true);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(102, 181, 255)\";\r\n        }\r\n        else{\r\n            setPasswordInvalid(false);\r\n            document.querySelector(\"#validPasswordColorWord\").style.color = \"rgb(218, 86, 86)\";\r\n        }\r\n    }\r\n    useEffect(passwordValid, [password]);\r\n\r\n    //비밀번호 check확인 함수\r\n    const passwordCheckFunc = () => {\r\n        if(password !== passwordCheck){\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordCheckInput\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckFunc, [passwordCheck]);\r\n\r\n    //input재클릭 시 자동으로 전체선택 해주는 함수\r\n    const onfocusHandler = (event) => {\r\n        event.target.select();\r\n    };\r\n\r\n    //이메일 인증처리 함수\r\n    const emailSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '') {\r\n            alert(\"이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n        if(!email.includes(\"@\") || !email.includes(\".\")){\r\n            alert(\"올바른 이메일을 입력해 주세요\");\r\n            return;\r\n        }\r\n\r\n        axios.post(emailApiUrl, {\r\n            email: email,\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                alert(\"인증 메일을 보냈습니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = true;\r\n                setEmailAccept(true);\r\n            })\r\n            .catch((res)=> {\r\n                console.log(res);\r\n                alert(\"에러 발생 다시 시도해주십시오\");\r\n                document.querySelector(\"#emailInput\").select();\r\n            });\r\n    };\r\n\r\n    //회원가입 처리 함수\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(email === '' || password === '' || passwordCheck === '' || nickname === '' || age === 0 || gender === ''){\r\n            alert(\"정보를 모두 입력해 주십시오.\")\r\n            return;\r\n        }\r\n        if(password !== passwordCheck) {\r\n            alert(\"비밀번호를 다시 확인해 주십시오.\");\r\n            return;\r\n        }\r\n        if(!emailAccept) {\r\n            alert(\"이메일 인증을 먼저 해주십시오.\");\r\n            return;\r\n        }\r\n        if(!passwordInvalid) { \r\n            alert(\"비밀번호의 조건을 맞춰주십시오.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(signUpApiUrl, {\r\n                email: email,\r\n                password: password,\r\n                nickname: nickname,\r\n                age: age,\r\n                gender: gender,\r\n                ageVisible: ageAgree,\r\n                genderVisible: genderAgree,\r\n        })\r\n        .then((res) => {\r\n            alert(\"회원가입 되셨습니다.\");\r\n            //즉시 로그인 Api호출\r\n            axios.post(loginApiUrl, {\r\n                email: email,\r\n                password: password,\r\n            })\r\n            .then((res) => {\r\n                login(res);\r\n                window.location.href=\"/main\";\r\n            })\r\n            .catch((res) => {\r\n                alert(\"문제 발생. 다시 로그인 시도해주십시오.\");\r\n                toLoginPage();//로그인화면으로 이동\r\n            });\r\n        })\r\n        .catch((res) =>{\r\n            if(res.response.status === 400){\r\n                alert(\"이미 가입된 이메일입니다.\");\r\n                document.querySelector(\"#emailInput\").disabled = false;\r\n                setEmailAccept(false);\r\n                document.querySelector(\"#emailInput\").select();\r\n            }\r\n            else{\r\n                console.log(\"error\");\r\n                console.log(res);\r\n            }\r\n        });\r\n    };\r\n\r\n    return(\r\n        <form className={Style.SignUpCover} onSubmit={submitHandler}>\r\n            {/* 이메일 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"emailInput\">\r\n                    Email\r\n                </label>\r\n            </div>\r\n            {/* 이메일 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"emailInput\"\r\n                            type=\"email\"\r\n                            className={Style.formInput}\r\n                            value={email}\r\n                            onChange={emailHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.emailButton}\r\n                            onClick={emailSubmitHandler}>\r\n                            인증\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 비밀번호 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordInput\">\r\n                    Password  \r\n                </label>\r\n                <p id=\"validPasswordColorWord\" className={Style.smallAlertWord}>  (8~16자리, 소문자, 특수문자를 하나이상 포함.)</p>\r\n            </div>\r\n            {/* 비밀번호 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={password}\r\n                    onChange={passwordHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 비밀번호 확인 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"passwordCheckInput\">\r\n                    Password 확인\r\n                </label>\r\n            </div>\r\n            {/* 비밀번호 확인 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"passwordCheckInput\"\r\n                    type=\"password\"\r\n                    className={Style.formInput}\r\n                    value={passwordCheck}\r\n                    onChange={passwordCheckHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 닉네임 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"nicknameInput\">\r\n                    Nickname\r\n                </label>\r\n            </div>\r\n            {/* 닉네임 Input */}\r\n            <div className={Style.Cover}>\r\n                <input\r\n                    id=\"nicknameInput\"\r\n                    type=\"text\"\r\n                    className={Style.formInput}\r\n                    value={nickname}\r\n                    onChange={nicknameHandler}\r\n                    onFocus={onfocusHandler}\r\n                />\r\n            </div>\r\n            {/* 나이 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}\r\n                    htmlFor=\"ageInput\">\r\n                    나이\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 나이 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageInput\"\r\n                            type=\"number\"\r\n                            className={Style.formInput}\r\n                            value={age}\r\n                            onChange={ageHandler}\r\n                            onFocus={onfocusHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"ageAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={ageAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* 성별 Label */}\r\n            <div className={Style.Cover}>\r\n                <label \r\n                    className={Style.formLabel}>\r\n                    성별\r\n                </label>\r\n                <p className={Style.smallCommentWord}> 해당 정보를 공개하려면 체크해주세요.</p>\r\n            </div>\r\n            {/* 성별 Input */}\r\n            <div className={Style.Cover}>\r\n                <div className={Style.splitInput}>\r\n                    <div className={Style.Cover}>\r\n                        <div className={Style.genderInputArea}>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"MALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"MALE\" className={Style.genderLabel}>남</label>\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <input\r\n                                    id=\"FEMALE\"\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    className={Style.genderInput}\r\n                                    onChange={genderHandler}\r\n                                />\r\n                            </div>\r\n                            <div className={Style.Cover}>\r\n                                <label htmlFor=\"FEMALE\" className={Style.genderLabel}>여</label>\r\n                            </div>\r\n                            <div />\r\n                        </div>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"genderAgree\"\r\n                            type=\"checkbox\"\r\n                            className={Style.agreeInput}\r\n                            onChange={genderAgreeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.btnArea}>\r\n                    <div />\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            onClick={toLoginPage}\r\n                            type=\"button\"\r\n                            className={Style.cancelBtn}\r\n                            value=\"0\">\r\n                            취 소\r\n                        </button>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={Style.submitBtn}>\r\n                            가 입\r\n                        </button>\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Login\\inner\\innerFindPW.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\root\\profile.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\passwordSetting.js",["186"],[],"import Style from './passwordSetting.module.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {\r\n    passwordCheckForPasswordChangeUrl,\r\n    passwordChangeUrl\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst PasswordSetting = () => {\r\n    //useState 선언\r\n    const [previousPassword, setPreviousPassword] = useState(\"\");\r\n    const [passwordChange, setPasswordChange] = useState(\"\");\r\n    const [passwordChangeCheck, setPasswordChangeCheck] = useState(\"\");\r\n    const [passwordCondition, setPasswordCondition] = useState(false);//조건 확인\r\n\r\n    //비밀번호 변경 함수\r\n    const previousPasswordChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPreviousPassword(event.target.value);\r\n    };\r\n    const passwordChangeChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChange(event.target.value);\r\n        setPasswordChangeCheck(\"\");\r\n    };\r\n    const passwordChangeCheckChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPasswordChangeCheck(event.target.value);\r\n    };\r\n\r\n    //submit handler\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if(previousPassword === passwordChange){\r\n            alert(\"바꾸려는 비밀번호가 동일합니다.\");\r\n            return;\r\n        }\r\n        if(!passwordCondition){\r\n            alert(\"새 비밀번호가 비밀번호 조건에 맞지 않습니다.\");\r\n            return;\r\n        }\r\n        if(passwordChange !== passwordChangeCheck){\r\n            alert(\"새 비밀번호와 새 비밀번호 확인이 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n\r\n        axios.post(passwordCheckForPasswordChangeUrl,{\r\n            password: previousPassword,\r\n        })\r\n        .then((res) => {\r\n            axios.post(passwordChangeUrl,{\r\n                password: passwordChange,\r\n            })\r\n            .then((res) => {\r\n                alert(\"비밀번호가 변경되었습니다.\");\r\n                //window.location.href = '/main';\r\n            })\r\n            .catch((res) => {\r\n                alert(\"에러 발생\");\r\n                //window.location.href = '/main';\r\n            })\r\n        })\r\n        .catch((res) => {\r\n            alert(\"기존 비밀번호가 틀립니다.\");\r\n        })\r\n    };\r\n\r\n    //비밀번호 동일한지 확인해서 style바꿔주는 함수\r\n    const passwordCheckSameCheck = () => {\r\n        if(passwordChangeCheck === \"\"){//비어있으면 빨간 선을 없앤다.\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n            return;\r\n        }\r\n        if(passwordChangeCheck !== passwordChange){\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 2px rgb(218, 86, 86)\";\r\n        }\r\n        else{\r\n            document.querySelector(\"#passwordChangeCheck\").style.outline = \"solid 1px rgb(186, 186, 186)\";\r\n        }\r\n    };\r\n    useEffect(passwordCheckSameCheck, [passwordChangeCheck]);\r\n\r\n\r\n    //비밀번호 조건확인\r\n    function passwordValidCheck(str){\r\n        const PWD_RULE =  /^(?=.*[a-zA-Z])((?=.*\\d)(?=.*\\W)).{8,16}$/;\r\n        return str.match(PWD_RULE);\r\n    };\r\n\r\n    //비밀번호 조건확인하는 함수 함수\r\n    const passwordValid = () => {\r\n        setPasswordCondition(passwordValidCheck(passwordChange));\r\n    };\r\n    useEffect(passwordValid, [passwordChange]);\r\n\r\n    return(\r\n        <form className={Style.WholeCover} onSubmit={submitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.formArea}>\r\n                    {/* 현재 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"prevPW\"\r\n                            className={Style.settingLabel}>\r\n                            이전 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"prevPW\"\r\n                            type=\"password\"\r\n                            value={previousPassword}\r\n                            onChange={previousPasswordChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChange'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChange\"\r\n                            type=\"password\"\r\n                            value={passwordChange}\r\n                            onChange={passwordChangeChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                    {/* 새 비밀번호 확인 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='passwordChangeCheck'\r\n                            className={Style.settingLabel}>\r\n                            새 비밀번호 확인\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"passwordChangeCheck\"\r\n                            type=\"password\"\r\n                            value={passwordChangeCheck}\r\n                            onChange={passwordChangeCheckChangeHandler}\r\n                            className={Style.settingInput}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                {passwordCondition ? null : <p className={Style.alertWord}>비밀번호는 8~16자리, 소문자, 특수문자를 하나이상 포함.</p>}\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button type=\"submit\" className={Style.submitButton}>수정</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PasswordSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\noticeSetting.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\filteringSetting.js",[],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\blockSetting.js",["187","188","189","190"],[],"C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\profileSetting.js",["191","192"],[],"import {useState, useEffect} from 'react';\r\nimport Style from './profileSetting.module.css';\r\nimport nullImage from '../../root/anonymous.png';\r\nimport {\r\n    getcurrentProfileUrl,\r\n    submitProfileSettingUrl,\r\n} from '../../../../apiUrl';\r\nimport axios from 'axios';\r\n\r\nconst ProfileSetting = () => {\r\n    //api에 보낼 내용 + input에 반영해야하므로 useState로 선언\r\n    const [ps_userImage, setPs_UserImage] = useState(\"\");\r\n    const [ps_userName, setPs_UserName] = useState(\"\");\r\n    const [ps_userAge, setPs_UserAge] = useState(\"\");\r\n    const [ps_userAgeVisible, setPs_UserAgeVisible] = useState(\"\");\r\n    const [ps_userGender, setPs_userGender] = useState(\"\");\r\n    const [ps_userGenderVisible, setPs_UserGenderVisible] = useState(\"\");\r\n    const [ps_userIntroduce, setPs_UserIntroduce] = useState(\"\");\r\n\r\n    //공개 여부 인지 후 색상 변경 함수\r\n    const ageVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userAgeVisible){//나이가 공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#ageVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(ageVisibleBtnChangeHandler, [ps_userAgeVisible]);\r\n\r\n    const genderVisibleBtnChangeHandler = (event) => {\r\n        if(ps_userGenderVisible){//성별이 공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(160, 160, 160)\";\r\n        }\r\n        else{//나이가 비공개로 되어있는 경우\r\n            document.querySelector(\"#genderVisibleBtn\").style.backgroundColor = \"rgb(209, 209, 209)\";\r\n        }\r\n    };\r\n    useEffect(genderVisibleBtnChangeHandler, [ps_userGenderVisible]);\r\n\r\n    //초기 상태 명시용 함수\r\n    const profileSettingPreset = () => {\r\n        axios.get(getcurrentProfileUrl)\r\n        .then((res) => {\r\n            console.log(res.data.data);\r\n            setPs_UserImage(res.data.data.imgUrl);//프로필 이미지 설정 없으면 null\r\n            setPs_UserName(res.data.data.nickname);//이름 설정 - api upload\r\n            setPs_UserAge(res.data.data.age);//나이 설정\r\n            setPs_UserAgeVisible(res.data.data.ageVisible);//나이 공개\r\n            if(res.data.data.gender === \"MALE\"){//성별 설정\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            else{\r\n                setPs_userGender(res.data.data.gender);\r\n            }\r\n            setPs_UserGenderVisible(res.data.data.genderVisible);//성별 공개\r\n            if(res.data.data.selfIntroduction === null){//자기소개 설정\r\n                setPs_UserIntroduce(\"\");\r\n            }\r\n            else{\r\n                setPs_UserIntroduce(res.data.data.selfIntroduction);\r\n            }\r\n        })\r\n        .catch((res) => {\r\n            console.log(res);\r\n            alert(\"에러 발생\");\r\n            //window.location.href = \"/main\";\r\n        });\r\n    };\r\n    useEffect(profileSettingPreset, []);\r\n\r\n    //submit함수\r\n    const profileSettingSubmitHandler = (event) => {//작성필요\r\n        event.preventDefault();\r\n        axios.post(submitProfileSettingUrl,{\r\n            nickname: ps_userName,\r\n            age: ps_userAge,\r\n            gender: ps_userGender,\r\n            ageVisible: ps_userAgeVisible,\r\n            genderVisible:ps_userGenderVisible,\r\n            imgUrl: ps_userImage,\r\n            selfIntroduction: ps_userIntroduce,\r\n        })\r\n        .then((res) => {\r\n            console.log(res);\r\n            alert(\"설정을 변경했습니다.\");\r\n            //window.location.href = \"/main\";\r\n        })\r\n        .catch((res) => {\r\n            console.log(res);\r\n            alert(\"문제가 발생했습니다.\")\r\n        })\r\n    }\r\n\r\n    //이미지 변경 함수 - ps_nextUserImage를 바꾼다.\r\n    const profileImageChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        const inputImage = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(inputImage);\r\n        reader.onload = (imageData) => {\r\n            setPs_UserImage(imageData.target.result);\r\n        }\r\n    };\r\n\r\n    //값 변경 함수\r\n    const nicknameChageHandler = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const ageChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAge(event.target.value);\r\n    };\r\n    const selfIntroductionChageHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserIntroduce(event.target.value);\r\n    };\r\n    \r\n    //공개여부 변경 함수\r\n    const ageVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserAgeVisible((cur) => !cur);\r\n    };\r\n\r\n    const genderVisibleChangeHandler = (event) => {\r\n        event.preventDefault();\r\n        setPs_UserGenderVisible((cur) => !cur);\r\n    };\r\n\r\n\r\n    return(\r\n        <form className={Style.profileSettingCover} onSubmit={profileSettingSubmitHandler}>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.MyprofileExample}>\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor='UserProfileImage'>\r\n                            {\r\n                                (ps_userImage === undefined || ps_userImage === null)\r\n                                ? \r\n                                <img src={nullImage} className={Style.myprofileImage}/>\r\n                                :\r\n                                <img src={ps_userImage} className={Style.myprofileImage}/>\r\n                            }\r\n                        </label>\r\n                        <input \r\n                            type=\"file\"\r\n                            onChange={profileImageChangeHandler}\r\n                            className={Style.myprofileImageInput}\r\n                            id=\"UserProfileImage\"\r\n                            accept=\"image/*\"\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <p className={Style.myprofileNickname}>{ps_userName}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.profileSettingDetail}>\r\n                    {/* 닉네임 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingUserName\"\r\n                            className={Style.profileSettingLabel}>\r\n                            사용자 이름\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingUserName\"\r\n                            type=\"text\"\r\n                            maxLength={14}\r\n                            value={ps_userName}\r\n                            onChange={nicknameChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div />\r\n                    {/* 나이 */}\r\n                    <div className={Style.Cover}>\r\n                        <label \r\n                            htmlFor=\"profileSettingAge\"\r\n                            className={Style.profileSettingLabel}>\r\n                            나이\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input\r\n                            id=\"profileSettingAge\"\r\n                            type=\"number\"\r\n                            value={ps_userAge}\r\n                            onChange={ageChageHandler}\r\n                            className={Style.profileSettingInput}\r\n                        />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button\r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"ageVisibleBtn\"\r\n                            onClick={ageVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 성별 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            className={Style.profileSettingLabel}>\r\n                            성별\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        {\r\n                            ps_userGender === \"MALE\" ?\r\n                            <input type=\"text\" value=\"남\" className={Style.profileSettingInput} readOnly />\r\n                            :\r\n                            <input type=\"text\" value=\"여\" className={Style.profileSettingInput} readOnly />\r\n                        }\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <button \r\n                            className={Style.smallSettingButton}\r\n                            type=\"button\"\r\n                            id=\"genderVisibleBtn\"\r\n                            onClick={genderVisibleChangeHandler}>\r\n                            공개\r\n                        </button>\r\n                    </div>\r\n                    {/* 자기소개 */}\r\n                    <div className={Style.Cover}>\r\n                        <label\r\n                            htmlFor=\"profileSettingIntroduce\"\r\n                            className={Style.profileSettingLabel}>\r\n                            자기소개\r\n                        </label>\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <input \r\n                            id=\"profileSettingIntroduce\"\r\n                            type=\"text\"\r\n                            maxLength={30}\r\n                            value={ps_userIntroduce}\r\n                            onChange={selfIntroductionChageHandler}\r\n                            className={Style.profileSettingInput} />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <button \r\n                    className={Style.submitButton}\r\n                    type=\"submit\">\r\n                    수정\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileSetting;","C:\\Users\\성의현\\Desktop\\grad\\src\\routes\\Home\\leftInner\\setting\\credit.js",["193"],[],"import Style from './credit.module.css';\r\nimport HongikLogo from './hongiklogo/Logo_of_hongik_university.jpg';\r\n\r\nconst Person = ({name, email, github}) => {\r\n    return(\r\n        <div className={Style.personArea}>\r\n            <p className={Style.name}>{name}</p>\r\n            <p className={Style.email}>{email}</p>\r\n            <a className={Style.github} href={github}>{github}</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Credit = () => {\r\n    return(\r\n        <div className={Style.wholeCover}>\r\n            <div className={Style.Cover}>\r\n                <img src={HongikLogo} className={Style.HongikLogo} />\r\n            </div>\r\n            <div className={Style.Cover}>\r\n                <div className={Style.creditArea}>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711093 / 성의현\" email=\"luckhome1020@gmail.com\" github=\"https://github.com/SungIII\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711142 / 이종찬\" email=\"reljacer@gmail.com\" github=\"https://github.com/Lipeya\" />\r\n                    </div>\r\n                    <div className={Style.Cover}>\r\n                        <Person name=\"B711163 / 임채민\" email=\"chemin9898@gmail.com\" github=\"https://github.com/lacram\" />\r\n                    </div>\r\n                    <div />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Credit;",{"ruleId":"194","severity":1,"message":"195","line":6,"column":3,"nodeType":"196","messageId":"197","endLine":6,"endColumn":11},{"ruleId":"194","severity":1,"message":"198","line":5,"column":8,"nodeType":"196","messageId":"197","endLine":5,"endColumn":20},{"ruleId":"194","severity":1,"message":"199","line":132,"column":9,"nodeType":"196","messageId":"197","endLine":132,"endColumn":19},{"ruleId":"200","severity":1,"message":"201","line":157,"column":17,"nodeType":"202","endLine":157,"endColumn":103},{"ruleId":"200","severity":1,"message":"201","line":164,"column":17,"nodeType":"202","endLine":164,"endColumn":105},{"ruleId":"200","severity":1,"message":"201","line":171,"column":17,"nodeType":"202","endLine":171,"endColumn":112},{"ruleId":"200","severity":1,"message":"201","line":178,"column":17,"nodeType":"202","endLine":178,"endColumn":104},{"ruleId":"200","severity":1,"message":"201","line":185,"column":17,"nodeType":"202","endLine":185,"endColumn":108},{"ruleId":"200","severity":1,"message":"201","line":12,"column":13,"nodeType":"202","endLine":12,"endColumn":77},{"ruleId":"200","severity":1,"message":"201","line":12,"column":13,"nodeType":"202","endLine":12,"endColumn":77},{"ruleId":"194","severity":1,"message":"203","line":1,"column":10,"nodeType":"196","messageId":"197","endLine":1,"endColumn":18},{"ruleId":"204","severity":1,"message":"205","line":36,"column":17,"nodeType":"196","messageId":"206","endLine":36,"endColumn":25},{"ruleId":"204","severity":1,"message":"207","line":37,"column":17,"nodeType":"196","messageId":"206","endLine":37,"endColumn":31},{"ruleId":"208","severity":1,"message":"209","line":74,"column":30,"nodeType":"210","endLine":74,"endColumn":32,"suggestions":"211"},{"ruleId":"200","severity":1,"message":"201","line":24,"column":21,"nodeType":"202","endLine":24,"endColumn":116},{"ruleId":"212","severity":1,"message":"213","line":50,"column":29,"nodeType":"214","messageId":"215","endLine":50,"endColumn":31},{"ruleId":"212","severity":1,"message":"213","line":59,"column":43,"nodeType":"214","messageId":"215","endLine":59,"endColumn":45},{"ruleId":"200","severity":1,"message":"201","line":164,"column":21,"nodeType":"202","endLine":164,"endColumn":100},{"ruleId":"200","severity":1,"message":"201","line":134,"column":33,"nodeType":"202","endLine":134,"endColumn":96},{"ruleId":"200","severity":1,"message":"201","line":142,"column":33,"nodeType":"202","endLine":142,"endColumn":96},{"ruleId":"208","severity":1,"message":"216","line":85,"column":34,"nodeType":"210","endLine":85,"endColumn":49,"suggestions":"217"},{"ruleId":"208","severity":1,"message":"218","line":81,"column":39,"nodeType":"210","endLine":81,"endColumn":60,"suggestions":"219"},{"ruleId":"194","severity":1,"message":"220","line":10,"column":12,"nodeType":"196","messageId":"197","endLine":10,"endColumn":28},{"ruleId":"194","severity":1,"message":"221","line":10,"column":30,"nodeType":"196","messageId":"197","endLine":10,"endColumn":49},{"ruleId":"194","severity":1,"message":"222","line":11,"column":12,"nodeType":"196","messageId":"197","endLine":11,"endColumn":25},{"ruleId":"194","severity":1,"message":"223","line":11,"column":27,"nodeType":"196","messageId":"197","endLine":11,"endColumn":43},{"ruleId":"200","severity":1,"message":"201","line":141,"column":33,"nodeType":"202","endLine":141,"endColumn":88},{"ruleId":"200","severity":1,"message":"201","line":143,"column":33,"nodeType":"202","endLine":143,"endColumn":91},{"ruleId":"200","severity":1,"message":"201","line":18,"column":17,"nodeType":"202","endLine":18,"endColumn":70},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'NumberNotice' is defined but never used.","'leftChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","no-const-assign","'pageList' is constant.","const","'currentStartId' is constant.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newPostCommentNotice', 'newPostLikeNotice', 'newPostReadCommentAuth', 'newPostReadLikeAuth', 'newPostReadPostAuth', and 'newPostWriteCommentAuth'. Either include them or remove the dependency array.","ArrayExpression",["224"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.",["225"],"React Hook useEffect has a missing dependency: 'passwordChange'. Either include it or remove the dependency array.",["226"],"'searchedUserList' is assigned a value but never used.","'setSearchedUserList' is assigned a value but never used.","'AddedUserList' is assigned a value but never used.","'setAddedUserList' is assigned a value but never used.",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",{"range":"233","text":"234"},"Update the dependencies array to be: [password, passwordCheck]",{"range":"235","text":"236"},"Update the dependencies array to be: [passwordChange, passwordChangeCheck]",{"range":"237","text":"238"},[3632,3634],"[newPostCommentNotice, newPostLikeNotice, newPostReadCommentAuth, newPostReadLikeAuth, newPostReadPostAuth, newPostWriteCommentAuth]",[2848,2863],"[password, passwordCheck]",[2771,2792],"[passwordChange, passwordChangeCheck]"]